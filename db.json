{"meta":{"version":1,"warehouse":"1.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1},{"_id":"source/uploads/2014/02/device-2014-02-20-213148.png","path":"uploads/2014/02/device-2014-02-20-213148.png","modified":1},{"_id":"source/uploads/2014/02/device-2014-02-20-213148-500x209.png","path":"uploads/2014/02/device-2014-02-20-213148-500x209.png","modified":1},{"_id":"source/uploads/2014/02/device-2014-02-20-213148-200x83.png","path":"uploads/2014/02/device-2014-02-20-213148-200x83.png","modified":1},{"_id":"source/uploads/2014/02/device-2014-02-20-213148-150x150.png","path":"uploads/2014/02/device-2014-02-20-213148-150x150.png","modified":1},{"_id":"source/uploads/2014/02/device-2014-02-20-213148-1024x429.png","path":"uploads/2014/02/device-2014-02-20-213148-1024x429.png","modified":1},{"_id":"source/uploads/2013/12/header_graphic.png","path":"uploads/2013/12/header_graphic.png","modified":1},{"_id":"source/uploads/2013/12/header_graphic-500x254.png","path":"uploads/2013/12/header_graphic-500x254.png","modified":1},{"_id":"source/uploads/2013/12/header_graphic-200x101.png","path":"uploads/2013/12/header_graphic-200x101.png","modified":1},{"_id":"source/uploads/2013/12/header_graphic-150x150.png","path":"uploads/2013/12/header_graphic-150x150.png","modified":1},{"_id":"source/uploads/2013/12/combined_chart.png","path":"uploads/2013/12/combined_chart.png","modified":1},{"_id":"source/uploads/2013/12/combined_chart-90x150.png","path":"uploads/2013/12/combined_chart-90x150.png","modified":1},{"_id":"source/uploads/2013/12/combined_chart-300x500.png","path":"uploads/2013/12/combined_chart-300x500.png","modified":1},{"_id":"source/uploads/2013/12/combined_chart-150x150.png","path":"uploads/2013/12/combined_chart-150x150.png","modified":1},{"_id":"source/uploads/2013/12/android-wheel-cities.png","path":"uploads/2013/12/android-wheel-cities.png","modified":1},{"_id":"source/uploads/2013/12/android-wheel-cities-200x83.png","path":"uploads/2013/12/android-wheel-cities-200x83.png","modified":1},{"_id":"source/uploads/2013/12/android-wheel-cities-150x131.png","path":"uploads/2013/12/android-wheel-cities-150x131.png","modified":1},{"_id":"source/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67.png","path":"uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67.png","modified":1},{"_id":"source/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-489x500.png","path":"uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-489x500.png","modified":1},{"_id":"source/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-150x150.png","path":"uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-150x150.png","modified":1},{"_id":"source/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-146x150.png","path":"uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-146x150.png","modified":1},{"_id":"source/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67.png","path":"uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67.png","modified":1},{"_id":"source/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-500x236.png","path":"uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-500x236.png","modified":1},{"_id":"source/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-200x94.png","path":"uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-200x94.png","modified":1},{"_id":"source/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-150x150.png","path":"uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-150x150.png","modified":1},{"_id":"source/uploads/2013/12/2012110712582439.png","path":"uploads/2013/12/2012110712582439.png","modified":1},{"_id":"source/uploads/2013/12/2012110712582439-150x150.png","path":"uploads/2013/12/2012110712582439-150x150.png","modified":1},{"_id":"source/uploads/2013/12/2012110712582439-112x150.png","path":"uploads/2013/12/2012110712582439-112x150.png","modified":1},{"_id":"source/uploads/2013/10/sina-weibo-tool-bar-demo.zip","path":"uploads/2013/10/sina-weibo-tool-bar-demo.zip","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872.png","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872-300x170.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872-300x170.png","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872-150x150.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872-150x150.png","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871.png","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871-300x218.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871-300x218.png","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871-150x150.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871-150x150.png","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587.png","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-624x325.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-624x325.png","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-300x156.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-300x156.png","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-150x150.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-150x150.png","modified":1},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-1024x533.png","path":"uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-1024x533.png","modified":1},{"_id":"source/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa.png","path":"uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa.png","modified":1},{"_id":"source/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-624x127.png","path":"uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-624x127.png","modified":1},{"_id":"source/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-300x61.png","path":"uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-300x61.png","modified":1},{"_id":"source/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-150x138.png","path":"uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-150x138.png","modified":1},{"_id":"source/CNAME","path":"CNAME","modified":1}],"Cache":[{"_id":"source/404.html","shasum":"abb7d6eff1932d3159c0acd2042c95b43ac85e87","modified":1426772430000},{"_id":"source/CNAME","shasum":"752c372bab78ab129d5cf4709d1142b472ec2dd0","modified":1426772430000},{"_id":"source/_posts/2010-11-11-setup-android-for-window.md","shasum":"e92ed35b45c85d56e3b5c0f1854074d386c64c17","modified":1426772430000},{"_id":"source/_posts/2010-11-12-android-setup-config-for-linux.md","shasum":"1c753ec64e57d3e875c066d95d7284c168889384","modified":1426772430000},{"_id":"source/_posts/2010-11-13-android-helloworld.md","shasum":"5dc1003c95e375b022f1ce23c50939b7a9d063a3","modified":1426772430000},{"_id":"source/_posts/2010-11-16-android-project-directory-structure.md","shasum":"52c286c93f5f09b078ef4d59828b629a34937604","modified":1426772430000},{"_id":"source/_posts/2010-11-17-android-activity-statement-cycle-tutorials.md","shasum":"d3d606ce02d4ef567442e1be43fa8833882ee048","modified":1426772430000},{"_id":"source/_posts/2010-11-24-android-textview-tutorials.md","shasum":"6b499f372a6c9e355b3a2a15e7d593ff685ae202","modified":1426772430000},{"_id":"source/_posts/2010-11-29-android-edittext-tutorials.md","shasum":"77780c99ec6fd0ec758f65d4a73204a7ff3dd48c","modified":1426772430000},{"_id":"source/_posts/2011-01-08-android-listview-tutorials.md","shasum":"1231828c73b62dd2ce9708134201352c851b6eb6","modified":1426772430000},{"_id":"source/_posts/2011-01-10-android-sources-directory-structure.md","shasum":"27fa51f0ad1c9d98b73af2bebe768d5d05c38fb4","modified":1426772430000},{"_id":"source/_posts/2011-01-20-android-gridview-tutorial.md","shasum":"627839c517cb68c4814b581fb34a4dd35fdbb25a","modified":1426772430000},{"_id":"source/_posts/2011-02-15-android-icon-with-number.md","shasum":"0a521020d1389797e2873eaa402ece30e673f793","modified":1426772430000},{"_id":"source/_posts/2011-02-22-writing-efficient-android-code.md","shasum":"898d15d90b19a1ad3b55a881e8d1d5a4a3ccd213","modified":1426772430000},{"_id":"source/_posts/2011-03-02-sina-weibo-tool-bar-tabhost.md","shasum":"b878c824aed026a3187b33ddf16be86dce926fd9","modified":1426772430000},{"_id":"source/_posts/2011-03-08-android-bottom-tool-bar-demo.md","shasum":"a1ada3ffa91f7de4b2adda7a5a5c2195d8650dc6","modified":1426772430000},{"_id":"source/_posts/2011-03-14-android-intents-and-intent-filters-one.md","shasum":"58f4290111ff57f5639ded7b25b45876d024ea44","modified":1426772430000},{"_id":"source/_posts/2011-03-17-android-intents-and-intent-filters-two.md","shasum":"ad8d03c7dd2a093ffc25852d9bd2b3c4c6bfc30e","modified":1426772430000},{"_id":"source/_posts/2011-03-28-do-you-know-android-resource.md","shasum":"218e58262d3843ed1c3cb46a2a4d481149def397","modified":1426772430000},{"_id":"source/_posts/2011-03-29-android-intents-and-intent-filters-three.md","shasum":"bcc057ed4d6b2b92f3f591a4070699e35b527f9e","modified":1426772430000},{"_id":"source/_posts/2011-05-21-android-thread-notice-item.md","shasum":"4e8bb791c96841f1a7bf266fff5c6bb1434171da","modified":1426772430000},{"_id":"source/_posts/2011-07-17-practices-of-an-agile-developer.md","shasum":"3e07bb116ba655281ff9ce18f4ccc360ca381524","modified":1426772430000},{"_id":"source/_posts/2011-07-19-android-send-email-intro.md","shasum":"f2a52998ee317f374d3d91c84aeed4f93fc2c837","modified":1426772430000},{"_id":"source/_posts/2011-10-22-adsl-and-vpn-config-for-ubuntu.md","shasum":"4a27049106e735bfb24cd6f71eaa5aacad2d9781","modified":1426772430000},{"_id":"source/_posts/2011-11-11-android-asset-studio-integration.md","shasum":"598ff18a8e8c7bc54f79c16b4dbeb1c581037463","modified":1426772430000},{"_id":"source/_posts/2011-11-15-android-4-0-api-arrange.md","shasum":"9494c857e3faa0bfc981018bcd5c9e3487544e23","modified":1426772430000},{"_id":"source/_posts/2011-11-15-download-android-4-0-sources.md","shasum":"88c19dc13c43f60092753228d45bc3c7d61c909a","modified":1426772430000},{"_id":"source/_posts/2011-12-10-android-float-widget.md","shasum":"383186c79623b706ecdcd12914073bd658fb7a21","modified":1426772430000},{"_id":"source/_posts/2013-01-05-android-viewgroup-setdescendantfocusability.md","shasum":"7420968e10aa114abcc77cd56034e05fe5e18c7b","modified":1426772430000},{"_id":"source/_posts/2013-01-28-android-layout-height-fail.md","shasum":"0930f0f830fadb61331311e6fd44db7fd1af39cb","modified":1426772430000},{"_id":"source/_posts/2013-02-22-android-holo-theme-cts.md","shasum":"20832271a24762f07967b6b0ec083c66871808ca","modified":1426772430000},{"_id":"source/_posts/2013-03-29-ubuntu-saned-disabled.md","shasum":"f0dcec0549bccb035ceba9272c81dc972dcae2f3","modified":1426772430000},{"_id":"source/_posts/2013-10-06-resolve-android-sdk-manager-can-not-update.md","shasum":"20e742da87d595cb83698232c920cc1a22c33d99","modified":1426772430000},{"_id":"source/_posts/2013-10-07-ubuntu-sougou-pinyin-input-method.md","shasum":"bf230cc5ac31ec0494d749e1f2367a89fc52970f","modified":1426772430000},{"_id":"source/_posts/2013-10-11-android-bool-preferences-storage-optimization.md","shasum":"720cae01a88eeacbcdf648c065d78a616a02b043","modified":1426772430000},{"_id":"source/_posts/2013-11-02-android-4-4-alarm-manager-changed.md","shasum":"d774639c7092f7f61176b5d6a52846f6cab9c980","modified":1426772430000},{"_id":"source/_posts/2013-11-07-goagent-403-not-have-permiss.md","shasum":"190cd9b99061cc7dbf9e9b5268b7a2bfa7735f33","modified":1426772430000},{"_id":"source/_posts/2013-11-07-unsupportedoperationexception-gles20canvas-clippath.md","shasum":"b2cc4230a97df65a7116754d31a64014e6b33e8d","modified":1426772430000},{"_id":"source/_posts/2013-11-21-android-httpclitent-session-keep.md","shasum":"c2ad0b3bd206b951d84c5d54a2f1eced68d8d122","modified":1426772430000},{"_id":"source/_posts/2013-12-14-open-source-project-in-android-app.md","shasum":"30f47e1ca1eb2aff40fa456a4a94d2f15d787bc2","modified":1426772430000},{"_id":"source/_posts/2013-12-27-linux-php-server-with-nginx.md","shasum":"065c8473644cf737a61f162985a0a6753c931e1f","modified":1426772430000},{"_id":"source/_posts/2014-02-20-android-overlay-guide.md","shasum":"3c3316f2e330d884104b34b70564dd63a16166e5","modified":1426772430000},{"_id":"source/_posts/2014-03-22-android-avd-not-launcher.md","shasum":"9724ee0c6aee5cb8b7d1158b71f168bfb5936fec","modified":1426772430000},{"_id":"source/_posts/2014-07-13-effective-programming-more-than-writing-code.md","shasum":"a7525f83f397d1dcaa21682d005c7f7cc83de9fa","modified":1426772430000},{"_id":"source/_posts/2015-01-12-android-gradle-plugin-translate-done.md","shasum":"a4b53d5730b5b51dd92580723613478e8a56e5b1","modified":1426772430000},{"_id":"source/_posts/2015-03-10-github-page-with-hexo.md","shasum":"9996f5c7197a72a53c33f912d3c73ec3b348b218","modified":1426772430000},{"_id":"source/_posts/2015-03-19-android-process-application-init-databases-problem.md","shasum":"83f892342c3fe0e84c625e1a1e9b13c10b20c18c","modified":1426776354000},{"_id":"source/about/index.md","shasum":"7ca3476f16991fb255e3b646397ceb0df116b66e","modified":1426772430000},{"_id":"source/baidu_verify_8kkhILkime.html","shasum":"6a6fa65296a9bd2b93ea467af510958c20d1cec4","modified":1426772430000},{"_id":"source/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-150x138.png","shasum":"853a5194b873862a3058886725effc8b0b027983","modified":1426772430000},{"_id":"source/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-300x61.png","shasum":"ade6b1c78538752807d2caad2fc20a376497c218","modified":1426772430000},{"_id":"source/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-624x127.png","shasum":"91d4fc0660814735acc18233875538b1f035d090","modified":1426772430000},{"_id":"source/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa.png","shasum":"a7d924656ee5260db75053d5235137beb4d1a0f6","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-1024x533.png","shasum":"6c76f260c123e486668470a3d9b2d8fe6de38e65","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-150x150.png","shasum":"cae3ac76430a3c04e0ae7391f8a0eaa10735adf6","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-300x156.png","shasum":"47028f883a793943aa4abc94a224dfb45b80e6f2","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-624x325.png","shasum":"98d3cbb47cce27ac64fcdef5b8cdc3e770fb2e66","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871-150x150.png","shasum":"3787c30dee40e003d5c595bfaac807b823ae574a","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871-300x218.png","shasum":"c47af7683be0aaadf0a75ecd67723bdb638726ec","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871.png","shasum":"a0090f317b3cf0f54e3700cfbab9f88756624a9a","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872-150x150.png","shasum":"1cc9b3c75960f104599364a88b3fe291eced6a8b","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872-300x170.png","shasum":"fdc2dc790b93f4c35cc0d1374e85f439786ca516","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872.png","shasum":"fa6b52d90f7d0f9e1ba3779bcba65f5190b2e272","modified":1426772430000},{"_id":"source/uploads/2013/12/2012110712582439-112x150.png","shasum":"a3e79593b7b8ad452668673f534ee391d2bbf431","modified":1426772430000},{"_id":"source/uploads/2013/12/2012110712582439-150x150.png","shasum":"e73699bc7bed02fa2922f1596e6c8b77b5c71845","modified":1426772430000},{"_id":"source/uploads/2013/12/2012110712582439.png","shasum":"c0d457608cab3e421c61590b05ccc81a2ff9c262","modified":1426772430000},{"_id":"source/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-150x150.png","shasum":"fc18d1d10ddd58c02a3c08a596e1a87e201034c5","modified":1426772430000},{"_id":"source/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-200x94.png","shasum":"dd38af8f96817ff7557c4e297c8991163ce231d1","modified":1426772430000},{"_id":"source/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-500x236.png","shasum":"71af330762365182c2a61a0cd49a9eb566fb7491","modified":1426772430000},{"_id":"source/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-146x150.png","shasum":"e90c564624ca7dc1c5ca59243bb9d18ad1ca5788","modified":1426772430000},{"_id":"source/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-150x150.png","shasum":"5e619572c03a683793fb6a22acf5a3fdb03b43d4","modified":1426772430000},{"_id":"source/uploads/2013/12/android-wheel-cities-150x131.png","shasum":"900aef8c92b755b78923ac57de9a27980bad7830","modified":1426772430000},{"_id":"source/uploads/2013/12/android-wheel-cities-200x83.png","shasum":"1ad1ea36c8a2a196f40916ffe05e91be3a3579f4","modified":1426772430000},{"_id":"source/uploads/2013/12/android-wheel-cities.png","shasum":"3d28f1a9c9dedb8c838b90dd730336b61d81bb90","modified":1426772430000},{"_id":"source/uploads/2013/12/combined_chart-150x150.png","shasum":"17ad81ed72794e187ec01b7a19babccba76cc0a3","modified":1426772430000},{"_id":"source/uploads/2013/12/combined_chart-300x500.png","shasum":"fde8602aa4fdbf4eea01d117d7102797e4ce7df4","modified":1426772430000},{"_id":"source/uploads/2013/12/combined_chart-90x150.png","shasum":"edefe6f7dbcbbe3449c718a036105c237f883522","modified":1426772430000},{"_id":"source/uploads/2013/12/combined_chart.png","shasum":"19efd6a00e6b5953853634edfb32c562c2fc2f58","modified":1426772430000},{"_id":"source/uploads/2013/12/header_graphic-150x150.png","shasum":"b463877e0dbda4367da8f6e1a8f1d949584bff83","modified":1426772430000},{"_id":"source/uploads/2013/12/header_graphic-200x101.png","shasum":"f6ac41dd6a798a01b3c9a60ccb30f5636c7521aa","modified":1426772430000},{"_id":"source/uploads/2013/12/header_graphic-500x254.png","shasum":"147b5425a0a7b812e11ef94c88af7642defab21e","modified":1426772430000},{"_id":"source/uploads/2013/12/header_graphic.png","shasum":"343bd2aaef9cadbb2d6f89ed46ca1b0607978031","modified":1426772430000},{"_id":"source/uploads/2014/02/device-2014-02-20-213148-150x150.png","shasum":"cbff9708195d53a06551286d35c9d60bd91a02df","modified":1426772430000},{"_id":"source/uploads/2014/02/device-2014-02-20-213148-200x83.png","shasum":"cba8050591dad0bcd2ca34334b175d12cc5b251d","modified":1426772430000},{"_id":"source/uploads/2014/02/device-2014-02-20-213148-500x209.png","shasum":"b555f0172026a4179f53a3b57e6f0ffde8932eaf","modified":1426772430000},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1426772430000},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1426772430000},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1426772430000},{"_id":"themes/landscape/_config.yml","shasum":"55e102461595af671981ab10a69e589d797999e9","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"ab4ac8775ebb81679c9b9080c8f83370330ccbcc","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"4b19c1080c9e6c2acd922a88ed29d183a3b5bc09","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"da9a4ab32efc44c098f317fe64e2335989929b0e","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1426772430000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1426772430000},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1426772430000},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1426772430000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1426772430000},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1426772430000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1426772430000},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1426772430000},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1426772430000},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1426772430000},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1426772430000},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1426772430000},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1426772430000},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1426772430000},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1426772430000},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1426772430000},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1426772430000},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1426772430000},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1426772430000},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1426772430000},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1426772430000},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1426772430000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1426772430000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1426772430000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1426772430000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1426772430000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"b7bdc11effa98c6d88850eff75634e2ea9207c14","modified":1426772430000},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1426772430000},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1426772430000},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1426772430000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1426772430000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1426772430000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1426772430000},{"_id":"themes/landscape/source/css/style.styl","shasum":"278d1458b968a151c27b87643191d2d7a8129511","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1426772430000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1426772430000},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1426772430000},{"_id":"source/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587.png","shasum":"fd23b970ecd66c37f842ad1b2f850bf62c5e54e8","modified":1426772430000},{"_id":"source/uploads/2013/10/sina-weibo-tool-bar-demo.zip","shasum":"756cabf1ad5d9bc9e96ee800d2a9baf689a926fb","modified":1426772430000},{"_id":"source/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67.png","shasum":"40bdc006613454013a5d8149f611cf087c0fea2a","modified":1426772430000},{"_id":"source/uploads/2014/02/device-2014-02-20-213148-1024x429.png","shasum":"1723f3682a4657ba410faa24cfa03b564d1bc608","modified":1426772430000},{"_id":"source/uploads/2014/02/device-2014-02-20-213148.png","shasum":"a6eb8d16771e8e5a61398267b4a95f41f7376c8d","modified":1426772430000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1426772430000},{"_id":"source/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-489x500.png","shasum":"a0c0463964430d62df23ee4e268a433935804ef2","modified":1426772430000},{"_id":"source/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67.png","shasum":"8b6f1acdf39b5c80bcd166aa12507ecc43d1ace8","modified":1426772430000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1426772430000},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1426772430000},{"_id":"public/js/script.js","modified":1426776449221,"shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1426776449225,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1426776449228,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1426776449230,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1426776449230,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1426776449231,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1426776449232,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1426776449232,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1426776449233,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1426776449237,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1426776449240,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1426776449243,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1426776449245,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1426776449247,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1426776449250,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1426776449251,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1426776449699,"shasum":"72c689503ad51bdd97a5f8e68c5961afac8d4a37"},{"_id":"public/css/images/banner.jpg","modified":1426776449883,"shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1426776449886,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1426776449888,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1426776449890,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1426776449893,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/css/fonts/FontAwesome.otf","modified":1426776449895,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/uploads/2014/02/device-2014-02-20-213148.png","modified":1426776449897,"shasum":"a6eb8d16771e8e5a61398267b4a95f41f7376c8d"},{"_id":"public/uploads/2014/02/device-2014-02-20-213148-500x209.png","modified":1426776449898,"shasum":"b555f0172026a4179f53a3b57e6f0ffde8932eaf"},{"_id":"public/uploads/2014/02/device-2014-02-20-213148-200x83.png","modified":1426776449899,"shasum":"cba8050591dad0bcd2ca34334b175d12cc5b251d"},{"_id":"public/uploads/2014/02/device-2014-02-20-213148-150x150.png","modified":1426776449901,"shasum":"cbff9708195d53a06551286d35c9d60bd91a02df"},{"_id":"public/uploads/2014/02/device-2014-02-20-213148-1024x429.png","modified":1426776449902,"shasum":"1723f3682a4657ba410faa24cfa03b564d1bc608"},{"_id":"public/uploads/2013/12/header_graphic.png","modified":1426776449904,"shasum":"343bd2aaef9cadbb2d6f89ed46ca1b0607978031"},{"_id":"public/uploads/2013/12/header_graphic-500x254.png","modified":1426776449906,"shasum":"147b5425a0a7b812e11ef94c88af7642defab21e"},{"_id":"public/uploads/2013/12/header_graphic-200x101.png","modified":1426776449909,"shasum":"f6ac41dd6a798a01b3c9a60ccb30f5636c7521aa"},{"_id":"public/uploads/2013/12/header_graphic-150x150.png","modified":1426776449911,"shasum":"b463877e0dbda4367da8f6e1a8f1d949584bff83"},{"_id":"public/uploads/2013/12/combined_chart.png","modified":1426776449914,"shasum":"19efd6a00e6b5953853634edfb32c562c2fc2f58"},{"_id":"public/uploads/2013/12/combined_chart-90x150.png","modified":1426776449915,"shasum":"edefe6f7dbcbbe3449c718a036105c237f883522"},{"_id":"public/uploads/2013/12/combined_chart-300x500.png","modified":1426776449916,"shasum":"fde8602aa4fdbf4eea01d117d7102797e4ce7df4"},{"_id":"public/uploads/2013/12/combined_chart-150x150.png","modified":1426776449917,"shasum":"17ad81ed72794e187ec01b7a19babccba76cc0a3"},{"_id":"public/uploads/2013/12/android-wheel-cities.png","modified":1426776449919,"shasum":"3d28f1a9c9dedb8c838b90dd730336b61d81bb90"},{"_id":"public/uploads/2013/12/android-wheel-cities-200x83.png","modified":1426776449920,"shasum":"1ad1ea36c8a2a196f40916ffe05e91be3a3579f4"},{"_id":"public/uploads/2013/12/android-wheel-cities-150x131.png","modified":1426776449924,"shasum":"900aef8c92b755b78923ac57de9a27980bad7830"},{"_id":"public/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67.png","modified":1426776449925,"shasum":"8b6f1acdf39b5c80bcd166aa12507ecc43d1ace8"},{"_id":"public/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-489x500.png","modified":1426776449927,"shasum":"a0c0463964430d62df23ee4e268a433935804ef2"},{"_id":"public/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-150x150.png","modified":1426776449929,"shasum":"5e619572c03a683793fb6a22acf5a3fdb03b43d4"},{"_id":"public/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-146x150.png","modified":1426776449930,"shasum":"e90c564624ca7dc1c5ca59243bb9d18ad1ca5788"},{"_id":"public/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67.png","modified":1426776449932,"shasum":"40bdc006613454013a5d8149f611cf087c0fea2a"},{"_id":"public/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-500x236.png","modified":1426776449935,"shasum":"71af330762365182c2a61a0cd49a9eb566fb7491"},{"_id":"public/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-200x94.png","modified":1426776449936,"shasum":"dd38af8f96817ff7557c4e297c8991163ce231d1"},{"_id":"public/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-150x150.png","modified":1426776449937,"shasum":"fc18d1d10ddd58c02a3c08a596e1a87e201034c5"},{"_id":"public/uploads/2013/12/2012110712582439.png","modified":1426776449938,"shasum":"c0d457608cab3e421c61590b05ccc81a2ff9c262"},{"_id":"public/uploads/2013/12/2012110712582439-150x150.png","modified":1426776449941,"shasum":"e73699bc7bed02fa2922f1596e6c8b77b5c71845"},{"_id":"public/uploads/2013/12/2012110712582439-112x150.png","modified":1426776449943,"shasum":"a3e79593b7b8ad452668673f534ee391d2bbf431"},{"_id":"public/uploads/2013/10/sina-weibo-tool-bar-demo.zip","modified":1426776449945,"shasum":"756cabf1ad5d9bc9e96ee800d2a9baf689a926fb"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872.png","modified":1426776449947,"shasum":"fa6b52d90f7d0f9e1ba3779bcba65f5190b2e272"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872-300x170.png","modified":1426776449948,"shasum":"fdc2dc790b93f4c35cc0d1374e85f439786ca516"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872-150x150.png","modified":1426776449949,"shasum":"1cc9b3c75960f104599364a88b3fe291eced6a8b"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871.png","modified":1426776449950,"shasum":"a0090f317b3cf0f54e3700cfbab9f88756624a9a"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871-300x218.png","modified":1426776449952,"shasum":"c47af7683be0aaadf0a75ecd67723bdb638726ec"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871-150x150.png","modified":1426776449953,"shasum":"3787c30dee40e003d5c595bfaac807b823ae574a"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587.png","modified":1426776449954,"shasum":"fd23b970ecd66c37f842ad1b2f850bf62c5e54e8"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-624x325.png","modified":1426776449956,"shasum":"98d3cbb47cce27ac64fcdef5b8cdc3e770fb2e66"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-300x156.png","modified":1426776449957,"shasum":"47028f883a793943aa4abc94a224dfb45b80e6f2"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-150x150.png","modified":1426776449961,"shasum":"cae3ac76430a3c04e0ae7391f8a0eaa10735adf6"},{"_id":"public/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-1024x533.png","modified":1426776449963,"shasum":"6c76f260c123e486668470a3d9b2d8fe6de38e65"},{"_id":"public/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa.png","modified":1426776449964,"shasum":"a7d924656ee5260db75053d5235137beb4d1a0f6"},{"_id":"public/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-624x127.png","modified":1426776449965,"shasum":"91d4fc0660814735acc18233875538b1f035d090"},{"_id":"public/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-300x61.png","modified":1426776449966,"shasum":"ade6b1c78538752807d2caad2fc20a376497c218"},{"_id":"public/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-150x138.png","modified":1426776449968,"shasum":"853a5194b873862a3058886725effc8b0b027983"},{"_id":"public/CNAME","modified":1426776449971,"shasum":"752c372bab78ab129d5cf4709d1142b472ec2dd0"},{"_id":"public/404.html","modified":1426776450039,"shasum":"e410e9ff85affee2dfabcf7448aac916aa42fd6e"},{"_id":"public/baidu_verify_8kkhILkime.html","modified":1426776450043,"shasum":"6412591b744dd94bfd01ce6729a8c7a3e2568a3f"},{"_id":"public/about/index.html","modified":1426776450048,"shasum":"059539b257cd2bd7d97515c3959c470751b3089c"},{"_id":"public/2015/03/19/android-process-application-init-databases-problem.html","modified":1426776450059,"shasum":"5286f4bbe6c1a8118fe672f2b9b83cc377e17ee1"},{"_id":"public/2015/03/10/github-page-with-hexo.html","modified":1426776450068,"shasum":"38c774189458b531e09f1e53b187dfeed0c4fe72"},{"_id":"public/2015/01/12/android-gradle-plugin-translate-done.html","modified":1426776450073,"shasum":"0ac5c9e28a826ccceeeb504b6425bfd67eebb88d"},{"_id":"public/2014/07/13/effective-programming-more-than-writing-code.html","modified":1426776450079,"shasum":"8703e8fde5c06a16ddfeb1eb41c602170797a8da"},{"_id":"public/2014/03/22/android-avd-not-launcher.html","modified":1426776450084,"shasum":"c1aac730df9dbdd621bf78c7938e2a61592496c4"},{"_id":"public/2014/02/20/android-overlay-guide.html","modified":1426776450091,"shasum":"7745c1d9b8469ad6d9f5f79daa498b7311021198"},{"_id":"public/2013/12/27/linux-php-server-with-nginx.html","modified":1426776450109,"shasum":"18ebadece0011a9edfd4cc164eb35851218e3aeb"},{"_id":"public/2013/12/14/open-source-project-in-android-app.html","modified":1426776450116,"shasum":"dd760096bdcfa558df4cf1d09506a2e06ca9d7b1"},{"_id":"public/2013/11/21/android-httpclitent-session-keep.html","modified":1426776450121,"shasum":"28f04569d98137c3df474d32f826651d9f34346c"},{"_id":"public/2013/11/07/goagent-403-not-have-permiss.html","modified":1426776450127,"shasum":"c627a2e4808522b207e1ee4db0f2243d07f7adb7"},{"_id":"public/2013/11/07/unsupportedoperationexception-gles20canvas-clippath.html","modified":1426776450133,"shasum":"721fb199964ce775eea553a5ce1878a71b4cde91"},{"_id":"public/2013/11/02/android-4-4-alarm-manager-changed.html","modified":1426776450138,"shasum":"e4a4d8590a840a5ac99f0ec48fde77b43ece15d8"},{"_id":"public/2013/10/11/android-bool-preferences-storage-optimization.html","modified":1426776450146,"shasum":"4c63ca09f2ccb6db34e44f7037b98d135bb8c6ff"},{"_id":"public/2013/10/07/ubuntu-sougou-pinyin-input-method.html","modified":1426776450151,"shasum":"32dc2166bff97645a243e3550ea91c8792ce3f52"},{"_id":"public/2013/10/06/resolve-android-sdk-manager-can-not-update.html","modified":1426776450163,"shasum":"76c45f92cedfbf7b275df7eec94b5933a839010b"},{"_id":"public/2013/03/29/ubuntu-saned-disabled.html","modified":1426776450168,"shasum":"e52e8e6dad8fb6e70dc8ef133fd61c45169a4af3"},{"_id":"public/2013/02/22/android-holo-theme-cts.html","modified":1426776450174,"shasum":"1e11cc180fd1cfbfa0b31e10cee75d09435edd5b"},{"_id":"public/2013/01/28/android-layout-height-fail.html","modified":1426776450185,"shasum":"67a827e110e34ae26ffa9215657c1482c07b5fed"},{"_id":"public/2013/01/05/android-viewgroup-setdescendantfocusability.html","modified":1426776450190,"shasum":"33e62dae5df0ffe6e7f2e399fa07ee4f973b5548"},{"_id":"public/2011/12/10/android-float-widget.html","modified":1426776450198,"shasum":"74efb9de31a6e007812646d387cebc8ef3582e9b"},{"_id":"public/2011/11/15/android-4-0-api-arrange.html","modified":1426776450203,"shasum":"043d5319ad3c91486641eb48449da99020474833"},{"_id":"public/2011/11/15/download-android-4-0-sources.html","modified":1426776450208,"shasum":"6c6c450f7ce3900be26a85900b2f48245da6ddba"},{"_id":"public/2011/11/11/android-asset-studio-integration.html","modified":1426776450214,"shasum":"56358560a0e214f7dc60637837b4df0d831e2778"},{"_id":"public/2011/10/22/adsl-and-vpn-config-for-ubuntu.html","modified":1426776450220,"shasum":"0dcb2c2bc51f6e2c9916dcfe7abd6db41c1c1400"},{"_id":"public/2011/07/19/android-send-email-intro.html","modified":1426776450228,"shasum":"b92a5e00d088ec3ffcaa6d7bd387863c22cffd5b"},{"_id":"public/2011/07/17/practices-of-an-agile-developer.html","modified":1426776450233,"shasum":"3eb30728d856d90593d181163d674636ceb5c4ed"},{"_id":"public/2011/05/21/android-thread-notice-item.html","modified":1426776450238,"shasum":"d91eb46b71e948ffc61b8ccd29e12e78969383ab"},{"_id":"public/2011/03/29/android-intents-and-intent-filters-three.html","modified":1426776450247,"shasum":"44d3adbb103440aacfb921035d328ab1fd40a079"},{"_id":"public/2011/03/28/do-you-know-android-resource.html","modified":1426776450252,"shasum":"d0a69ac4535c04002f9839af403017f9c7d38f2b"},{"_id":"public/2011/03/17/android-intents-and-intent-filters-two.html","modified":1426776450264,"shasum":"81e937c0db5825802711b7f675ea59c21cf98b78"},{"_id":"public/2011/03/14/android-intents-and-intent-filters-one.html","modified":1426776450272,"shasum":"f2b3ff358827a10fc6125ef7f37b487c1e2efc88"},{"_id":"public/2011/03/08/android-bottom-tool-bar-demo.html","modified":1426776450277,"shasum":"d959aa8d2de80d59916de9f4fcaaee091eac7f45"},{"_id":"public/2011/03/02/sina-weibo-tool-bar-tabhost.html","modified":1426776450285,"shasum":"77de92ced182eae90562f03b3eb3a879e046dc08"},{"_id":"public/2011/02/22/writing-efficient-android-code.html","modified":1426776450292,"shasum":"396740e58b88d03a9fadb8a7497b98fafb3296bd"},{"_id":"public/2011/02/15/android-icon-with-number.html","modified":1426776450299,"shasum":"9b316fd68e0dc69db307230c53de496d628e189e"},{"_id":"public/2011/01/20/android-gridview-tutorial.html","modified":1426776450306,"shasum":"a840e78b784432ae3d795a3e980de6d7cf93cdb2"},{"_id":"public/2011/01/10/android-sources-directory-structure.html","modified":1426776450314,"shasum":"ef59a13fab41bce348e7666540018175b837dd20"},{"_id":"public/2011/01/08/android-listview-tutorials.html","modified":1426776450322,"shasum":"729a35577d46e5ef1f643407edf83d9e4bf5319b"},{"_id":"public/2010/11/29/android-edittext-tutorials.html","modified":1426776450336,"shasum":"b722dc27aa178c80c1ef625e3fb3a60b2191b445"},{"_id":"public/2010/11/24/android-textview-tutorials.html","modified":1426776450343,"shasum":"1fb7ccf3f60c66adb66821b4ecbcf85fd5c1a032"},{"_id":"public/2010/11/17/android-activity-statement-cycle-tutorials.html","modified":1426776450351,"shasum":"be917d9f80022c226121d936a85538f821c68cbc"},{"_id":"public/2010/11/16/android-project-directory-structure.html","modified":1426776450357,"shasum":"4f133e08b933bc39e90d624f50eec049bfebd503"},{"_id":"public/2010/11/13/android-helloworld.html","modified":1426776450364,"shasum":"8c65283a5521c4681f172490344bce14d41e6bf5"},{"_id":"public/2010/11/12/android-setup-config-for-linux.html","modified":1426776450370,"shasum":"bb9120663b22df5633801d9807268d443c0e3a3f"},{"_id":"public/2010/11/11/setup-android-for-window.html","modified":1426776450376,"shasum":"965ab4b3136a14ca6fc038c4db8a24efc2464ec2"},{"_id":"public/categories/Android/index.html","modified":1426776450389,"shasum":"02a0fc864848314eebbaaee95e3b77c349524d0f"},{"_id":"public/categories/Android/page/2/index.html","modified":1426776450411,"shasum":"5e23388d80b2fae0eceb5249686a6ba1d953d4b5"},{"_id":"public/categories/Android/page/3/index.html","modified":1426776450431,"shasum":"87411a90d2ec10326781ff7fa2ea6fa24b8a82dd"},{"_id":"public/categories/Android/page/4/index.html","modified":1426776450445,"shasum":"c7ef8f7235bac465d653bfd19c79e3ab4a223922"},{"_id":"public/categories/Hexo/index.html","modified":1426776450451,"shasum":"e77f64d10fcfbdab62ad719cdd2e1ddfd361bc00"},{"_id":"public/categories/软件开发/index.html","modified":1426776450459,"shasum":"c6751ae0da159b313e3fd6f7469ea5198c1310cb"},{"_id":"public/categories/Linux/index.html","modified":1426776450470,"shasum":"51d44a9a8a27535d1821f4006223aa26491b5866"},{"_id":"public/atom.xml","modified":1426776450473,"shasum":"4cc9e771781e94327cdb8f2041efafdba317b7ac"},{"_id":"public/archives/index.html","modified":1426776450503,"shasum":"fcc1bd7c4a7d7c05aee4d7bc555a38b3e3e26ed3"},{"_id":"public/archives/page/2/index.html","modified":1426776450519,"shasum":"4cc231a9d992bce35605ac0c3cbf0d39d79ce259"},{"_id":"public/archives/page/3/index.html","modified":1426776450535,"shasum":"3ffa3f2678a9571148a43f335739ef6657448135"},{"_id":"public/archives/page/4/index.html","modified":1426776450556,"shasum":"e136f6f37cfc18c7156717eb021aa090dec5f6d4"},{"_id":"public/archives/page/5/index.html","modified":1426776450566,"shasum":"a4b3c0a0e749835a77d1ee5a06a38537e7b6823d"},{"_id":"public/archives/2010/index.html","modified":1426776450591,"shasum":"5d98f9bdcc639e503d6e7f00d307bd4aba177698"},{"_id":"public/archives/2010/11/index.html","modified":1426776450625,"shasum":"1fe2ca15bfbf89a878a8d655a9517408dc5aa9f2"},{"_id":"public/archives/2011/index.html","modified":1426776450645,"shasum":"3bbc50d7068cf5a49e9f630967caa111af48f9ea"},{"_id":"public/archives/2011/page/2/index.html","modified":1426776450686,"shasum":"f85d3bbdd1e83effc5ae6e58370e26db750c0d68"},{"_id":"public/archives/2011/01/index.html","modified":1426776450728,"shasum":"37a200815388e82a0077c657be1b0bf8426f721f"},{"_id":"public/archives/2011/02/index.html","modified":1426776450734,"shasum":"69ec95dad9abfe45b69b0f54718a8b46cdb925f2"},{"_id":"public/archives/2011/03/index.html","modified":1426776450748,"shasum":"bda9f1f0ded669fe367787538020ececbf18fa2d"},{"_id":"public/archives/2011/05/index.html","modified":1426776450752,"shasum":"a05dde82f5ba6b80d4855e5aa4efc8abbb495288"},{"_id":"public/archives/2011/07/index.html","modified":1426776450769,"shasum":"8fcd3c05b822fc1c3fbd8328c35e17dce80afc27"},{"_id":"public/archives/2011/10/index.html","modified":1426776450775,"shasum":"7b54b16a2a2c762d3631c39618c21b69e90e371f"},{"_id":"public/archives/2011/11/index.html","modified":1426776450790,"shasum":"4091a6395e61e53789d78de2135ccf820ef5f7fc"},{"_id":"public/archives/2011/12/index.html","modified":1426776450794,"shasum":"0f080c79e1905c678c05841af1e89a40160d40bc"},{"_id":"public/archives/2013/index.html","modified":1426776450807,"shasum":"9a46e4452a524e4c465d8ecfde10532fdf31d170"},{"_id":"public/archives/2013/page/2/index.html","modified":1426776450811,"shasum":"44be75a8cf7fc755e3efaa4f1d490fbca65cf99a"},{"_id":"public/archives/2013/01/index.html","modified":1426776450816,"shasum":"dbfe702e38abb43dd925a9fc44558f4373e98c6a"},{"_id":"public/archives/2013/02/index.html","modified":1426776450819,"shasum":"5ab29c1c3b2e196e93ed2b4f10e44e61bcf5bee8"},{"_id":"public/archives/2013/03/index.html","modified":1426776450822,"shasum":"4eb14093d4782cbb094b96f7d2c47930791fa960"},{"_id":"public/archives/2013/10/index.html","modified":1426776450827,"shasum":"01f7b9585a07619ba18befd79631d767fe4f1165"},{"_id":"public/archives/2013/11/index.html","modified":1426776450841,"shasum":"b7e2d6d23da2ed5f06f24cd1b55b191205e047ed"},{"_id":"public/archives/2013/12/index.html","modified":1426776450846,"shasum":"7a999b9f460c220b67fc59db63b58714b225869f"},{"_id":"public/archives/2014/index.html","modified":1426776450852,"shasum":"feafaf542efae7bb5aa6c0d2de9db06d617d0049"},{"_id":"public/archives/2014/02/index.html","modified":1426776450856,"shasum":"9f3346b5e9d943d49a041dda75755339c11e6e4d"},{"_id":"public/archives/2014/03/index.html","modified":1426776450859,"shasum":"a2c4e9953b1ee378133c4ee54d7e2296ef6f9de7"},{"_id":"public/archives/2014/07/index.html","modified":1426776450862,"shasum":"f239a16cf843c7b63866c7213ee8138191fa6a23"},{"_id":"public/archives/2015/index.html","modified":1426776450868,"shasum":"6e3a5f28eddbd484371ff1e9443aae2e05e6c695"},{"_id":"public/archives/2015/01/index.html","modified":1426776450871,"shasum":"5108fc35a9e213112f8b0f46c2beed5d3e4c1ede"},{"_id":"public/archives/2015/03/index.html","modified":1426776450875,"shasum":"932b7fb419359f3713eeb9c40e8b2d5954d7aaef"},{"_id":"public/index.html","modified":1426776450905,"shasum":"dffd8f7ae61e3a0800ddec9acb1d97a9ce61c141"},{"_id":"public/page/2/index.html","modified":1426776450925,"shasum":"9a6f99cfd8ce4a93744f38d5d10c80b7221be5c9"},{"_id":"public/page/3/index.html","modified":1426776450961,"shasum":"8fd82dd531063f908e7ffd96f15281be3370be26"},{"_id":"public/page/4/index.html","modified":1426776450990,"shasum":"520a2567a54dd2f0e95c7557f5f77d32ec8111d2"},{"_id":"public/page/5/index.html","modified":1426776451002,"shasum":"e826b3b42359fdf896a720ef92b4aa97928a7bb7"},{"_id":"public/sitemap.xml","modified":1426776451022,"shasum":"69d08d496731c402524ac3e54cda35b81a7893dc"},{"_id":"public/tags/Android/index.html","modified":1426776451037,"shasum":"9f2870fa835f8027ee2f3c960af4895a5ed229c0"},{"_id":"public/tags/Android/page/2/index.html","modified":1426776451078,"shasum":"2bea3c949d888c7f0fc4edc9b869ab76079704be"},{"_id":"public/tags/Android/page/3/index.html","modified":1426776451089,"shasum":"5d282b35e1d7c66e2241578da8cb87cead3d4461"},{"_id":"public/tags/Android/page/4/index.html","modified":1426776451099,"shasum":"28d444aff641074b5372608b8a700e809b6bc6ac"},{"_id":"public/tags/数据库/index.html","modified":1426776451102,"shasum":"2c16b6016cf3379e8adf2d3eb5019a1964f38580"},{"_id":"public/tags/Hexo/index.html","modified":1426776451106,"shasum":"dc6f59cd0027cce5bb25bc3670fd3bee97470036"},{"_id":"public/tags/Github/index.html","modified":1426776451110,"shasum":"d0176c0df09f60a3c9a622f966f8dd864ae056c3"},{"_id":"public/tags/gradle/index.html","modified":1426776451113,"shasum":"7c4970902d1d97780403e1d94c08b51398dc5b1c"},{"_id":"public/tags/翻译/index.html","modified":1426776451116,"shasum":"18626fe31341d592e081985a421d8a93061a9ea4"},{"_id":"public/tags/软件开发/index.html","modified":1426776451120,"shasum":"296bea8be9eb7b030f65a068181d5cdcb652a56c"},{"_id":"public/tags/Apache/index.html","modified":1426776451124,"shasum":"d9d689b90d8d39c9bfcd44ff599c6602acf04af9"},{"_id":"public/tags/Linux/index.html","modified":1426776451140,"shasum":"f9adce09fad835d589fd87f8fb94a7f5a837a7bf"},{"_id":"public/tags/Nginx/index.html","modified":1426776451145,"shasum":"8b250f404d5226cb5190e9b60cb8504057f5cedc"},{"_id":"public/tags/PHP/index.html","modified":1426776451149,"shasum":"564a1c28f63e504a0eb3ef62da91b824128b7306"},{"_id":"public/tags/Ubuntu/index.html","modified":1426776451161,"shasum":"0bdc5f2cef27224f46fcec1345da94f62496e4f2"},{"_id":"public/tags/开源/index.html","modified":1426776451167,"shasum":"0d9caceeefd4fb926a1d385677caa30e2a111e2b"},{"_id":"public/tags/Http/index.html","modified":1426776451172,"shasum":"bf5fc6406e539e34a3f36ab7bf6b6c04a3157a7f"},{"_id":"public/tags/HttpClitent/index.html","modified":1426776451177,"shasum":"25ddc3a787af6d26f90bf571db0ce13e6121f098"},{"_id":"public/tags/API/index.html","modified":1426776451186,"shasum":"f6d1e4cf69a6900cba7b5970629844b864745701"},{"_id":"public/tags/Widget/index.html","modified":1426776451199,"shasum":"d4bea16b8f787a6038c0ac18f16849028a428324"},{"_id":"public/tags/goagent/index.html","modified":1426776451204,"shasum":"a94f4b891a783980ffd5a31ca3672bbac6ccfa08"},{"_id":"public/tags/代理/index.html","modified":1426776451209,"shasum":"d090d2a78eefb078d3a172238e6fed3ccb741bc6"},{"_id":"public/tags/翻墙/index.html","modified":1426776451214,"shasum":"463987a043e8fb81cd7ca43378b929401a764d7d"},{"_id":"public/tags/Email/index.html","modified":1426776451219,"shasum":"4501653e9051af6216186a91d65fb4cd6eaf5858"},{"_id":"public/tags/敏捷/index.html","modified":1426776451232,"shasum":"5b87366ad26350db7c7b02e6636ecd909184ed48"},{"_id":"public/tags/软件工程/index.html","modified":1426776451237,"shasum":"6b09b498f3649c83d32d2423af0670cc80ea959a"},{"_id":"public/tags/Intent/index.html","modified":1426776451245,"shasum":"5c5d5b79c6c24e9f91c4a2304601f1e18f23ec9d"}],"Category":[{"name":"Android","_id":"ci7g9uvjg0004z1n1kiwzxvz0"},{"name":"Hexo","_id":"ci7g9uvjk000bz1n12jh4p5v9"},{"name":"软件开发","_id":"ci7g9uvjq000pz1n1lku24j6f"},{"name":"Linux","_id":"ci7g9uvjx0010z1n1y06urbxo"}],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>您访问的页面不存在</title>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>您访问的页面不存在</title>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2015-03-19T13:40:30.000Z","updated":"2015-03-19T13:40:30.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ci7g9uviz0000z1n120wrjmps"},{"_content":"8kkhILkime","source":"baidu_verify_8kkhILkime.html","raw":"8kkhILkime","date":"2015-03-19T13:40:30.000Z","updated":"2015-03-19T13:40:30.000Z","path":"baidu_verify_8kkhILkime.html","title":"","comments":1,"layout":"page","_id":"ci7g9uvj90001z1n1sqdk2oli"},{"title":"关于本站","date":"2015-03-09T16:13:27.000Z","_content":"作为一名码农，写的东西基本上都是技术类的，主要是Android以及Java方面的，当然其他方面也会涉及一些，有时候也会叨叨下互联网。\n\n这个博客是我一直用的啦，以后写博客也会都发布在这个网站上，以前发布在一些网站上的博客我也都整理过来了，按日期归档，比较容易看。\n\n我嘛，没事捣鼓捣鼓东西，看看书什么的，目前在深圳，就职于随手网。\n","source":"about/index.md","raw":"title: \"关于本站\"\ndate: 2015-03-10 00:13:27\n---\n作为一名码农，写的东西基本上都是技术类的，主要是Android以及Java方面的，当然其他方面也会涉及一些，有时候也会叨叨下互联网。\n\n这个博客是我一直用的啦，以后写博客也会都发布在这个网站上，以前发布在一些网站上的博客我也都整理过来了，按日期归档，比较容易看。\n\n我嘛，没事捣鼓捣鼓东西，看看书什么的，目前在深圳，就职于随手网。\n","updated":"2015-03-19T13:40:30.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ci7g9uvjb0002z1n1ne0zf759"}],"Post":[{"title":"Android多进程的数据库访问问题","date":"2015-03-19T13:58:45.000Z","_content":"\n在Android开发中，我们可能会使用单独的进程来做一些事情，比如推送服务，心跳服务等，这些不需要主应用启动，只需要一个独立的进程即可。这时候我们一般都会采用启动一个后台Service，这个Service运行在一个独立的进程中，比如在Androidmainfest.xml中配置Service的android:process=\":push\"指定该Service运行在:push进程中。\n\n一般情况下这样做是没有任何问题的，但是如果你在你的Application的onCreate方法里有对数据库的操作，或者该Service里有对数据库的操作，就会有可能会有两个进程同时操作一个数据库的情况，一个是你的主应用的进程，进程名为你的包名例如org.flysnow;一个是你的Service所在的进程，进程名为你的包名+\":push\",即org.flysnow:push。这两个进程可能在同一时间访问同一个数据，同一个配置文件等。这就可能造成资源的竞争访问，造成的问题就不可预料了，比如数据库损坏，数据丢失等。\n\n多进程其实和多线程一样，并发访问的时候产生的问题很难预料，在多线程的时候我们有锁等机制控制资源的访问，但是在多进程中比较难，虽然有文件锁、排队等机制，但是在Android里很难实现，毕竟在Android里一个进程就是一个VM虚拟机，底层的东西控制不了，Java层又没有办法控制，所以在多进程中一定不要有并发增删改文件的操作。\n\n解决问题的核心就是不并发访问同一个文件，多线程时就使用Lock机制；多进程的时候就避免进行数据库的访问，比如只做一些心跳、激活、消息抓取等操作，涉及到把消息存储到数据库，访问配置文件等操作还是调用主进程进程操作。还一个要注意的就是Application的oncreate方法里要避免多进程访问同一文件，因为没一个进程初始化都会执行该方法，可以在一些进程初始化的时候不需要文件操作的时候不要进行文件操作，比如在onCreate里获取当前的进程，不等于包名的就不进行文件的访问操作，获取进程可以使用android.os.Process.myUid()方法。","source":"_posts/2015-03-19-android-process-application-init-databases-problem.md","raw":"title: \"Android多进程的数据库访问问题\"\ndate: 2015-03-19 21:58:45\ntags:\n- Android\n- 数据库\ncategories:\n- Android\n---\n\n在Android开发中，我们可能会使用单独的进程来做一些事情，比如推送服务，心跳服务等，这些不需要主应用启动，只需要一个独立的进程即可。这时候我们一般都会采用启动一个后台Service，这个Service运行在一个独立的进程中，比如在Androidmainfest.xml中配置Service的android:process=\":push\"指定该Service运行在:push进程中。\n\n一般情况下这样做是没有任何问题的，但是如果你在你的Application的onCreate方法里有对数据库的操作，或者该Service里有对数据库的操作，就会有可能会有两个进程同时操作一个数据库的情况，一个是你的主应用的进程，进程名为你的包名例如org.flysnow;一个是你的Service所在的进程，进程名为你的包名+\":push\",即org.flysnow:push。这两个进程可能在同一时间访问同一个数据，同一个配置文件等。这就可能造成资源的竞争访问，造成的问题就不可预料了，比如数据库损坏，数据丢失等。\n\n多进程其实和多线程一样，并发访问的时候产生的问题很难预料，在多线程的时候我们有锁等机制控制资源的访问，但是在多进程中比较难，虽然有文件锁、排队等机制，但是在Android里很难实现，毕竟在Android里一个进程就是一个VM虚拟机，底层的东西控制不了，Java层又没有办法控制，所以在多进程中一定不要有并发增删改文件的操作。\n\n解决问题的核心就是不并发访问同一个文件，多线程时就使用Lock机制；多进程的时候就避免进行数据库的访问，比如只做一些心跳、激活、消息抓取等操作，涉及到把消息存储到数据库，访问配置文件等操作还是调用主进程进程操作。还一个要注意的就是Application的oncreate方法里要避免多进程访问同一文件，因为没一个进程初始化都会执行该方法，可以在一些进程初始化的时候不需要文件操作的时候不要进行文件操作，比如在onCreate里获取当前的进程，不等于包名的就不进行文件的访问操作，获取进程可以使用android.os.Process.myUid()方法。","slug":"android-process-application-init-databases-problem","published":1,"updated":"2015-03-19T14:45:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci7g9uvjd0003z1n1afzyl632"},{"title":"使用Hexo在Github上搭建自己的博客","date":"2015-03-10T14:30:04.000Z","_content":"\n以前的博客是使用Jekyll托管在github上，后来用着越来越不方便，比如没有自动生成post，不能一键部署，文件结构和配置也是比较繁琐，更重要的是有时候用markdown写一篇文章，生成的静态文件很乱，应该是有些字符解析的问题。现在下决心换成了hexo\n\n# Nodejs安装\n\n因为hexo是基于nodejs的应用，所以要先安装nodejs才可以。我这里以ubuntu为例，因为我自己一直在使用ubuntu。使用如下命令即可：\n\n```bash\nsudo apt-get install nodejs\nsudo apt-get install npm\n```\n\n# Hexo安装\n\n[Hexo](https://github.com/hexojs/hexo/ \"Hexo\") 是一个功能强大的静态网站生成系统，快速、简洁、高效。Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。可以一键部署到github，还有丰富的插件和主题,还支持热部署哦。执行如下命令进行安装。\n\n```bash\nsudo npm install hexo-cli -g\n```\n\n# 快速开始\n\n安装Hexo安成后，使用如下命令快速新建一个博客系统，然后运行它\n\n```bash\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n\n如果npm安装失败，请使用sudo安装。运行成功后，访问http://0.0.0.0:4000/就可以看到博客的样子的，对就是我现在的博客这个样子，o(∩∩)o...哈哈。\n\n现在我们来看看Hexo 生成博客的目录结构\n\n    .\n    ├── _config.yml\n    ├── db.json\n    ├── node_modules\n    ├── package.json\n    ├── public\n    ├── scaffolds\n    ├── source\n    └── themes\n    \n其中_config.yml是配置站点的文件，public是hexo生成的静态站点文件夹，scaffolds是模板文件夹，source是存在用户资源的文件夹，themes是主题文件夹。\n\n# 站点配置\n\n找到title，subtitle，author参数配置，分别配置站点的标题、副标题和作者,比如我这里是：\n\n    title: 飞雪无情的博客\n    subtitle: 专注于Android、Java、移动互联网、项目管理、软件架构\n    description:\n    author: 飞雪无情\n    language: zh-CN\n    \n然后配置站点的url和permalink，这两个分别是你的站点的url host地址以及文章的永久连接，我这里是：\n\n    url: http://www.flysnow.org\n    root: /\n    permalink: :year/:month/:day/:title.html\n    permalink_defaults:\n    \npermalink 我配置的是年月日以及title，后缀是html，便于搜索收录。permalink详情参见： [http://hexo.io/zh-cn/docs/permalinks.html](http://hexo.io/zh-cn/docs/permalinks.html \"\")\n\n# 新增一篇文章\n\n使用如下命令即可新增一篇md格式的文章\n\n```bash\nhexo new 'github-page-with-hexo'\n```\n\n然后就会在sources/_posts生成一篇文件名为github-page-with-hexo.md的markdown文件。编辑该文件就可以写博客了。这里有一些Front-matter需要介绍，可以配置文章使用的模板、所属的分类和tag等。\n\nFront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说：\n\n    title: \"使用Hexo在Github上搭建自己的博客\"\n    date: 2015-03-10 22:30:04\n    tags:\n    - Hexo\n    - Github\n    categories:\n    - Hexo\n    ---\n    \n请注意，目前的categories只能有一个一级分类，如果填写多个，第二个会被解析为二级分类，以及类推。tags可以允许有多个。更多关于Front-matter请参考 [http://hexo.io/zh-cn/docs/front-matter.html](http://hexo.io/zh-cn/docs/front-matter.html \"\")\n\n# 发布到github page\n\n首先你已经创建好了你的github page对应的git库，没有创建的可以google相关博客。然后新建一个hexo分支，存放你现在hexo的所有文件。然后执行如下命令清理并生成发布的静态站点文件。\n\n```bash\nhexo clean\nhexo generate\n```\n\n然后把生成的public目录下的文件放到你的master分支下即可。git commit后把这两个分支推送到你的github上。git库结构可以参见我的github page库 [https://github.com/rujews/rujews.github.io](https://github.com/rujews/rujews.github.io \"https://github.com/rujews/rujews.github.io\")\n\n# 最后\n\n然后等个几分钟，访问你的域名就可以看到你的网站了。如[http://www.flysnow.org/](http://www.flysnow.org/ \"http://www.flysnow.org/\") 。关于更多的Hexo请参考官方文档，以后有时间也会介绍 [http://hexo.io/zh-cn/docs/](http://hexo.io/zh-cn/docs/)","source":"_posts/2015-03-10-github-page-with-hexo.md","raw":"title: \"使用Hexo在Github上搭建自己的博客\"\ndate: 2015-03-10 22:30:04\ntags:\n- Hexo\n- Github\ncategories:\n- Hexo\n---\n\n以前的博客是使用Jekyll托管在github上，后来用着越来越不方便，比如没有自动生成post，不能一键部署，文件结构和配置也是比较繁琐，更重要的是有时候用markdown写一篇文章，生成的静态文件很乱，应该是有些字符解析的问题。现在下决心换成了hexo\n\n# Nodejs安装\n\n因为hexo是基于nodejs的应用，所以要先安装nodejs才可以。我这里以ubuntu为例，因为我自己一直在使用ubuntu。使用如下命令即可：\n\n```bash\nsudo apt-get install nodejs\nsudo apt-get install npm\n```\n\n# Hexo安装\n\n[Hexo](https://github.com/hexojs/hexo/ \"Hexo\") 是一个功能强大的静态网站生成系统，快速、简洁、高效。Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。可以一键部署到github，还有丰富的插件和主题,还支持热部署哦。执行如下命令进行安装。\n\n```bash\nsudo npm install hexo-cli -g\n```\n\n# 快速开始\n\n安装Hexo安成后，使用如下命令快速新建一个博客系统，然后运行它\n\n```bash\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n\n如果npm安装失败，请使用sudo安装。运行成功后，访问http://0.0.0.0:4000/就可以看到博客的样子的，对就是我现在的博客这个样子，o(∩∩)o...哈哈。\n\n现在我们来看看Hexo 生成博客的目录结构\n\n    .\n    ├── _config.yml\n    ├── db.json\n    ├── node_modules\n    ├── package.json\n    ├── public\n    ├── scaffolds\n    ├── source\n    └── themes\n    \n其中_config.yml是配置站点的文件，public是hexo生成的静态站点文件夹，scaffolds是模板文件夹，source是存在用户资源的文件夹，themes是主题文件夹。\n\n# 站点配置\n\n找到title，subtitle，author参数配置，分别配置站点的标题、副标题和作者,比如我这里是：\n\n    title: 飞雪无情的博客\n    subtitle: 专注于Android、Java、移动互联网、项目管理、软件架构\n    description:\n    author: 飞雪无情\n    language: zh-CN\n    \n然后配置站点的url和permalink，这两个分别是你的站点的url host地址以及文章的永久连接，我这里是：\n\n    url: http://www.flysnow.org\n    root: /\n    permalink: :year/:month/:day/:title.html\n    permalink_defaults:\n    \npermalink 我配置的是年月日以及title，后缀是html，便于搜索收录。permalink详情参见： [http://hexo.io/zh-cn/docs/permalinks.html](http://hexo.io/zh-cn/docs/permalinks.html \"\")\n\n# 新增一篇文章\n\n使用如下命令即可新增一篇md格式的文章\n\n```bash\nhexo new 'github-page-with-hexo'\n```\n\n然后就会在sources/_posts生成一篇文件名为github-page-with-hexo.md的markdown文件。编辑该文件就可以写博客了。这里有一些Front-matter需要介绍，可以配置文章使用的模板、所属的分类和tag等。\n\nFront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说：\n\n    title: \"使用Hexo在Github上搭建自己的博客\"\n    date: 2015-03-10 22:30:04\n    tags:\n    - Hexo\n    - Github\n    categories:\n    - Hexo\n    ---\n    \n请注意，目前的categories只能有一个一级分类，如果填写多个，第二个会被解析为二级分类，以及类推。tags可以允许有多个。更多关于Front-matter请参考 [http://hexo.io/zh-cn/docs/front-matter.html](http://hexo.io/zh-cn/docs/front-matter.html \"\")\n\n# 发布到github page\n\n首先你已经创建好了你的github page对应的git库，没有创建的可以google相关博客。然后新建一个hexo分支，存放你现在hexo的所有文件。然后执行如下命令清理并生成发布的静态站点文件。\n\n```bash\nhexo clean\nhexo generate\n```\n\n然后把生成的public目录下的文件放到你的master分支下即可。git commit后把这两个分支推送到你的github上。git库结构可以参见我的github page库 [https://github.com/rujews/rujews.github.io](https://github.com/rujews/rujews.github.io \"https://github.com/rujews/rujews.github.io\")\n\n# 最后\n\n然后等个几分钟，访问你的域名就可以看到你的网站了。如[http://www.flysnow.org/](http://www.flysnow.org/ \"http://www.flysnow.org/\") 。关于更多的Hexo请参考官方文档，以后有时间也会介绍 [http://hexo.io/zh-cn/docs/](http://hexo.io/zh-cn/docs/)","slug":"github-page-with-hexo","published":1,"updated":"2015-03-19T13:40:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci7g9uvjj000az1n1j5aahwgg"},{"author":"飞雪无情","comments":1,"date":"2015-01-12T07:33:16.000Z","layout":"post","title":"Android Gradle插件中文指南","_content":"\n最近想把Android项目从Eclipse迁到Android Studio上。原因呢，Eclipse太慢了，而且经常卡死，Android Studio由于Android的大力支持，已经有很多Eclipse没有的功能，比如AAR包，并且可以使用Gradle这个强大灵活的构建工具。\n\n要迁入到Android Studio上，Gradle打包要搞懂，最近看了下Android Gradle插件指南，并且抽时间做了翻译，托管在github上。大家访问\n\n[https://github.com/rujews/android-tech-docs/blob/master/new-build-system/user-guide/README.md](https://github.com/rujews/android-tech-docs/blob/master/new-build-system/user-guide/README.md)\n\n随时查看，翻译错误的地方也请多指正。\n","source":"_posts/2015-01-12-android-gradle-plugin-translate-done.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2015-01-12 23:33:16+08:00\nlayout: post\ntitle: Android Gradle插件中文指南\ncategory : \n- Android\ntags : \n- Android\n- gradle\n- 翻译\n---\n\n最近想把Android项目从Eclipse迁到Android Studio上。原因呢，Eclipse太慢了，而且经常卡死，Android Studio由于Android的大力支持，已经有很多Eclipse没有的功能，比如AAR包，并且可以使用Gradle这个强大灵活的构建工具。\n\n要迁入到Android Studio上，Gradle打包要搞懂，最近看了下Android Gradle插件指南，并且抽时间做了翻译，托管在github上。大家访问\n\n[https://github.com/rujews/android-tech-docs/blob/master/new-build-system/user-guide/README.md](https://github.com/rujews/android-tech-docs/blob/master/new-build-system/user-guide/README.md)\n\n随时查看，翻译错误的地方也请多指正。\n","slug":"android-gradle-plugin-translate-done","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvjm000hz1n1jliwrvqp"},{"author":"飞雪无情","comments":1,"date":"2014-07-13T14:33:15.000Z","layout":"post","title":"高效能程序员的修炼","_content":"\n## 入门须知\n\n* 你想成为一个程序员\n* 程序员的八种境界\n* 如何培养写作习惯\n\n## 把一堆烂事搞定的艺术\n\n* 学海无边\n* 磨刀不误砍柴工\n* 一路向前冲\n* 关于多任务的神话\n\n## 高效编程之原则\n\n* 第一条法则：永远都是你的错\n* 大道至简\n* 避免写注释\n* 学会读源代码\n* 像橡皮鸭求助\n* 创新以人为本\n* 你的团队能通过电梯测试吗\n* 性能制胜\n\n## 招聘程序员须得其法\n\n* 为什么程序员不会编程\n* 怎样招聘程序员\n* 如何做好电话面试筛选\n* 工作经验数年之神话\n* 与程序员面谈\n* 史上最难的面试谜题\n\n## 促使团队紧密协作\n\n* 不管怎么说，那总是人的问题\n* 领导需以身作则\n* 程序员与系统管理员的黑夜传说\n* 结对编程与代码评审\n* 会议是浪费工作时间的最佳去处\n* 处理坏苹果\n* 坏苹果是团队的毒药\n* 关于远程办公\n\n## 蝙蝠洞：程序员的高效工作场所\n\n* 程序员的《权利法案》\n* 电脑工作站的人体工程学\n* 多显示器能提高生产力吗\n* 购置优质的电脑椅\n* 背景光的功效\n\n## 设计时要把用户放在心上\n\n* 你永远不会有足够的奶酪\n* 细节决定成败\n* 用户界面代表了软件\n* 用户界面须优先设计\n* 分页显示该休矣\n* 对待弱视的用户\n* 再谈浏览器底栏\n* 费茨定律与无限宽度\n* 单元测试的终极失败\n* 第一版做的不好，但照样发布\n\n## 安全基础：保护用户数据\n\n* 所有的网络通信都因该加密码\n* 防范字典式攻击\n* 快速哈希\n* 关于网络密码的可怕真相\n\n## 加强代码测试，别让它太差劲\n\n* 与客户患难与共\n* 结交 “混世魔猴”\n* 代码评审：说做就做\n* 加大测试力度\n* 我同情那些不写单元测试的傻瓜\n* 单元测试与Beta测试的对比\n* 低保真的可用性测试\n* 比程序崩溃更糟糕的是什么\n\n## 创建并管理社区，同时从中受益\n\n* 倾听社区的声音，但是别被它们牵着鼻子走\n* 我重申：别盲目听从你的用户\n* 游戏化\n* 暂停、禁止、或者打入地狱\n\n## 揭露营销伎俩，以及如何规避\n\n* 谨防九种营销诡计\n* 网络广告该休矣\n* 从《偷天情缘》看A/B测试的问题\n* 如果流于俗套，请即刻改变\n* 软件定价：我们深谙其道吗\n\n## 轻重缓急，了然于心\n\n* 程序员，你幸福吗\n* 来也匆匆，去也匆匆，到头来两手空空\n\n## 程序员必读之书\n\n* 代码大全\n* 人月神话\n* Don't Make Me Think\n* 快速软件开发\n* 人件\n* 设计心理学\n* About Face 3:交互设计精髓\n* 交互设计之路--让高科技产品回归人性\n* GUI设计禁忌\n* 编程珠玑\n* 程序员修炼之道：从小工到专家\n* Web可用性设计\n* 精通正则表达式\n","source":"_posts/2014-07-13-effective-programming-more-than-writing-code.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2014-07-13 22:33:15+00:00\nlayout: post\ntitle: 高效能程序员的修炼\ncategory : 软件开发\ntags : [软件开发]\n---\n\n## 入门须知\n\n* 你想成为一个程序员\n* 程序员的八种境界\n* 如何培养写作习惯\n\n## 把一堆烂事搞定的艺术\n\n* 学海无边\n* 磨刀不误砍柴工\n* 一路向前冲\n* 关于多任务的神话\n\n## 高效编程之原则\n\n* 第一条法则：永远都是你的错\n* 大道至简\n* 避免写注释\n* 学会读源代码\n* 像橡皮鸭求助\n* 创新以人为本\n* 你的团队能通过电梯测试吗\n* 性能制胜\n\n## 招聘程序员须得其法\n\n* 为什么程序员不会编程\n* 怎样招聘程序员\n* 如何做好电话面试筛选\n* 工作经验数年之神话\n* 与程序员面谈\n* 史上最难的面试谜题\n\n## 促使团队紧密协作\n\n* 不管怎么说，那总是人的问题\n* 领导需以身作则\n* 程序员与系统管理员的黑夜传说\n* 结对编程与代码评审\n* 会议是浪费工作时间的最佳去处\n* 处理坏苹果\n* 坏苹果是团队的毒药\n* 关于远程办公\n\n## 蝙蝠洞：程序员的高效工作场所\n\n* 程序员的《权利法案》\n* 电脑工作站的人体工程学\n* 多显示器能提高生产力吗\n* 购置优质的电脑椅\n* 背景光的功效\n\n## 设计时要把用户放在心上\n\n* 你永远不会有足够的奶酪\n* 细节决定成败\n* 用户界面代表了软件\n* 用户界面须优先设计\n* 分页显示该休矣\n* 对待弱视的用户\n* 再谈浏览器底栏\n* 费茨定律与无限宽度\n* 单元测试的终极失败\n* 第一版做的不好，但照样发布\n\n## 安全基础：保护用户数据\n\n* 所有的网络通信都因该加密码\n* 防范字典式攻击\n* 快速哈希\n* 关于网络密码的可怕真相\n\n## 加强代码测试，别让它太差劲\n\n* 与客户患难与共\n* 结交 “混世魔猴”\n* 代码评审：说做就做\n* 加大测试力度\n* 我同情那些不写单元测试的傻瓜\n* 单元测试与Beta测试的对比\n* 低保真的可用性测试\n* 比程序崩溃更糟糕的是什么\n\n## 创建并管理社区，同时从中受益\n\n* 倾听社区的声音，但是别被它们牵着鼻子走\n* 我重申：别盲目听从你的用户\n* 游戏化\n* 暂停、禁止、或者打入地狱\n\n## 揭露营销伎俩，以及如何规避\n\n* 谨防九种营销诡计\n* 网络广告该休矣\n* 从《偷天情缘》看A/B测试的问题\n* 如果流于俗套，请即刻改变\n* 软件定价：我们深谙其道吗\n\n## 轻重缓急，了然于心\n\n* 程序员，你幸福吗\n* 来也匆匆，去也匆匆，到头来两手空空\n\n## 程序员必读之书\n\n* 代码大全\n* 人月神话\n* Don't Make Me Think\n* 快速软件开发\n* 人件\n* 设计心理学\n* About Face 3:交互设计精髓\n* 交互设计之路--让高科技产品回归人性\n* GUI设计禁忌\n* 编程珠玑\n* 程序员修炼之道：从小工到专家\n* Web可用性设计\n* 精通正则表达式\n","slug":"effective-programming-more-than-writing-code","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvjp000oz1n11kclrvc1"},{"author":"飞雪无情","comments":1,"date":"2014-03-22T05:29:02.000Z","layout":"post","slug":"android-avd-not-launcher","title":"android新建大分辨率模拟器不能启动的问题","wordpress_id":230,"_content":"新建的Android模拟器的分辨率超过一定大小的时候,就无法启动,比如超过1920*1080,就启动不了啦,更别说现在的2560*1440了.这时候只需要在新建AVD的时候,选择Use Host GPU选项然后即可正常启动..已经新建好的AVD也可以点击编辑,然后勾选Use Host GPU即可\n","source":"_posts/2014-03-22-android-avd-not-launcher.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2014-03-22 13:29:02+00:00\nlayout: post\nslug: android-avd-not-launcher\ntitle: android新建大分辨率模拟器不能启动的问题\nwordpress_id: 230\ncategories:\n- Android\ntags:\n- Android\n---\n新建的Android模拟器的分辨率超过一定大小的时候,就无法启动,比如超过1920*1080,就启动不了啦,更别说现在的2560*1440了.这时候只需要在新建AVD的时候,选择Use Host GPU选项然后即可正常启动..已经新建好的AVD也可以点击编辑,然后勾选Use Host GPU即可\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvjs000tz1n1738coi0m"},{"author":"飞雪无情","comments":1,"date":"2014-02-20T06:14:29.000Z","layout":"post","slug":"android-overlay-guide","title":"android覆盖式引导","wordpress_id":225,"_content":"\n我们在开发产品的时候,每次发版可能会有一些新的功能需要引导用户使用,以前大部分都是使用截图,然后让设计师把引导的问题修饰好放到图上,现在这张图片就是引导图片,我们只需要用这张图片放到界面上,这样基本上就可以满足引导的作用.\n\n但是这样的情况有个缺点,那就是,手机的分辨率太多,我们不可能每个分辨率都做一张图片,这样图片就会变形,有些引导操作的位置可能就不准确了,而且使用绘图的方式绘制在图片上的文字也会模糊不清.\n\n基于如上的方式,我们可以使用另外一种方式来做引导,这样方式就是使用覆盖式的方式,主要的实现方式是\n\n\n\n\t\n  1. 使用一个透明并且全屏的PopuWindow,这样我们就有一个可以显示向导\n\n\t\n  2. 获取需要引导的View元素在屏幕上的位置,这样我们就可以准确的给这个View绘制引导信息\n\n\t\n  3. 然后让PopuWindow显示出来,这样就可以看到我们的引导正好指向需要引导的位置\n\n\n可以看下如下图的效果,这是实现的示例图.\n\n[![](/uploads/2014/02/device-2014-02-20-213148-500x209.png)](/uploads/2014/02/device-2014-02-20-213148.png)\n\n\n\n可以看到,\"查看帮助,了解更多\"正好指向我们?图片操作按钮,位置很准确,文字也很清晰,并且这种方式实现的在所有分辨率上的手机上位置都是准确的,因为我们准确的获得了目标View的位置.\n\n从上面的描述和效果图中我们也看到了一些关键点,比如全屏背景透明的PopuWindow,这个相信比较简单,宽高FILL_PARENT,背景设置为透明背景就好了.第二个就是目标View的位置,这个是比较难的,一般的引导我们都会在用户打开界面的时候显示,按说在Activity onCreate方法里调用最合适,但是这个时候我们的ContentVIew还没有测量绘制,所以我们根本不知道目标的位置.另外一个办法就是监听View层级的变化.\n\n    \n    ViewTreeObserver observer view.getViewTreeObserver();\n    observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){\n        public void onGlobalLayout(){\n        //开始显示向导\n      }\n    });\n\n\n注册监听后,就可以在收到通知后进行显示向导,这时候每个View都已经测量布局好,可以获得他们的准确位置,获取View在屏幕上的位置通过public void getLocationOnScreen (int[] location)获取其在屏幕上的位置.\n\n获取到这些VIew的位置后,就需要显示我们的引导了,PopuWindow可以设置一个ContentView,我们可以AbsoluteLayout作为ContentView,在这里绝对布局是最好的选择,因为我们获取的目标View的位置都是绝对的,所以使用绝对位置,通过x,y坐标就可以确定引导的位置.\n\n接下来的事情就简单了,我们只需要显示PopuWindow就可以啦,然后控制好事件,比如用户点击的时候收起该引导,让用户继续正常使用产品.引导不能无休止的显示,我们可以通过配置来控制引导是否显示以及显示的次数等等.\n","source":"_posts/2014-02-20-android-overlay-guide.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2014-02-20 14:14:29+00:00\nlayout: post\nslug: android-overlay-guide\ntitle: android覆盖式引导\nwordpress_id: 225\ncategories:\n- Android\ntags:\n- Android\n---\n\n我们在开发产品的时候,每次发版可能会有一些新的功能需要引导用户使用,以前大部分都是使用截图,然后让设计师把引导的问题修饰好放到图上,现在这张图片就是引导图片,我们只需要用这张图片放到界面上,这样基本上就可以满足引导的作用.\n\n但是这样的情况有个缺点,那就是,手机的分辨率太多,我们不可能每个分辨率都做一张图片,这样图片就会变形,有些引导操作的位置可能就不准确了,而且使用绘图的方式绘制在图片上的文字也会模糊不清.\n\n基于如上的方式,我们可以使用另外一种方式来做引导,这样方式就是使用覆盖式的方式,主要的实现方式是\n\n\n\n\t\n  1. 使用一个透明并且全屏的PopuWindow,这样我们就有一个可以显示向导\n\n\t\n  2. 获取需要引导的View元素在屏幕上的位置,这样我们就可以准确的给这个View绘制引导信息\n\n\t\n  3. 然后让PopuWindow显示出来,这样就可以看到我们的引导正好指向需要引导的位置\n\n\n可以看下如下图的效果,这是实现的示例图.\n\n[![](/uploads/2014/02/device-2014-02-20-213148-500x209.png)](/uploads/2014/02/device-2014-02-20-213148.png)\n\n\n\n可以看到,\"查看帮助,了解更多\"正好指向我们?图片操作按钮,位置很准确,文字也很清晰,并且这种方式实现的在所有分辨率上的手机上位置都是准确的,因为我们准确的获得了目标View的位置.\n\n从上面的描述和效果图中我们也看到了一些关键点,比如全屏背景透明的PopuWindow,这个相信比较简单,宽高FILL_PARENT,背景设置为透明背景就好了.第二个就是目标View的位置,这个是比较难的,一般的引导我们都会在用户打开界面的时候显示,按说在Activity onCreate方法里调用最合适,但是这个时候我们的ContentVIew还没有测量绘制,所以我们根本不知道目标的位置.另外一个办法就是监听View层级的变化.\n\n    \n    ViewTreeObserver observer view.getViewTreeObserver();\n    observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){\n        public void onGlobalLayout(){\n        //开始显示向导\n      }\n    });\n\n\n注册监听后,就可以在收到通知后进行显示向导,这时候每个View都已经测量布局好,可以获得他们的准确位置,获取View在屏幕上的位置通过public void getLocationOnScreen (int[] location)获取其在屏幕上的位置.\n\n获取到这些VIew的位置后,就需要显示我们的引导了,PopuWindow可以设置一个ContentView,我们可以AbsoluteLayout作为ContentView,在这里绝对布局是最好的选择,因为我们获取的目标View的位置都是绝对的,所以使用绝对位置,通过x,y坐标就可以确定引导的位置.\n\n接下来的事情就简单了,我们只需要显示PopuWindow就可以啦,然后控制好事件,比如用户点击的时候收起该引导,让用户继续正常使用产品.引导不能无休止的显示,我们可以通过配置来控制引导是否显示以及显示的次数等等.\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvju000wz1n18g7athjq"},{"author":"飞雪无情","comments":1,"date":"2013-12-27T04:59:13.000Z","layout":"post","slug":"linux-php-server-with-nginx","title":"使用Nginx搭建PHP服务器","wordpress_id":217,"_content":"\n一般我们都是采用Apache 作为PHP的解析服务器，这次则是采用Nginx这个强大的反向代理服务器来搭建PHP服务器。下面就以Linux发行版Ubuntu为例搭建一个Nginx的PHP服务器。\n\n首先下载安装Nginx\n\n    \n    sudo apt-get install nginx\n\n\n安装完成后，启动Nginx\n\n    \n    sudo /etc/init.d/nginx start\n\n\n这时候打开浏览器里输入http://localhost/就可以看到Welcome to nginx!的页面了，说明我们的Nginx服务器安装成功\n\n接下来安装PHP5\n\n    \n    sudo apt-get install php5-fpm\n\n\n安装成功后，我们要修改Nginx的虚拟机配置，让浏览器请求的php文件可以被php cgi解析。编辑Nginx虚拟机配置文件/etc/nginx/sites-available/default\n\n    \n    sudo vim /etc/nginx/sites-available/default\n\n\n然后把里面的配置修改为如下配置内容：\n\n    # You may add here your\n    # server {\n    #\t...\n    # }\n    # statements for each of your virtual hosts to this file\n    \n    ##\n    # You should look at the following URL's in order to grasp a solid understanding\n    # of Nginx configuration files in order to fully unleash the power of Nginx.\n    # http://wiki.nginx.org/Pitfalls\n    # http://wiki.nginx.org/QuickStart\n    # http://wiki.nginx.org/Configuration\n    #\n    # Generally, you will want to move this file somewhere, and start with a clean\n    # file but keep this around for reference. Or just disable in sites-enabled.\n    #\n    # Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.\n    ##\n    \n    server {\n    \tlisten   80; ## listen for ipv4; this line is default and implied\n    \t#listen   [::]:80 default ipv6only=on; ## listen for ipv6\n    \n    \troot /usr/share/nginx/www;\n    \tindex index.html index.htm index.php;\n    \n    \t# Make site accessible from http://localhost/\n    \tserver_name localhost;\n    \n    \tlocation / {\n    \t\t# First attempt to serve request as file, then\n    \t\t# as directory, then fall back to index.html\n    \t\ttry_files $uri $uri/ /index.html;\n    \t\t# Uncomment to enable naxsi on this location\n    \t\t# include /etc/nginx/naxsi.rules\n    \t}\n    \n    \tlocation /doc/ {\n    \t\talias /usr/share/doc/;\n    \t\tautoindex on;\n    \t\tallow 127.0.0.1;\n    \t\tdeny all;\n    \t}\n    \n    \t# Only for nginx-naxsi : process denied requests\n    \t#location /RequestDenied {\n    \t\t# For example, return an error code\n    \t\t#return 418;\n    \t# }\n    \n    \terror_page 404 /404.html;\n    \n    \t# redirect server error pages to the static page /50x.html\n    \t#\n    \terror_page 500 502 503 504 /50x.html;\n    \tlocation = /50x.html {\n    \t\troot /usr/share/nginx/www;\n    \t}\n    \n    \t# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    \t#\n    \tlocation ~ \\.php$ {\n    \t\tfastcgi_split_path_info ^(.+\\.php)(/.+)$;\n    \t\t# NOTE: You should have \"cgi.fix_pathinfo = 0;\" in php.ini\n    \n    \t\t# With php5-cgi alone:\n    \t\tfastcgi_pass 127.0.0.1:9000;\n    \t\t# With php5-fpm:\n    \t\t#fastcgi_pass unix:/var/run/php5-fpm.sock;\n    \t\tfastcgi_index index.php;\n    \t\tinclude fastcgi_params;\n    \t}\n    \n    \t# deny access to .htaccess files, if Apache's document root\n    \t# concurs with nginx's one\n    \t#\n    \tlocation ~ /\\.ht {\n    \t\tdeny all;\n    \t}\n    }\n    \n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #\tlisten 8000;\n    #\tlisten somename:8080;\n    #\tserver_name somename alias another.alias;\n    #\troot html;\n    #\tindex index.html index.htm;\n    #\n    #\tlocation / {\n    #\t\ttry_files $uri $uri/ /index.html;\n    #\t}\n    # }\n    \n    # HTTPS server\n    #\n    #server {\n    #\tlisten 443;\n    #\tserver_name localhost;\n    #\n    #\troot html;\n    #\tindex index.html index.htm;\n    #\n    #\tssl on;\n    #\tssl_certificate cert.pem;\n    #\tssl_certificate_key cert.key;\n    #\n    #\tssl_session_timeout 5m;\n    #\n    #\tssl_protocols SSLv3 TLSv1;\n    #\tssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;\n    #\tssl_prefer_server_ciphers on;\n    #\n    #\tlocation / {\n    #\t\ttry_files $uri $uri/ /index.html;\n    #\t}\n    # }\n\n重新加载我们刚刚更改的Nginx配置\n\n    \n    sudo /etc/init.d/nginx reload\n\n\n然后我们在/usr/share/nginx/www/目录下新建一个phpinfo.php文件，可以查看php的配置和环境信息\n\n    \n    sudo vim /usr/share/nginx/www/phpinfo.php\n\n\n在phpinfo.php中录入如下内容:\n\n    \n    <?php\n      phpinfo();\n    ?>\n\n\n我们在浏览器里输入http://localhost/phpinfo.php就可以看到PHP的信息页了，有版本等信息。\n\nPHP5还有很多支持的模块，如果需要的话可以选择安装，一般这些模块都是php5-开头，比如php5-mysql，在Ubuntu里安装他只需\n\n    \n    sudo apt-get install php5-mysql\n\n\nPHP的模块安装后别忘记重启PHP5哦，执行如下命令可以重启\n\n    \n    sudo /etc/init.d/php5-fpm restart\n\n\n","source":"_posts/2013-12-27-linux-php-server-with-nginx.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-12-27 12:59:13+00:00\nlayout: post\nslug: linux-php-server-with-nginx\ntitle: 使用Nginx搭建PHP服务器\nwordpress_id: 217\ncategories:\n- Linux\ntags:\n- Apache\n- Linux\n- Nginx\n- PHP\n- Ubuntu\n---\n\n一般我们都是采用Apache 作为PHP的解析服务器，这次则是采用Nginx这个强大的反向代理服务器来搭建PHP服务器。下面就以Linux发行版Ubuntu为例搭建一个Nginx的PHP服务器。\n\n首先下载安装Nginx\n\n    \n    sudo apt-get install nginx\n\n\n安装完成后，启动Nginx\n\n    \n    sudo /etc/init.d/nginx start\n\n\n这时候打开浏览器里输入http://localhost/就可以看到Welcome to nginx!的页面了，说明我们的Nginx服务器安装成功\n\n接下来安装PHP5\n\n    \n    sudo apt-get install php5-fpm\n\n\n安装成功后，我们要修改Nginx的虚拟机配置，让浏览器请求的php文件可以被php cgi解析。编辑Nginx虚拟机配置文件/etc/nginx/sites-available/default\n\n    \n    sudo vim /etc/nginx/sites-available/default\n\n\n然后把里面的配置修改为如下配置内容：\n\n    # You may add here your\n    # server {\n    #\t...\n    # }\n    # statements for each of your virtual hosts to this file\n    \n    ##\n    # You should look at the following URL's in order to grasp a solid understanding\n    # of Nginx configuration files in order to fully unleash the power of Nginx.\n    # http://wiki.nginx.org/Pitfalls\n    # http://wiki.nginx.org/QuickStart\n    # http://wiki.nginx.org/Configuration\n    #\n    # Generally, you will want to move this file somewhere, and start with a clean\n    # file but keep this around for reference. Or just disable in sites-enabled.\n    #\n    # Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.\n    ##\n    \n    server {\n    \tlisten   80; ## listen for ipv4; this line is default and implied\n    \t#listen   [::]:80 default ipv6only=on; ## listen for ipv6\n    \n    \troot /usr/share/nginx/www;\n    \tindex index.html index.htm index.php;\n    \n    \t# Make site accessible from http://localhost/\n    \tserver_name localhost;\n    \n    \tlocation / {\n    \t\t# First attempt to serve request as file, then\n    \t\t# as directory, then fall back to index.html\n    \t\ttry_files $uri $uri/ /index.html;\n    \t\t# Uncomment to enable naxsi on this location\n    \t\t# include /etc/nginx/naxsi.rules\n    \t}\n    \n    \tlocation /doc/ {\n    \t\talias /usr/share/doc/;\n    \t\tautoindex on;\n    \t\tallow 127.0.0.1;\n    \t\tdeny all;\n    \t}\n    \n    \t# Only for nginx-naxsi : process denied requests\n    \t#location /RequestDenied {\n    \t\t# For example, return an error code\n    \t\t#return 418;\n    \t# }\n    \n    \terror_page 404 /404.html;\n    \n    \t# redirect server error pages to the static page /50x.html\n    \t#\n    \terror_page 500 502 503 504 /50x.html;\n    \tlocation = /50x.html {\n    \t\troot /usr/share/nginx/www;\n    \t}\n    \n    \t# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    \t#\n    \tlocation ~ \\.php$ {\n    \t\tfastcgi_split_path_info ^(.+\\.php)(/.+)$;\n    \t\t# NOTE: You should have \"cgi.fix_pathinfo = 0;\" in php.ini\n    \n    \t\t# With php5-cgi alone:\n    \t\tfastcgi_pass 127.0.0.1:9000;\n    \t\t# With php5-fpm:\n    \t\t#fastcgi_pass unix:/var/run/php5-fpm.sock;\n    \t\tfastcgi_index index.php;\n    \t\tinclude fastcgi_params;\n    \t}\n    \n    \t# deny access to .htaccess files, if Apache's document root\n    \t# concurs with nginx's one\n    \t#\n    \tlocation ~ /\\.ht {\n    \t\tdeny all;\n    \t}\n    }\n    \n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #\tlisten 8000;\n    #\tlisten somename:8080;\n    #\tserver_name somename alias another.alias;\n    #\troot html;\n    #\tindex index.html index.htm;\n    #\n    #\tlocation / {\n    #\t\ttry_files $uri $uri/ /index.html;\n    #\t}\n    # }\n    \n    # HTTPS server\n    #\n    #server {\n    #\tlisten 443;\n    #\tserver_name localhost;\n    #\n    #\troot html;\n    #\tindex index.html index.htm;\n    #\n    #\tssl on;\n    #\tssl_certificate cert.pem;\n    #\tssl_certificate_key cert.key;\n    #\n    #\tssl_session_timeout 5m;\n    #\n    #\tssl_protocols SSLv3 TLSv1;\n    #\tssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;\n    #\tssl_prefer_server_ciphers on;\n    #\n    #\tlocation / {\n    #\t\ttry_files $uri $uri/ /index.html;\n    #\t}\n    # }\n\n重新加载我们刚刚更改的Nginx配置\n\n    \n    sudo /etc/init.d/nginx reload\n\n\n然后我们在/usr/share/nginx/www/目录下新建一个phpinfo.php文件，可以查看php的配置和环境信息\n\n    \n    sudo vim /usr/share/nginx/www/phpinfo.php\n\n\n在phpinfo.php中录入如下内容:\n\n    \n    <?php\n      phpinfo();\n    ?>\n\n\n我们在浏览器里输入http://localhost/phpinfo.php就可以看到PHP的信息页了，有版本等信息。\n\nPHP5还有很多支持的模块，如果需要的话可以选择安装，一般这些模块都是php5-开头，比如php5-mysql，在Ubuntu里安装他只需\n\n    \n    sudo apt-get install php5-mysql\n\n\nPHP的模块安装后别忘记重启PHP5哦，执行如下命令可以重启\n\n    \n    sudo /etc/init.d/php5-fpm restart\n\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvjw000zz1n12f1oddhx"},{"author":"飞雪无情","comments":1,"date":"2013-12-14T07:35:36.000Z","layout":"post","slug":"open-source-project-in-android-app","title":"Android产品开发中常用的一些开源项目","wordpress_id":207,"_content":"\n你在工作中可能会遇到同时给你说不要重复发明轮子，其实这个说的就是第一：不要做重复的事情，第二：站在巨人的肩膀上。现在有了互联网以及开源的精神，我们的很多在产品中需要实现的功能组件都可以在互联网上找到，我们可以直接拿来用，这样我们就不用重复做东西了，这得益于开源奉献精神。像Google、Facebook这类的大公司都在使用很多的开源产品，比如我们常见的Apache系列、我们使用的Eclipse IDE等等。\n\n在我自己的产品开发中，我也使用到了一些常用的开源项目，下面就介绍一下我使用的一些Android开源项目。\n\n\n### 1.android-wheel\n\n\n还记得iPhone上经典的日期选择滑轮组件吗?这个就是android版本的实现，记得当时这种选择方式很风靡，可以用于时间、分类等一些具有选择类型功能的开发实现，非常方便。\n\n开源项目地址：[https://code.google.com/p/android-wheel/](https://code.google.com/p/android-wheel/)\n\n\n### [![android-wheel-cities](/uploads/2013/12/android-wheel-cities.png)](/uploads/2013/12/android-wheel-cities.png)2.achartengine\n\n\n这个是android上用于报表类的组件，可以实现条形图、饼图、柱状图、折线图等等。可以在产品中用于一些报表统计类的功能，通过这些图形报表给用户一个直观的统计，比如用户的收支走势图、分类支出对比图等等。\n\n开源项目地址：[https://code.google.com/p/achartengine/](https://code.google.com/p/achartengine/)\n\n\n### [![android-wheel-cities](/uploads/2013/12/android-wheel-cities.png)](/uploads/2013/12/android-wheel-cities.png) [![combined_chart](/uploads/2013/12/combined_chart-300x500.png)](/uploads/2013/12/combined_chart.png)3.Satellite Menu\n\n\n还记得Path的弧形弹出式菜单吗？当时太风靡了，大家都在抄啊，一时间市场上所有的App的功能和菜单键全被这个设计代替了。不多说，给出地址。\n\n开源项目地址：[https://github.com/siyamed/android-satellite-menu](https://github.com/siyamed/android-satellite-menu)\n\n\n### [![687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67](/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-489x500.png)](/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67.png)4.drag-sort-listview\n\n\nAndroid产品中ListView相信大家都用的不少，用于展示用户的数据是很不错的，不过有的时候用户需要调整一下列表项的顺序，比如用户想把好听的因为放在上面，便于选择，这时候这个组件就派上用场了，可以让用户拖动着某一项进行上下排序。\n\n开源项目地址：[https://github.com/bauerca/drag-sort-listview](https://github.com/bauerca/drag-sort-listview)\n\n\n### 5.SlidingMenu\n\n\n不知道从什么时候起侧滑又成了App设计的一个风向标，一时间全是侧滑啊，就是感觉不用侧滑这个产品就不好意思发布似的。这是一个非常经典的侧滑开源项目，都多种方式、可以灵活配置和定制。\n\n开源项目地址：[https://github.com/jfeinstein10/SlidingMenu](https://github.com/jfeinstein10/SlidingMenu)\n\n\n### [![2012110712582439](/uploads/2013/12/2012110712582439.png)](/uploads/2013/12/2012110712582439.png)6.NineOldAndroids\n\n\nAndroid3.0增加了一套属性动画的框架，让开发者能更容易的完成更复杂的动画，但是为了兼容低版本的手机，我们又不能把应用升级到Android3.0,不过幸好有NineOldAndroids，我们可以在低系统版本的手机上也可以使用属性动画\n\n开源项目地址：[https://github.com/JakeWharton/NineOldAndroids](https://github.com/JakeWharton/NineOldAndroids)\n\n\n### 7.Android-PullToRefresh\n\n\n下拉列表刷新，上拉加载，下拉。。。，上下拉可以做很多事情，上下拉又成了时髦的设计。这是一个非常NB的组件，可以把任何View变成具有可上下拉功能的View，并且不会对原来的View造成污染。\n\n开源项目地址：[https://github.com/chrisbanes/Android-PullToRefresh](https://github.com/chrisbanes/Android-PullToRefresh)\n\n\n### [![header_graphic](/uploads/2013/12/header_graphic-500x254.png)](/uploads/2013/12/header_graphic.png)8.ActionBarSherlock\n\n\n从 Android3.0开始增加了ActionBar，它能帮助开发者定制菜单，导航等，非常方便，但是低版本的用不了，所以ActionBarSherlock就出世了，它能让我们在低版本的手机上也可以使用ActionBar\n\n开源项目地址：[https://github.com/JakeWharton/ActionBarSherlock](https://github.com/JakeWharton/ActionBarSherlock)\n\n[![687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67](/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-500x236.png)](/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67.png)\n\n\n\n\n\n开源项目林林总总很多，今天说的都是我常用的，多去一些注入GitHub，GoogleCode等网站，可以发现很多开源的优秀项目，这些我们可以先了解收集起来，等我们产品中有类似的功能了，可以拿来使用，帮你更快的完成工作。\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2013-12-14-open-source-project-in-android-app.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-12-14 15:35:36+00:00\nlayout: post\nslug: open-source-project-in-android-app\ntitle: Android产品开发中常用的一些开源项目\nwordpress_id: 207\ncategories:\n- Android\ntags:\n- Android\n- 开源\n---\n\n你在工作中可能会遇到同时给你说不要重复发明轮子，其实这个说的就是第一：不要做重复的事情，第二：站在巨人的肩膀上。现在有了互联网以及开源的精神，我们的很多在产品中需要实现的功能组件都可以在互联网上找到，我们可以直接拿来用，这样我们就不用重复做东西了，这得益于开源奉献精神。像Google、Facebook这类的大公司都在使用很多的开源产品，比如我们常见的Apache系列、我们使用的Eclipse IDE等等。\n\n在我自己的产品开发中，我也使用到了一些常用的开源项目，下面就介绍一下我使用的一些Android开源项目。\n\n\n### 1.android-wheel\n\n\n还记得iPhone上经典的日期选择滑轮组件吗?这个就是android版本的实现，记得当时这种选择方式很风靡，可以用于时间、分类等一些具有选择类型功能的开发实现，非常方便。\n\n开源项目地址：[https://code.google.com/p/android-wheel/](https://code.google.com/p/android-wheel/)\n\n\n### [![android-wheel-cities](/uploads/2013/12/android-wheel-cities.png)](/uploads/2013/12/android-wheel-cities.png)2.achartengine\n\n\n这个是android上用于报表类的组件，可以实现条形图、饼图、柱状图、折线图等等。可以在产品中用于一些报表统计类的功能，通过这些图形报表给用户一个直观的统计，比如用户的收支走势图、分类支出对比图等等。\n\n开源项目地址：[https://code.google.com/p/achartengine/](https://code.google.com/p/achartengine/)\n\n\n### [![android-wheel-cities](/uploads/2013/12/android-wheel-cities.png)](/uploads/2013/12/android-wheel-cities.png) [![combined_chart](/uploads/2013/12/combined_chart-300x500.png)](/uploads/2013/12/combined_chart.png)3.Satellite Menu\n\n\n还记得Path的弧形弹出式菜单吗？当时太风靡了，大家都在抄啊，一时间市场上所有的App的功能和菜单键全被这个设计代替了。不多说，给出地址。\n\n开源项目地址：[https://github.com/siyamed/android-satellite-menu](https://github.com/siyamed/android-satellite-menu)\n\n\n### [![687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67](/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67-489x500.png)](/uploads/2013/12/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67.png)4.drag-sort-listview\n\n\nAndroid产品中ListView相信大家都用的不少，用于展示用户的数据是很不错的，不过有的时候用户需要调整一下列表项的顺序，比如用户想把好听的因为放在上面，便于选择，这时候这个组件就派上用场了，可以让用户拖动着某一项进行上下排序。\n\n开源项目地址：[https://github.com/bauerca/drag-sort-listview](https://github.com/bauerca/drag-sort-listview)\n\n\n### 5.SlidingMenu\n\n\n不知道从什么时候起侧滑又成了App设计的一个风向标，一时间全是侧滑啊，就是感觉不用侧滑这个产品就不好意思发布似的。这是一个非常经典的侧滑开源项目，都多种方式、可以灵活配置和定制。\n\n开源项目地址：[https://github.com/jfeinstein10/SlidingMenu](https://github.com/jfeinstein10/SlidingMenu)\n\n\n### [![2012110712582439](/uploads/2013/12/2012110712582439.png)](/uploads/2013/12/2012110712582439.png)6.NineOldAndroids\n\n\nAndroid3.0增加了一套属性动画的框架，让开发者能更容易的完成更复杂的动画，但是为了兼容低版本的手机，我们又不能把应用升级到Android3.0,不过幸好有NineOldAndroids，我们可以在低系统版本的手机上也可以使用属性动画\n\n开源项目地址：[https://github.com/JakeWharton/NineOldAndroids](https://github.com/JakeWharton/NineOldAndroids)\n\n\n### 7.Android-PullToRefresh\n\n\n下拉列表刷新，上拉加载，下拉。。。，上下拉可以做很多事情，上下拉又成了时髦的设计。这是一个非常NB的组件，可以把任何View变成具有可上下拉功能的View，并且不会对原来的View造成污染。\n\n开源项目地址：[https://github.com/chrisbanes/Android-PullToRefresh](https://github.com/chrisbanes/Android-PullToRefresh)\n\n\n### [![header_graphic](/uploads/2013/12/header_graphic-500x254.png)](/uploads/2013/12/header_graphic.png)8.ActionBarSherlock\n\n\n从 Android3.0开始增加了ActionBar，它能帮助开发者定制菜单，导航等，非常方便，但是低版本的用不了，所以ActionBarSherlock就出世了，它能让我们在低版本的手机上也可以使用ActionBar\n\n开源项目地址：[https://github.com/JakeWharton/ActionBarSherlock](https://github.com/JakeWharton/ActionBarSherlock)\n\n[![687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67](/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67-500x236.png)](/uploads/2013/12/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67.png)\n\n\n\n\n\n开源项目林林总总很多，今天说的都是我常用的，多去一些注入GitHub，GoogleCode等网站，可以发现很多开源的优秀项目，这些我们可以先了解收集起来，等我们产品中有类似的功能了，可以拿来使用，帮你更快的完成工作。\n\n\n\n\n\n\n\n\n\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvk1001cz1n1zplojahy"},{"author":"飞雪无情","comments":1,"date":"2013-11-21T06:39:11.000Z","layout":"post","slug":"android-httpclitent-session-keep","title":"Android HttpClient Session保持","wordpress_id":200,"_content":"\n现在单机版本的App已经不多了，基本上都会和服务器进行通信。Android提供Http访问的方式有两种，一种是HttpClient，一种是UrlConnection.这里要说的是HttpClient。\n\n在Http访问中，我们可能会遇到一些这样的场景，比如服务端要求几次Http请求组成一次完整的客户端服务器通信，比如同步。现在的App很多有有账号系统，会提供把用户数据备份的功能，那么这么在线备份功能就是这样的一个场景，它包括登陆、数据上传，结果返回、提交确认或者终止等这样的顺序步骤，每一步都是一次Http访问请求。服务器的设计(负载均衡等)需要要求客户端在这依次完整的数据备份的几次Http访问请求中保持同一个Session.便于服务器的协调和操作，就和用户用浏览器打开网页去完整一件事情一样，这就需要我们在每次Http请求的时候保持Session。\n\n其实保持HttpClient的请求Session，就是保证在每次Http请求访问的请求头信息的Cookie参数中，携带同一个JSESSIONID，只要保证每次是一样的，服务器就认为是同一Session，这就保持了Seesion会话。那么这个JSESSIONID是怎么来的呢，是服务器通过响应头信息给的，服务器在给客户端设置Cookie时，会通过响应头信息中的Set-Cookie参数传递回来，只要有新设置的Cookie，就是通过这个传递过来，如果没有则是null，那么我们就可以在请求完之后返回的信息里读取这个Set-Cookie头信息，然后保存起来，在下次请求的时候给服务器发送过去，就实现了保持Seesion的目的。代码如下：\n\n    \n    \t\n        //定义储存Cookie信息\n        private String cookies;\n    \n    \tpublic void executeGet(String url) throws ClientProtocolException, IOException{\n    \t\tHttpClient httpClient=new DefaultHttpClient();\n    \n    \t\tHttpGet httpGet=new HttpGet(url);\n    \t\tsetRequestCookies(httpGet);\n    \n    \t\tHttpResponse response=httpClient.execute(httpGet);\n    \t\tappendCookies(response);\n    \t}\n    \t/**\n    \t * 设置请求的Cookie头信息\n    \t * @param reqMsg\n    \t */\n    \tprivate void setRequestCookies(HttpMessage reqMsg) {\n    \t\tif(!TextUtils.isEmpty(cookies)){\n    \t\t\treqMsg.setHeader(\"Cookie\", cookies);\n    \t\t}\n    \t}\n    \t/**\n    \t * 把新的Cookie头信息附加到旧的Cookie后面\n    \t * 用于下次Http请求发送\n    \t * @param resMsg\n    \t */\n    \tprivate void appendCookies(HttpMessage resMsg) {\n    \t\tHeader setCookieHeader=resMsg.getFirstHeader(\"Set-Cookie\");\n    \t\tif (setCookieHeader != null\n    \t\t\t\t&& TextUtils.isEmpty(setCookieHeader.getValue())) {\n    \t\t\tString setCookie=setCookieHeader.getValue();\n    \t\t\tif(TextUtils.isEmpty(cookies)){\n    \t\t\t\tcookies=setCookie;\n    \t\t\t}else{\n    \t\t\t\tcookies=cookies+\"; \"+setCookie;\n    \t\t\t}\n    \t\t}\n    \t}\n\n\n上面的代码就是一个简单的例子，我们在发送我们的请求之前，把现存的Cookie通过请求头信息发送给服务器，然后再服务器返回的头信息中解析，看是否有需要的更新的Cookie即可，这样我们就达到了保持Seession目的。\n\n当我们需要重新设置Seesion的时候，请求我们保存的cookie即可，这样代码就会重新获取。如果都有个账号并发备份，那么一个账号分配一个cookie变量存储即可，也就是把上面的代码放到一个如HttpManager管理的类里，每个账号的备份都可以new个HttpManager实例，这样每个账号都可以单独处理自己的Cookie，互不干扰。\n\n\n","source":"_posts/2013-11-21-android-httpclitent-session-keep.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-11-21 14:39:11+00:00\nlayout: post\nslug: android-httpclitent-session-keep\ntitle: Android HttpClient Session保持\nwordpress_id: 200\ncategories:\n- Android\ntags:\n- Android\n- Http\n- HttpClitent\n---\n\n现在单机版本的App已经不多了，基本上都会和服务器进行通信。Android提供Http访问的方式有两种，一种是HttpClient，一种是UrlConnection.这里要说的是HttpClient。\n\n在Http访问中，我们可能会遇到一些这样的场景，比如服务端要求几次Http请求组成一次完整的客户端服务器通信，比如同步。现在的App很多有有账号系统，会提供把用户数据备份的功能，那么这么在线备份功能就是这样的一个场景，它包括登陆、数据上传，结果返回、提交确认或者终止等这样的顺序步骤，每一步都是一次Http访问请求。服务器的设计(负载均衡等)需要要求客户端在这依次完整的数据备份的几次Http访问请求中保持同一个Session.便于服务器的协调和操作，就和用户用浏览器打开网页去完整一件事情一样，这就需要我们在每次Http请求的时候保持Session。\n\n其实保持HttpClient的请求Session，就是保证在每次Http请求访问的请求头信息的Cookie参数中，携带同一个JSESSIONID，只要保证每次是一样的，服务器就认为是同一Session，这就保持了Seesion会话。那么这个JSESSIONID是怎么来的呢，是服务器通过响应头信息给的，服务器在给客户端设置Cookie时，会通过响应头信息中的Set-Cookie参数传递回来，只要有新设置的Cookie，就是通过这个传递过来，如果没有则是null，那么我们就可以在请求完之后返回的信息里读取这个Set-Cookie头信息，然后保存起来，在下次请求的时候给服务器发送过去，就实现了保持Seesion的目的。代码如下：\n\n    \n    \t\n        //定义储存Cookie信息\n        private String cookies;\n    \n    \tpublic void executeGet(String url) throws ClientProtocolException, IOException{\n    \t\tHttpClient httpClient=new DefaultHttpClient();\n    \n    \t\tHttpGet httpGet=new HttpGet(url);\n    \t\tsetRequestCookies(httpGet);\n    \n    \t\tHttpResponse response=httpClient.execute(httpGet);\n    \t\tappendCookies(response);\n    \t}\n    \t/**\n    \t * 设置请求的Cookie头信息\n    \t * @param reqMsg\n    \t */\n    \tprivate void setRequestCookies(HttpMessage reqMsg) {\n    \t\tif(!TextUtils.isEmpty(cookies)){\n    \t\t\treqMsg.setHeader(\"Cookie\", cookies);\n    \t\t}\n    \t}\n    \t/**\n    \t * 把新的Cookie头信息附加到旧的Cookie后面\n    \t * 用于下次Http请求发送\n    \t * @param resMsg\n    \t */\n    \tprivate void appendCookies(HttpMessage resMsg) {\n    \t\tHeader setCookieHeader=resMsg.getFirstHeader(\"Set-Cookie\");\n    \t\tif (setCookieHeader != null\n    \t\t\t\t&& TextUtils.isEmpty(setCookieHeader.getValue())) {\n    \t\t\tString setCookie=setCookieHeader.getValue();\n    \t\t\tif(TextUtils.isEmpty(cookies)){\n    \t\t\t\tcookies=setCookie;\n    \t\t\t}else{\n    \t\t\t\tcookies=cookies+\"; \"+setCookie;\n    \t\t\t}\n    \t\t}\n    \t}\n\n\n上面的代码就是一个简单的例子，我们在发送我们的请求之前，把现存的Cookie通过请求头信息发送给服务器，然后再服务器返回的头信息中解析，看是否有需要的更新的Cookie即可，这样我们就达到了保持Seession目的。\n\n当我们需要重新设置Seesion的时候，请求我们保存的cookie即可，这样代码就会重新获取。如果都有个账号并发备份，那么一个账号分配一个cookie变量存储即可，也就是把上面的代码放到一个如HttpManager管理的类里，每个账号的备份都可以new个HttpManager实例，这样每个账号都可以单独处理自己的Cookie，互不干扰。\n\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvk4001hz1n17qlg2u3i"},{"author":"飞雪无情","comments":1,"date":"2013-11-07T06:27:21.000Z","layout":"post","slug":"unsupportedoperationexception-gles20canvas-clippath","title":"java.lang.UnsupportedOperationException android.view.GLES20Canvas.clipPath","wordpress_id":194,"_content":"\n今天自定义控件使用Canvas绘图的时候遇到的这个错误，看错误的描述，是不支持这个clipPath方法的。而且在2.3的机器上没有问题，是一部4.0的机器报了这个问题。查看这个Canvas的子类实现GLES20Canvas，发现这是在开启硬件加速时使用的。看来还是和硬件加速有关。打开手机的开发者选项，发现硬件加速没有被开启，应用里也没有开启，有点奇怪了，可能是手机优化自动开启了硬件加速。\n\n硬件加速这个特性是从API 11加入的，可以大大加快View的绘制，是个很不错的功能，所以我们不可能在我们的程序里直接关闭这个功能这样我们的应用就使用不了这个特性了，所以在Application标签里设置android:hardwareAccelerated=\"false'不可行。所以可以在用到这个自定义View里的Activity里使用android:hardwareAccelerated=“false”来配置，这样其他的Activity可以继续使用同步加速的特性。不过你的自定义View用到的地方比较多，一个个Activity配置也不太方便，所以最好的办法是在你的自定义View里禁用View级别的硬件加速。可以通过以下代码来实现\n\n    \n    if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.HONEYCOMB){//API 11及其之上\n        setLayerType(LAYER_TYPE_SOFTWARE,null);//禁用硬件加速\n    }\n\n\n\n","source":"_posts/2013-11-07-unsupportedoperationexception-gles20canvas-clippath.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-11-07 14:27:21+00:00\nlayout: post\nslug: unsupportedoperationexception-gles20canvas-clippath\ntitle: java.lang.UnsupportedOperationException android.view.GLES20Canvas.clipPath\nwordpress_id: 194\ncategories:\n- Android\ntags:\n- Android\n- API\n- Widget\n---\n\n今天自定义控件使用Canvas绘图的时候遇到的这个错误，看错误的描述，是不支持这个clipPath方法的。而且在2.3的机器上没有问题，是一部4.0的机器报了这个问题。查看这个Canvas的子类实现GLES20Canvas，发现这是在开启硬件加速时使用的。看来还是和硬件加速有关。打开手机的开发者选项，发现硬件加速没有被开启，应用里也没有开启，有点奇怪了，可能是手机优化自动开启了硬件加速。\n\n硬件加速这个特性是从API 11加入的，可以大大加快View的绘制，是个很不错的功能，所以我们不可能在我们的程序里直接关闭这个功能这样我们的应用就使用不了这个特性了，所以在Application标签里设置android:hardwareAccelerated=\"false'不可行。所以可以在用到这个自定义View里的Activity里使用android:hardwareAccelerated=“false”来配置，这样其他的Activity可以继续使用同步加速的特性。不过你的自定义View用到的地方比较多，一个个Activity配置也不太方便，所以最好的办法是在你的自定义View里禁用View级别的硬件加速。可以通过以下代码来实现\n\n    \n    if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.HONEYCOMB){//API 11及其之上\n        setLayerType(LAYER_TYPE_SOFTWARE,null);//禁用硬件加速\n    }\n\n\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvl8001oz1n1ceiz47v4"},{"author":"飞雪无情","comments":1,"date":"2013-11-07T06:48:52.000Z","layout":"post","slug":"goagent-403-not-have-permiss","title":"goagent 403  not have permiss","wordpress_id":197,"_content":"\n今天上班，像往常一样打开Google，咦，竟然提示\n\n\n<blockquote>403. That’s an error.\nYour client does not have permission to get URL /2 from this server. That’s all we know.</blockquote>\n\n\n奇怪了，因为我使用goagent翻墙上网，第一反应就是又被禁了。赶紧去[goagent网站](https://code.google.com/p/goagent/)去看，发现好多人反馈这个bug。看了一圈，发现有人给出了解决办法，修改goagent客户端中的proxy.ini里的profile 为 google_hk，以前的默认配置是profile = google_cn，现在改成profile = google_hk就好了。也就是换个配置。。改了后重启goagent，发现果然好了。。继续使用。\n\n\n\n刚刚又去Goagent网站，发现发布了一则公布，这个倒没留意是什么时候发布的。公告如下\n\n\n\n\t\n  1. 403 情况请改成 profile = google_hk 或者更新到最新版(不需要上传服务端也可用） [2013-11-07 19:25 更新]。\n\n\t\n  2. 速度慢的话，建议重新部署并使用新的 appid\n\n\ngoagent是个好东西，翻墙必备，还可以看youtube视频，喜欢的朋友可以参考官网教程架设[https://code.google.com/p/goagent/wiki/InstallGuide](https://code.google.com/p/goagent/wiki/InstallGuide)\n","source":"_posts/2013-11-07-goagent-403-not-have-permiss.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-11-07 14:48:52+00:00\nlayout: post\nslug: goagent-403-not-have-permiss\ntitle: goagent 403  not have permiss\nwordpress_id: 197\ncategories:\n- Linux\ntags:\n- goagent\n- 代理\n- 翻墙\n---\n\n今天上班，像往常一样打开Google，咦，竟然提示\n\n\n<blockquote>403. That’s an error.\nYour client does not have permission to get URL /2 from this server. That’s all we know.</blockquote>\n\n\n奇怪了，因为我使用goagent翻墙上网，第一反应就是又被禁了。赶紧去[goagent网站](https://code.google.com/p/goagent/)去看，发现好多人反馈这个bug。看了一圈，发现有人给出了解决办法，修改goagent客户端中的proxy.ini里的profile 为 google_hk，以前的默认配置是profile = google_cn，现在改成profile = google_hk就好了。也就是换个配置。。改了后重启goagent，发现果然好了。。继续使用。\n\n\n\n刚刚又去Goagent网站，发现发布了一则公布，这个倒没留意是什么时候发布的。公告如下\n\n\n\n\t\n  1. 403 情况请改成 profile = google_hk 或者更新到最新版(不需要上传服务端也可用） [2013-11-07 19:25 更新]。\n\n\t\n  2. 速度慢的话，建议重新部署并使用新的 appid\n\n\ngoagent是个好东西，翻墙必备，还可以看youtube视频，喜欢的朋友可以参考官网教程架设[https://code.google.com/p/goagent/wiki/InstallGuide](https://code.google.com/p/goagent/wiki/InstallGuide)\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvlb001vz1n1bznlwrmt"},{"author":"飞雪无情","comments":1,"date":"2013-11-02T07:46:47.000Z","layout":"post","slug":"android-4-4-alarm-manager-changed","title":"使用AlarmManager设置的定时服务在Android4.4上可能不准确了","wordpress_id":191,"_content":"\nAndroid4.4在前天发布了，随着Android4.4的源代码的放出，相信会有更多的手机会慢慢的升级到Android4.4,作为苦逼的Android开发人员，我们需要保证我们的应用在Android4.4的兼容性，也就是可用性。现在这里就有一个比较大的更新会影响到我们的应用功能，他就是AlarmManager。\n\nAndroid宣称为了电源的使用效率，在Android4.4上位所有应用的Alarm服务使用批量启动的方式来处理相似的时间以激活设备。\n\n以前呢，是set一个Alarm，系统在到点的时候给你单独一个去激活设备启动你设置的服务;现在呢，不是这样了，而是按批的啦，一批激活那个时间点周围设置的差不多的Tigger Time的Alarm，比如你以前设置的是18：00准备自动备份数据，现在手机正好在18：05进行了一次批量的Alarm启动操作，而你设置的Alarm正好在这个时间点周围，那么你的Alarm也被启动了，比你预想的晚了5分钟。\n\n很多人想，这太不合理了啊，那我们根本就没有使用到Android4.4的新东西，只是用户的手机是Android4.4的系统，不能这么武断的就这么处理吧。所以Android还是给了我们兼容的方案的，只要你的App的targetSdkVersion<19,那么你以前设置的Alarm时间还是精准的，和以前一样使用。如果你想使用Android4.4及其以后版本的新功能，必须把targetSdkVersion设置成>=19,而又想要求Alarm的设置精准，那么怎么办呢，Android在4.4给我们提供了新的方法setExact来设置精准的时间。\n","source":"_posts/2013-11-02-android-4-4-alarm-manager-changed.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-11-02 15:46:47+00:00\nlayout: post\nslug: android-4-4-alarm-manager-changed\ntitle: 使用AlarmManager设置的定时服务在Android4.4上可能不准确了\nwordpress_id: 191\ncategories:\n- Android\ntags:\n- Android\n- API\n---\n\nAndroid4.4在前天发布了，随着Android4.4的源代码的放出，相信会有更多的手机会慢慢的升级到Android4.4,作为苦逼的Android开发人员，我们需要保证我们的应用在Android4.4的兼容性，也就是可用性。现在这里就有一个比较大的更新会影响到我们的应用功能，他就是AlarmManager。\n\nAndroid宣称为了电源的使用效率，在Android4.4上位所有应用的Alarm服务使用批量启动的方式来处理相似的时间以激活设备。\n\n以前呢，是set一个Alarm，系统在到点的时候给你单独一个去激活设备启动你设置的服务;现在呢，不是这样了，而是按批的啦，一批激活那个时间点周围设置的差不多的Tigger Time的Alarm，比如你以前设置的是18：00准备自动备份数据，现在手机正好在18：05进行了一次批量的Alarm启动操作，而你设置的Alarm正好在这个时间点周围，那么你的Alarm也被启动了，比你预想的晚了5分钟。\n\n很多人想，这太不合理了啊，那我们根本就没有使用到Android4.4的新东西，只是用户的手机是Android4.4的系统，不能这么武断的就这么处理吧。所以Android还是给了我们兼容的方案的，只要你的App的targetSdkVersion<19,那么你以前设置的Alarm时间还是精准的，和以前一样使用。如果你想使用Android4.4及其以后版本的新功能，必须把targetSdkVersion设置成>=19,而又想要求Alarm的设置精准，那么怎么办呢，Android在4.4给我们提供了新的方法setExact来设置精准的时间。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvle0023z1n16y3uekh1"},{"author":"飞雪无情","comments":1,"date":"2013-10-10T21:23:02.000Z","layout":"post","slug":"android-bool-preferences-storage-optimization","title":"Android布尔型配置存储优化","wordpress_id":184,"_content":"\n在Android开发的过程中，我们基本上都会遇到是否开启自动备份、是否保存账号、是否自动登陆、是否开启向导等这样的选项功能，对于这类功能，我们一般的做法是采用SharedPreferences类存储Boolean类型的配置文件来实现，比如是否第一次打开，我们会使用SharedPreferences存储Key为firset_time_open的Boolean值，在使用的时候我们取出该值进行判断即可。那么这么做有什么问题呢？问题就在于随着我们的Android产品越来越大，越来越复杂，你会发现我们使用了很多个这样的Boolean类型的配置，每一个配置对应一个key，会有很多个key值声明，并且存储的xml文件中也会有很多个bool的节点来保存我们的配置，这样一来我们会不太好维护，二来xml存储文件会越来越大，读写操作速度就会降低。\n\n其实Boolean值对于计算机来说就是0或者1,所以我们储存的boolean值就可以用位来表示，0代表false，1代表true。这样一个Long型的值就可以表示63个Boolean类型值的存储，而如果使用Boolean就需要63个Key，使用Long存储只需要1个Key就可以搞定。下面让我们看下Long最大值的二进制表示：\n\n    \n    //最高位表示正负\n    0111111111111111 1111111111111111\n    1111111111111111 1111111111111111\n\n\n每一位无非是0或者1,也就是我们的false或者true，那么只要我们规定好每一位表示的是什么含义就好了。比如第1位表示是否是第一次打开，第2位表示是否保存账号，这样在使用的时候，我们只需获取这个存储的Long值，然后看下它的第1位是0还是1就可以知道用户是不是第一次打开了，同理通过第2位是0还是1也可以知道用户是不是选择了保存账号。以此类推，你可以位3-63位定义不同的含义来实现产品中的功能。\n\n通过上面的分析，大家应该都已经了解了原理，也可能会看出关键的地方，就是我们怎么样设置每一位的值而又可以保证其他位的值不变呢，这是个关键。比如我们设置保存账号位true，那么你在设置的时候不能改变第1位是否第一次开发的值。想要实现这个功能，首先要设置好一个掩码(Mask),每一位都有自己的掩码，然后通过与或非操作来设置每一位的true或者false。这个掩码的规则就是：需要改变的那一位是1,其他位都0,这样才好进行设置等操作，比如第1位是否第一次打开和第2位是否保存账号的掩码就是：\n\n    \n    //第1位是否第一次打开掩码\n    0000000000000000 0000000000000000 \n    0000000000000000 0000000000000001\n    \n    //第2位是否保存账号掩码\n    0000000000000000 0000000000000000 \n    0000000000000000 0000000000000010\n\n\n\n    \n    \tprivate final static long MASK_FIRST_TIME_OPEN=1;\n    \tprivate final static long MASK_SAVE_ACCOUNT=1<<1;\n    \t//etc <<2\\<<3.....<<62;\n\n\n这样我们设置第1位为1的时候只需要让第1位的掩码和当前值进行或(|)操作即可，设置第1位为0的时候只需要把第1位先取反(~)然后和当前值进行与(&)操作即可：\n\n    \n    //设置第1位位1,或操作(|)\n    0000000000000000 0000000000000000 \n    0000000000000000 0000000000000001\n                                    |//或\n    0000000000000000 0000000000000000 \n    0000000000000000 0100000100000000\n                                    =//等于\n    0000000000000000 0000000000000000 \n    0000000000000000 0100000100000001\n    \n    //设置第1位位0,掩码取反(~)后与操作(&)\n    0000000000000000 0000000000000000 \n    0000000000000000 0000000000000001\n                                    ~//取反\n                                    =//等于\n    1111111111111111 1111111111111111 \n    1111111111111111 1111111111111110\n                                    &//与操作\n    0000000000000000 0000000000000000 \n    0000000000000000 0100000100000000\n                                    =//等于\n    0000000000000000 0000000000000000 \n    0000000000000000 0100000100000000\n\n\n\n    \n    \t/**\n    \t * 是否第一次打开\n    \t * @return\n    \t */\n    \tpublic static boolean isFirstTime(){\n    \t\treturn (getBooleanOneGroup()&MASK_FIRST_TIME_OPEN)!=0;\n    \t}\n    \t/**\n    \t * 设置是否第一次打开\n    \t * @param value\n    \t */\n    \tpublic static void setFirstTime(boolean value){\n    \t\tlong originValue=getBooleanOneGroup();\n    \t\tsetBooleanOneGroup(value?(MASK_FIRST_TIME_OPEN|originValue):(~MASK_FIRST_TIME_OPEN&originValue));\n    \t}\n\n\n上面的代码是Android中实现获取是否第一次打开 ，以及设置是否第一次打开值的实现。设置的原理上面已经说了，或者的原理相比简单多了，只需要把当前值和掩码做与(&)操作即可，结果不等于0就是true,等于0就是false。\n\n以前是以第1位为例子说明的实现方法，对于每一组来说可以有63位可供存储，每一组都是一个Long类型的存储配置，现第一次使用如下方式进行存储：\n\n    \n    \t//每组最大移位62位,第1组63个位使用完，可以再定义第二组\n    \tprivate final static String KEY_BOOLEAN_ONE_GROUP=\"boolean_one_group\";\n            //下面是第一组的布尔型设置，用完了可以有第二组、第三组等等\n    \tprivate static long getBooleanOneGroup(){\n    \t\treturn SP.getLong(KEY_BOOLEAN_ONE_GROUP, 0);\n    \t}\n    \tprivate static void setBooleanOneGroup(long value){\n    \t\tEDITOR.putLong(KEY_BOOLEAN_ONE_GROUP, value);\n    \t\tEDITOR.commit();\n    \t}\n\n\n上面是第一组的方式，第一组63个存储用完之后再按照相同结构定义第二组、第三组等等。下面给说第一组的第1位和第2位的完整代码实现，大家参照此格式进行扩充。\n\n    \n    public class BooleanPreferences {\n    \tprivate final static SharedPreferences SP=ApplicationContext.context.getSharedPreferences(\"boolean_preferences\", Context.MODE_PRIVATE);\n    \tprivate final static Editor EDITOR=SP.edit();\n    \n    \t//每组最大移位62位,第1组63个位使用完，可以再定义第二组\n    \tprivate final static String KEY_BOOLEAN_ONE_GROUP=\"boolean_one_group\";\n    \tprivate final static long MASK_FIRST_TIME_OPEN=1;\n    \tprivate final static long MASK_SAVE_ACCOUNT=1<<1;\n    \t//etc <<2\\<<3.....<<62;\n    \n    \t/**\n    \t * 是否第一次打开\n    \t * @return\n    \t */\n    \tpublic static boolean isFirstTime(){\n    \t\treturn (getBooleanOneGroup()&MASK_FIRST_TIME_OPEN)!=0;\n    \t}\n    \t/**\n    \t * 设置是否第一次打开\n    \t * @param value\n    \t */\n    \tpublic static void setFirstTime(boolean value){\n    \t\tlong originValue=getBooleanOneGroup();\n    \t\tsetBooleanOneGroup(value?(MASK_FIRST_TIME_OPEN|originValue):(~MASK_FIRST_TIME_OPEN&originValue));\n    \t}\n    \t/**\n    \t * 是否保存账号\n    \t * @return\n    \t */\n    \tpublic static boolean isSaveAccount(){\n    \t\treturn (getBooleanOneGroup()&MASK_SAVE_ACCOUNT)!=0;\n    \t}\n    \t/**\n    \t * 设置是否保存账号\n    \t * @param value\n    \t */\n    \tpublic static void setSaveAccount(boolean value){\n    \t\tlong originValue=getBooleanOneGroup();\n    \t\tsetBooleanOneGroup(value?(MASK_SAVE_ACCOUNT|originValue):(~MASK_SAVE_ACCOUNT&originValue));\n    \t}\n    \n    \t//下面是第一组的布尔型设置，用完了可以有第二组、第三组等等\n    \tprivate static long getBooleanOneGroup(){\n    \t\treturn SP.getLong(KEY_BOOLEAN_ONE_GROUP, 0);\n    \t}\n    \tprivate static void setBooleanOneGroup(long value){\n    \t\tEDITOR.putLong(KEY_BOOLEAN_ONE_GROUP, value);\n    \t\tEDITOR.commit();\n    \t}\n    }\n\n\n记住。每一位的Mask掩码不能重复，不然就会把其他位的值改变，影响程序的功能，所以要严格按照代码的规范顺序定义掩码，依次左移1位、左移2位、左移3位等等，一直到左移62位，然后开始定义第二组，再从1、左移1位、左移2位开始，依次类推。\n","source":"_posts/2013-10-11-android-bool-preferences-storage-optimization.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-10-11 05:23:02+00:00\nlayout: post\nslug: android-bool-preferences-storage-optimization\ntitle: Android布尔型配置存储优化\nwordpress_id: 184\ncategories:\n- Android\ntags:\n- Android\n---\n\n在Android开发的过程中，我们基本上都会遇到是否开启自动备份、是否保存账号、是否自动登陆、是否开启向导等这样的选项功能，对于这类功能，我们一般的做法是采用SharedPreferences类存储Boolean类型的配置文件来实现，比如是否第一次打开，我们会使用SharedPreferences存储Key为firset_time_open的Boolean值，在使用的时候我们取出该值进行判断即可。那么这么做有什么问题呢？问题就在于随着我们的Android产品越来越大，越来越复杂，你会发现我们使用了很多个这样的Boolean类型的配置，每一个配置对应一个key，会有很多个key值声明，并且存储的xml文件中也会有很多个bool的节点来保存我们的配置，这样一来我们会不太好维护，二来xml存储文件会越来越大，读写操作速度就会降低。\n\n其实Boolean值对于计算机来说就是0或者1,所以我们储存的boolean值就可以用位来表示，0代表false，1代表true。这样一个Long型的值就可以表示63个Boolean类型值的存储，而如果使用Boolean就需要63个Key，使用Long存储只需要1个Key就可以搞定。下面让我们看下Long最大值的二进制表示：\n\n    \n    //最高位表示正负\n    0111111111111111 1111111111111111\n    1111111111111111 1111111111111111\n\n\n每一位无非是0或者1,也就是我们的false或者true，那么只要我们规定好每一位表示的是什么含义就好了。比如第1位表示是否是第一次打开，第2位表示是否保存账号，这样在使用的时候，我们只需获取这个存储的Long值，然后看下它的第1位是0还是1就可以知道用户是不是第一次打开了，同理通过第2位是0还是1也可以知道用户是不是选择了保存账号。以此类推，你可以位3-63位定义不同的含义来实现产品中的功能。\n\n通过上面的分析，大家应该都已经了解了原理，也可能会看出关键的地方，就是我们怎么样设置每一位的值而又可以保证其他位的值不变呢，这是个关键。比如我们设置保存账号位true，那么你在设置的时候不能改变第1位是否第一次开发的值。想要实现这个功能，首先要设置好一个掩码(Mask),每一位都有自己的掩码，然后通过与或非操作来设置每一位的true或者false。这个掩码的规则就是：需要改变的那一位是1,其他位都0,这样才好进行设置等操作，比如第1位是否第一次打开和第2位是否保存账号的掩码就是：\n\n    \n    //第1位是否第一次打开掩码\n    0000000000000000 0000000000000000 \n    0000000000000000 0000000000000001\n    \n    //第2位是否保存账号掩码\n    0000000000000000 0000000000000000 \n    0000000000000000 0000000000000010\n\n\n\n    \n    \tprivate final static long MASK_FIRST_TIME_OPEN=1;\n    \tprivate final static long MASK_SAVE_ACCOUNT=1<<1;\n    \t//etc <<2\\<<3.....<<62;\n\n\n这样我们设置第1位为1的时候只需要让第1位的掩码和当前值进行或(|)操作即可，设置第1位为0的时候只需要把第1位先取反(~)然后和当前值进行与(&)操作即可：\n\n    \n    //设置第1位位1,或操作(|)\n    0000000000000000 0000000000000000 \n    0000000000000000 0000000000000001\n                                    |//或\n    0000000000000000 0000000000000000 \n    0000000000000000 0100000100000000\n                                    =//等于\n    0000000000000000 0000000000000000 \n    0000000000000000 0100000100000001\n    \n    //设置第1位位0,掩码取反(~)后与操作(&)\n    0000000000000000 0000000000000000 \n    0000000000000000 0000000000000001\n                                    ~//取反\n                                    =//等于\n    1111111111111111 1111111111111111 \n    1111111111111111 1111111111111110\n                                    &//与操作\n    0000000000000000 0000000000000000 \n    0000000000000000 0100000100000000\n                                    =//等于\n    0000000000000000 0000000000000000 \n    0000000000000000 0100000100000000\n\n\n\n    \n    \t/**\n    \t * 是否第一次打开\n    \t * @return\n    \t */\n    \tpublic static boolean isFirstTime(){\n    \t\treturn (getBooleanOneGroup()&MASK_FIRST_TIME_OPEN)!=0;\n    \t}\n    \t/**\n    \t * 设置是否第一次打开\n    \t * @param value\n    \t */\n    \tpublic static void setFirstTime(boolean value){\n    \t\tlong originValue=getBooleanOneGroup();\n    \t\tsetBooleanOneGroup(value?(MASK_FIRST_TIME_OPEN|originValue):(~MASK_FIRST_TIME_OPEN&originValue));\n    \t}\n\n\n上面的代码是Android中实现获取是否第一次打开 ，以及设置是否第一次打开值的实现。设置的原理上面已经说了，或者的原理相比简单多了，只需要把当前值和掩码做与(&)操作即可，结果不等于0就是true,等于0就是false。\n\n以前是以第1位为例子说明的实现方法，对于每一组来说可以有63位可供存储，每一组都是一个Long类型的存储配置，现第一次使用如下方式进行存储：\n\n    \n    \t//每组最大移位62位,第1组63个位使用完，可以再定义第二组\n    \tprivate final static String KEY_BOOLEAN_ONE_GROUP=\"boolean_one_group\";\n            //下面是第一组的布尔型设置，用完了可以有第二组、第三组等等\n    \tprivate static long getBooleanOneGroup(){\n    \t\treturn SP.getLong(KEY_BOOLEAN_ONE_GROUP, 0);\n    \t}\n    \tprivate static void setBooleanOneGroup(long value){\n    \t\tEDITOR.putLong(KEY_BOOLEAN_ONE_GROUP, value);\n    \t\tEDITOR.commit();\n    \t}\n\n\n上面是第一组的方式，第一组63个存储用完之后再按照相同结构定义第二组、第三组等等。下面给说第一组的第1位和第2位的完整代码实现，大家参照此格式进行扩充。\n\n    \n    public class BooleanPreferences {\n    \tprivate final static SharedPreferences SP=ApplicationContext.context.getSharedPreferences(\"boolean_preferences\", Context.MODE_PRIVATE);\n    \tprivate final static Editor EDITOR=SP.edit();\n    \n    \t//每组最大移位62位,第1组63个位使用完，可以再定义第二组\n    \tprivate final static String KEY_BOOLEAN_ONE_GROUP=\"boolean_one_group\";\n    \tprivate final static long MASK_FIRST_TIME_OPEN=1;\n    \tprivate final static long MASK_SAVE_ACCOUNT=1<<1;\n    \t//etc <<2\\<<3.....<<62;\n    \n    \t/**\n    \t * 是否第一次打开\n    \t * @return\n    \t */\n    \tpublic static boolean isFirstTime(){\n    \t\treturn (getBooleanOneGroup()&MASK_FIRST_TIME_OPEN)!=0;\n    \t}\n    \t/**\n    \t * 设置是否第一次打开\n    \t * @param value\n    \t */\n    \tpublic static void setFirstTime(boolean value){\n    \t\tlong originValue=getBooleanOneGroup();\n    \t\tsetBooleanOneGroup(value?(MASK_FIRST_TIME_OPEN|originValue):(~MASK_FIRST_TIME_OPEN&originValue));\n    \t}\n    \t/**\n    \t * 是否保存账号\n    \t * @return\n    \t */\n    \tpublic static boolean isSaveAccount(){\n    \t\treturn (getBooleanOneGroup()&MASK_SAVE_ACCOUNT)!=0;\n    \t}\n    \t/**\n    \t * 设置是否保存账号\n    \t * @param value\n    \t */\n    \tpublic static void setSaveAccount(boolean value){\n    \t\tlong originValue=getBooleanOneGroup();\n    \t\tsetBooleanOneGroup(value?(MASK_SAVE_ACCOUNT|originValue):(~MASK_SAVE_ACCOUNT&originValue));\n    \t}\n    \n    \t//下面是第一组的布尔型设置，用完了可以有第二组、第三组等等\n    \tprivate static long getBooleanOneGroup(){\n    \t\treturn SP.getLong(KEY_BOOLEAN_ONE_GROUP, 0);\n    \t}\n    \tprivate static void setBooleanOneGroup(long value){\n    \t\tEDITOR.putLong(KEY_BOOLEAN_ONE_GROUP, value);\n    \t\tEDITOR.commit();\n    \t}\n    }\n\n\n记住。每一位的Mask掩码不能重复，不然就会把其他位的值改变，影响程序的功能，所以要严格按照代码的规范顺序定义掩码，依次左移1位、左移2位、左移3位等等，一直到左移62位，然后开始定义第二组，再从1、左移1位、左移2位开始，依次类推。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvlg0027z1n1gayfu8jz"},{"author":"飞雪无情","comments":1,"date":"2013-10-06T18:24:25.000Z","layout":"post","slug":"ubuntu-sougou-pinyin-input-method","title":"Ubuntu下使用搜狗拼音输入法","wordpress_id":175,"_content":"\n对于经常使用Ubuntu操作系统并且不会使用五笔输入法的屌丝来说，选择一种好的拼音输入法能让你事半功倍。在window下我们都知道搜狗的输入法比较好用，更有一些用习惯了搜狗输入法的朋友想在Ubuntu等其他Linux发行版下也想使用搜狗输入法，这是完全可行的，通过Fcitx这个输入法框架就可以实现。\n\nFcitx [ˈfaɪtɪks] 是一个支持扩展的输入法框架。当前它支持 Linux 和 Unix 系统，例如 freebsd。它包括了三个内置的输入法引擎，拼音，区位和基于码表的输入法。详细介绍参见[fcitx-im.org](http://fcitx-im.org)。\n\n下面以Ubuntu为例介绍如何安装Fcitx，并且配置使用搜狗输入法，其他的Linux发行版的安装可以参考Fcitx官方网站。\n\n\n##  添加Fcitx源\n\n\n首先添加Fcitx的ppa源，使用如下命令添加：\n\n    \n    sudo add-apt-repository ppa:fcitx-team/nightly\n\n\n然后更新apt\n\n    \n    sudo apt-get update\n\n\n稍等一会就会提示更新完成。\n\n\n##  安装搜狗拼音输入法\n\n\n源更新完成后就可以安装搜狗输入法了，使用如下命令安装：\n\n    \n    sudo apt-get install fcitx-sogoupinyin\n\n\n在终端中输入以上命令完后回车就开始下载安装包进行安装了，根据你的网速不同所需的事件也不太一样，一般几分钟就好了，稍等一下。安装完成后就可以切换到我们刚刚安装的fcitx输入法，然后卸载原来使用的ibus输入法：\n\n    \n    #切换到Fcitx输入法\n    im-switch -s fcitx\n    #卸载原来的ibus输入法\n    sudo apt-get remove ibus\n\n\n然后重启电脑即可。重启后就可以看到搜狗输入法了，如果没有看到可以使用如下命令重启fcitx:\n\n    \n    sudo fcitx -r\n\n\n除此之外，你也可以安装google拼音输入法，步骤和搜狗的差不多，安装后可以在右上角的输入法管理那里切换输入法，也可以选择皮肤等等，fcitx是一个强大的输入法框架，有很多功能，自己可以尝试一下。\n","source":"_posts/2013-10-07-ubuntu-sougou-pinyin-input-method.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-10-07 02:24:25+00:00\nlayout: post\nslug: ubuntu-sougou-pinyin-input-method\ntitle: Ubuntu下使用搜狗拼音输入法\nwordpress_id: 175\ncategories:\n- Linux\ntags:\n- Linux\n- Ubuntu\n---\n\n对于经常使用Ubuntu操作系统并且不会使用五笔输入法的屌丝来说，选择一种好的拼音输入法能让你事半功倍。在window下我们都知道搜狗的输入法比较好用，更有一些用习惯了搜狗输入法的朋友想在Ubuntu等其他Linux发行版下也想使用搜狗输入法，这是完全可行的，通过Fcitx这个输入法框架就可以实现。\n\nFcitx [ˈfaɪtɪks] 是一个支持扩展的输入法框架。当前它支持 Linux 和 Unix 系统，例如 freebsd。它包括了三个内置的输入法引擎，拼音，区位和基于码表的输入法。详细介绍参见[fcitx-im.org](http://fcitx-im.org)。\n\n下面以Ubuntu为例介绍如何安装Fcitx，并且配置使用搜狗输入法，其他的Linux发行版的安装可以参考Fcitx官方网站。\n\n\n##  添加Fcitx源\n\n\n首先添加Fcitx的ppa源，使用如下命令添加：\n\n    \n    sudo add-apt-repository ppa:fcitx-team/nightly\n\n\n然后更新apt\n\n    \n    sudo apt-get update\n\n\n稍等一会就会提示更新完成。\n\n\n##  安装搜狗拼音输入法\n\n\n源更新完成后就可以安装搜狗输入法了，使用如下命令安装：\n\n    \n    sudo apt-get install fcitx-sogoupinyin\n\n\n在终端中输入以上命令完后回车就开始下载安装包进行安装了，根据你的网速不同所需的事件也不太一样，一般几分钟就好了，稍等一下。安装完成后就可以切换到我们刚刚安装的fcitx输入法，然后卸载原来使用的ibus输入法：\n\n    \n    #切换到Fcitx输入法\n    im-switch -s fcitx\n    #卸载原来的ibus输入法\n    sudo apt-get remove ibus\n\n\n然后重启电脑即可。重启后就可以看到搜狗输入法了，如果没有看到可以使用如下命令重启fcitx:\n\n    \n    sudo fcitx -r\n\n\n除此之外，你也可以安装google拼音输入法，步骤和搜狗的差不多，安装后可以在右上角的输入法管理那里切换输入法，也可以选择皮肤等等，fcitx是一个强大的输入法框架，有很多功能，自己可以尝试一下。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvlk002az1n1i50gkifp"},{"author":"飞雪无情","comments":1,"date":"2013-10-05T23:11:56.000Z","layout":"post","slug":"resolve-android-sdk-manager-can-not-update","title":"解决Android SDK Manager不能更新的问题","wordpress_id":171,"_content":"\n今天打算更新到Android4.3,看看里面的新的API，DOC什么的，但是打开Android SDK Manager后发现不能更新，fetching更新配置文件的时候，都不能获取最新的更新信息。以前还可以以呢，看来这个十一又屏蔽了google拉。\n\n针对这个情况，我第一反应就是使用代理，我本机做的有goagent,想直接用。点击Android SDK Manager的Tools，选中Options，配置里面的代理ip和端口，然后重新启动打开，这时候可以正常fetch了，但是在下载的提示_SSL hostname in certificate didn't match: <dl-ssl.google.com> != <www.google.com> OR <www.google.com>_，看说明提示是ssl证书的hostname不匹配，不能用，这个情况不知道是怎么回事，应该是本机里的证书匹配不上，又没有dl-ssl.google.com的证书，所以不能使用https下载。\n\n不能使用https下载，我们还可以使用http下载。Android doc里也说了，如果使用https下载不了，可以选择使用http下载，只需要在Options里勾选Fore Https...那一个选项即可。。然后重新下载，发现还是下载不了。提示downloading interupt，下载被中断了，这个估计是google对goagent代理有些什么限制或者goagent配置的哪里不对。\n\n最后不得已采取更改hosts的方式。打开终端，使用命令：\n\n    \n    sudo vim /etc/hosts\n\n\n然后输入 密码打开，把以前hosts配置粘贴上去保存即可。\n\n    \n    203.208.46.146 www.google.com\n    #以前是两个android更新下载的地址\n    203.208.46.146 dl.google.com\n    203.208.46.146 dl-ssl.google.com\n\n\n以前配置后保存就可以正常更新下载android。其实更改hosts的方式可以解决很多被墙不能访问的网站，比如facebook等，需要的朋友可以在网站找下相关网站的hosts，然后参考以上配置记录。window系统的host在C:\\WINDOWS\\system32\\drivers\\etc目录下。\n","source":"_posts/2013-10-06-resolve-android-sdk-manager-can-not-update.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-10-06 07:11:56+00:00\nlayout: post\nslug: resolve-android-sdk-manager-can-not-update\ntitle: 解决Android SDK Manager不能更新的问题\nwordpress_id: 171\ncategories:\n- Android\ntags:\n- Android\n- Linux\n- Ubuntu\n---\n\n今天打算更新到Android4.3,看看里面的新的API，DOC什么的，但是打开Android SDK Manager后发现不能更新，fetching更新配置文件的时候，都不能获取最新的更新信息。以前还可以以呢，看来这个十一又屏蔽了google拉。\n\n针对这个情况，我第一反应就是使用代理，我本机做的有goagent,想直接用。点击Android SDK Manager的Tools，选中Options，配置里面的代理ip和端口，然后重新启动打开，这时候可以正常fetch了，但是在下载的提示_SSL hostname in certificate didn't match: <dl-ssl.google.com> != <www.google.com> OR <www.google.com>_，看说明提示是ssl证书的hostname不匹配，不能用，这个情况不知道是怎么回事，应该是本机里的证书匹配不上，又没有dl-ssl.google.com的证书，所以不能使用https下载。\n\n不能使用https下载，我们还可以使用http下载。Android doc里也说了，如果使用https下载不了，可以选择使用http下载，只需要在Options里勾选Fore Https...那一个选项即可。。然后重新下载，发现还是下载不了。提示downloading interupt，下载被中断了，这个估计是google对goagent代理有些什么限制或者goagent配置的哪里不对。\n\n最后不得已采取更改hosts的方式。打开终端，使用命令：\n\n    \n    sudo vim /etc/hosts\n\n\n然后输入 密码打开，把以前hosts配置粘贴上去保存即可。\n\n    \n    203.208.46.146 www.google.com\n    #以前是两个android更新下载的地址\n    203.208.46.146 dl.google.com\n    203.208.46.146 dl-ssl.google.com\n\n\n以前配置后保存就可以正常更新下载android。其实更改hosts的方式可以解决很多被墙不能访问的网站，比如facebook等，需要的朋友可以在网站找下相关网站的hosts，然后参考以上配置记录。window系统的host在C:\\WINDOWS\\system32\\drivers\\etc目录下。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvln002ez1n1lk5om93e"},{"author":"飞雪无情","comments":1,"date":"2013-03-28T20:06:37.000Z","layout":"post","slug":"ubuntu-saned-disabled","title":"ubuntu启动错误saned disabled edit /etc/default/saned checking battery state","wordpress_id":39,"_content":"\n昨天Ubuntu 12.04LTS 64位版本升级内核后，发现图形界面启动不了。\n\n然后重启，按上下键查看启动信息，发现卡在了saned disabled edit /etc/default/saned。。\n\nGoole了一把，发现是没有gnome-shell.于是就使用CTRL+ALT+F1进入tty1，通过\n\nsudo apt-get install gnome-shell安装，然后sudo reboot重启。\n\n发现还是进入不了图形界面，再次查看日志，发现卡在了 checking battery state\n\n这个原因是因为gdm的问题，安装gdm\n\nsudo apt-get install gdm\n\n在安装过程中会有配置选择，我们选择LightDM，\n\n然后sudo reboot即可。。\n\n然后就如愿的进入了图形界面。。。\n","source":"_posts/2013-03-29-ubuntu-saned-disabled.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-03-29 04:06:37+00:00\nlayout: post\nslug: ubuntu-saned-disabled\ntitle: ubuntu启动错误saned disabled edit /etc/default/saned checking battery state\nwordpress_id: 39\ncategories:\n- Linux\ntags:\n- Ubuntu\n---\n\n昨天Ubuntu 12.04LTS 64位版本升级内核后，发现图形界面启动不了。\n\n然后重启，按上下键查看启动信息，发现卡在了saned disabled edit /etc/default/saned。。\n\nGoole了一把，发现是没有gnome-shell.于是就使用CTRL+ALT+F1进入tty1，通过\n\nsudo apt-get install gnome-shell安装，然后sudo reboot重启。\n\n发现还是进入不了图形界面，再次查看日志，发现卡在了 checking battery state\n\n这个原因是因为gdm的问题，安装gdm\n\nsudo apt-get install gdm\n\n在安装过程中会有配置选择，我们选择LightDM，\n\n然后sudo reboot即可。。\n\n然后就如愿的进入了图形界面。。。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvlr002jz1n1jevwimgx"},{"author":"飞雪无情","comments":1,"date":"2013-02-22T07:47:39.000Z","layout":"post","slug":"android-holo-theme-cts","title":"关于Android的Holo主题","wordpress_id":40,"_content":"\n\n\n       Android曾经为了优化用户体验，把原生的Holo主题作为Android CTS兼容性测试的一部分，这样每家手机厂商在生产手机的时候都将保留该主题，便于开发者开发出在各个分辨率和机型上兼容的应用。。\n\n但是在我们最近产品的使用Holo主题的时候发现并非如此，有的用户的手机使用该主题后应用Crash，提示有个别资源找不到，还有的手机在使用后整个界面黑屏，还有的就是样式等搭配不合理无法使用。\n\n\n\n\t\n  1. 资源找不到Crash的情况，目前不知道这家厂商生产的手机怎么通过了CTS测试，要么就没有遵循此规则。\n\n\t\n  2. 这个目前还不知道什么问题。\n\n\t\n  3. 样式搭配不合理，这个是可以通过CTS测试的，因为你该有的都有，至于你使用的这个样式是否合理，\n\n\nCTS是不管的，所以就出现了很多背景和文字颜色一样的情况，导致完全看不到文字。。\n最后说明的虽然Android要求了Holo主题作为CTS的一部分，不过还有很多手机对此支持不太好，所以还是尽量不要用该主题，如果需要该主题里的一些定义，最好是把该定义单独复制出来，作为当时默认主题的一部分来使用。。。\n\n多说一点，现在的各种东西，只要进了国内，那就是百家齐放，各种各样，你这样作，它那样做，什么协议，什么规则，什么测试，全不顾了，赚钱才是王道，深圳很多更可恶的是改了别人的东西，说是自己开发的，完全不一样，又重新起了个名字就准备上市什么的拉。。还有国内的Android市场，看那个混乱的阿，各种恶意竞争，你搞我，我抓你，玩的不亦乐乎。。你们这么做，能活多久呢？什么时候能真正做出来自己的东西呢？\n\n\n","source":"_posts/2013-02-22-android-holo-theme-cts.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-02-22 15:47:39+00:00\nlayout: post\nslug: android-holo-theme-cts\ntitle: 关于Android的Holo主题\nwordpress_id: 40\ncategories:\n- Android\ntags:\n- Android\n---\n\n\n\n       Android曾经为了优化用户体验，把原生的Holo主题作为Android CTS兼容性测试的一部分，这样每家手机厂商在生产手机的时候都将保留该主题，便于开发者开发出在各个分辨率和机型上兼容的应用。。\n\n但是在我们最近产品的使用Holo主题的时候发现并非如此，有的用户的手机使用该主题后应用Crash，提示有个别资源找不到，还有的手机在使用后整个界面黑屏，还有的就是样式等搭配不合理无法使用。\n\n\n\n\t\n  1. 资源找不到Crash的情况，目前不知道这家厂商生产的手机怎么通过了CTS测试，要么就没有遵循此规则。\n\n\t\n  2. 这个目前还不知道什么问题。\n\n\t\n  3. 样式搭配不合理，这个是可以通过CTS测试的，因为你该有的都有，至于你使用的这个样式是否合理，\n\n\nCTS是不管的，所以就出现了很多背景和文字颜色一样的情况，导致完全看不到文字。。\n最后说明的虽然Android要求了Holo主题作为CTS的一部分，不过还有很多手机对此支持不太好，所以还是尽量不要用该主题，如果需要该主题里的一些定义，最好是把该定义单独复制出来，作为当时默认主题的一部分来使用。。。\n\n多说一点，现在的各种东西，只要进了国内，那就是百家齐放，各种各样，你这样作，它那样做，什么协议，什么规则，什么测试，全不顾了，赚钱才是王道，深圳很多更可恶的是改了别人的东西，说是自己开发的，完全不一样，又重新起了个名字就准备上市什么的拉。。还有国内的Android市场，看那个混乱的阿，各种恶意竞争，你搞我，我抓你，玩的不亦乐乎。。你们这么做，能活多久呢？什么时候能真正做出来自己的东西呢？\n\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvls002mz1n12nbpbjdg"},{"author":"飞雪无情","comments":1,"date":"2013-01-28T08:19:58.000Z","layout":"post","slug":"android-layout-height-fail","title":"Android Layout的layout_height等属性为什么会不起作用？","wordpress_id":41,"_content":"\n\n\n      有的时候，我们配置好的布局文件，在加载完成添加到我们的Activity中后发现，并没有安装我们设置的属性来布局，比为我们设置了android:layout_marginTop=\"100dip\"，但是运行程序后发现一点作用都没有，相似的还有layout_height等以android:layout_开头的属性设置都没有作用，这类问题以我们使用Adapter的作为数据源的时候作用居多，因为Adapter里有一个方法是getView,这个返回的VIew是一个从XML布局里加载的，一般如下：\n\n    \n    if(convertView==null){\n    convertView=LayoutInflater.from(mContext).inflate(R.layout.main, null);\n    }\n    return convertView;\n\n\n\n\n\n\n\n      问题恰恰出在我们的LayoutInflater.from(mContext).inflate(R.layout.main, null);这句代码上，在使用inflate的时候，如果第二个参数(View root)为null,那么将不会加载你的布局文件里的最顶层的那个布局节点的布局相关配置（就是以android:layout_开头的属性）..我们可以看下该方法的实现来说明一下，通过查找源代码，inflate的实现都在这个public View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot) 方法里定义。。其中一段：\n\n\n\n\n\n\n\n    \n    if (root != null) {\n       if (DEBUG) {\n          System.out.println(\"Creating params from root: \" +root);\n       }\n       // Create layout params that match root, if supplied\n       params = root.generateLayoutParams(attrs);\n       if (!attachToRoot) {\n           // Set the layout params for temp if we are not\n            // attaching. (If we are, we use addView, below)\n            temp.setLayoutParams(params);\n        }\n    }\n\n\n可以看到，当root为null的时候是不会执行params = root.generateLayoutParams(attrs);这段代码的，这段代码就是把xml里的布局配置转为LayoutParams,换句说就是加载我们配置的布局属性，以供布局类（FrameLayout等）在onLayout的时候控制View的大小、位置、对齐等等。。以FrameLayout为例，看下它的generateLayoutParams(attrs)方法。\n\n\n\n\n\n\n\n\n    \n    public LayoutParams generateLayoutParams(AttributeSet attrs) {\n            return new FrameLayout.LayoutParams(getContext(), attrs);        \n        }\n\n\n\n\n\n\n\n      很简单，构造了一个FrameLayout.LayoutParams类，该类集成了MarginParams，增加了一个gravity对其的属性配置。。。\n\n\n\n\n\n\n\n      在这里，如果要自定义自己的VIewroup，并且该ViewGroup有一些自定义控制布局的属性设置，就可以通过集成View.MarginParams来扩展布局配置，然后重写generateLayoutParams方法，这样系统框架就会自动使用该布局读取我们在xml中配置的布局属性来控制我们的VIew的位置。。\n\n\n\n\n\n\n\n      基于以上分析，我们在使用LayoutInflate的inflate方法的时候一定要保证root参数不能为null，其实这个root就是父View的意思，就是说你把xml转换为一个VIew的时候，该VIew的Parent是root，如果你不想把该View添加到该root里，那么让第三个参数 attachToRoot为false，如果要添加则为true.\n\n\n\n\n\n\n\n      说到这个问题了，其实还有一些布局，他们的参数配置要满足一定的条件才会起作用，比如FrameLayout里的View，你要想它的leftMargin生效，必须指定它的layout_gravity为left，同理right对应rightMargin.top和bottom也一样。。在使用时注意即可，多看看源代码。要不然就会莫名起名，不知道哪里的问题。\n\n\n\n\n\n\n\nViewGroup的三条线:\n\n\n\n\n\n\n\n\n\t\n  1. onMeasure 测量View的大小\n\n\t\n  2. onLayout 对View的布局进行控制\n\n\t\n  3. draw绘制该View，drawChild绘制子VIew\n\n\n\n","source":"_posts/2013-01-28-android-layout-height-fail.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-01-28 16:19:58+00:00\nlayout: post\nslug: android-layout-height-fail\ntitle: Android Layout的layout_height等属性为什么会不起作用？\nwordpress_id: 41\ncategories:\n- Android\ntags:\n- Android\n---\n\n\n\n      有的时候，我们配置好的布局文件，在加载完成添加到我们的Activity中后发现，并没有安装我们设置的属性来布局，比为我们设置了android:layout_marginTop=\"100dip\"，但是运行程序后发现一点作用都没有，相似的还有layout_height等以android:layout_开头的属性设置都没有作用，这类问题以我们使用Adapter的作为数据源的时候作用居多，因为Adapter里有一个方法是getView,这个返回的VIew是一个从XML布局里加载的，一般如下：\n\n    \n    if(convertView==null){\n    convertView=LayoutInflater.from(mContext).inflate(R.layout.main, null);\n    }\n    return convertView;\n\n\n\n\n\n\n\n      问题恰恰出在我们的LayoutInflater.from(mContext).inflate(R.layout.main, null);这句代码上，在使用inflate的时候，如果第二个参数(View root)为null,那么将不会加载你的布局文件里的最顶层的那个布局节点的布局相关配置（就是以android:layout_开头的属性）..我们可以看下该方法的实现来说明一下，通过查找源代码，inflate的实现都在这个public View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot) 方法里定义。。其中一段：\n\n\n\n\n\n\n\n    \n    if (root != null) {\n       if (DEBUG) {\n          System.out.println(\"Creating params from root: \" +root);\n       }\n       // Create layout params that match root, if supplied\n       params = root.generateLayoutParams(attrs);\n       if (!attachToRoot) {\n           // Set the layout params for temp if we are not\n            // attaching. (If we are, we use addView, below)\n            temp.setLayoutParams(params);\n        }\n    }\n\n\n可以看到，当root为null的时候是不会执行params = root.generateLayoutParams(attrs);这段代码的，这段代码就是把xml里的布局配置转为LayoutParams,换句说就是加载我们配置的布局属性，以供布局类（FrameLayout等）在onLayout的时候控制View的大小、位置、对齐等等。。以FrameLayout为例，看下它的generateLayoutParams(attrs)方法。\n\n\n\n\n\n\n\n\n    \n    public LayoutParams generateLayoutParams(AttributeSet attrs) {\n            return new FrameLayout.LayoutParams(getContext(), attrs);        \n        }\n\n\n\n\n\n\n\n      很简单，构造了一个FrameLayout.LayoutParams类，该类集成了MarginParams，增加了一个gravity对其的属性配置。。。\n\n\n\n\n\n\n\n      在这里，如果要自定义自己的VIewroup，并且该ViewGroup有一些自定义控制布局的属性设置，就可以通过集成View.MarginParams来扩展布局配置，然后重写generateLayoutParams方法，这样系统框架就会自动使用该布局读取我们在xml中配置的布局属性来控制我们的VIew的位置。。\n\n\n\n\n\n\n\n      基于以上分析，我们在使用LayoutInflate的inflate方法的时候一定要保证root参数不能为null，其实这个root就是父View的意思，就是说你把xml转换为一个VIew的时候，该VIew的Parent是root，如果你不想把该View添加到该root里，那么让第三个参数 attachToRoot为false，如果要添加则为true.\n\n\n\n\n\n\n\n      说到这个问题了，其实还有一些布局，他们的参数配置要满足一定的条件才会起作用，比如FrameLayout里的View，你要想它的leftMargin生效，必须指定它的layout_gravity为left，同理right对应rightMargin.top和bottom也一样。。在使用时注意即可，多看看源代码。要不然就会莫名起名，不知道哪里的问题。\n\n\n\n\n\n\n\nViewGroup的三条线:\n\n\n\n\n\n\n\n\n\t\n  1. onMeasure 测量View的大小\n\n\t\n  2. onLayout 对View的布局进行控制\n\n\t\n  3. draw绘制该View，drawChild绘制子VIew\n\n\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvlu002pz1n1odl56s9k"},{"author":"飞雪无情","comments":1,"date":"2013-01-04T20:15:14.000Z","layout":"post","slug":"android-viewgroup-setdescendantfocusability","title":"Android ViewGroup.setDescendantFocusability函数","wordpress_id":42,"_content":"\n\n这个函数是在ViewGroup里定义的，主要用于控制child View获取焦点的能力，比如是否阻止child View获取焦点。\n\n他有三个常量可供设置\n\n\n\n\t\n  1. FOCUS_BEFORE_DESCENDANTS ViewGroup本身先对焦点进行处理，如果没有处理则分发给child View进行处理\n\n\t\n  2. FOCUS_AFTER_DESCENDANTS 先分发给Child View进行处理，如果所有的Child View都没有处理，则自己再处理\n\n\t\n  3. FOCUS_BLOCK_DESCENDANTS ViewGroup本身进行处理，不管是否处理成功，都不会分发给ChildView进行处理\n\n\n\n\n    我们看下这个方法的实现\n\n\n\n\n\n\n    \n    public void setDescendantFocusability(int focusability) {\n            switch (focusability) {\n                case FOCUS_BEFORE_DESCENDANTS:\n                case FOCUS_AFTER_DESCENDANTS:\n                case FOCUS_BLOCK_DESCENDANTS:\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"must be one of FOCUS_BEFORE_DESCENDANTS, \"\n                            + \"FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS\");\n            }\n            mGroupFlags &= ~FLAG_MASK_FOCUSABILITY;\n            mGroupFlags |= (focusability & FLAG_MASK_FOCUSABILITY);\n        }\n\n\n可以看到，只有这三个常量可以设置，不是这三个常量会抛出异常的。\n\n设置后，会在requestFocus(int direction, Rect previouslyFocusedRect) 方法里根据设置进行相应的处理。来看下实现\n\n\n\n\n\n    \n    public boolean requestFocus(int direction, Rect previouslyFocusedRect) {\n            if (DBG) {\n                System.out.println(this + \" ViewGroup.requestFocus direction=\"\n                        + direction);\n            }\n            int descendantFocusability = getDescendantFocusability();\n    \n            switch (descendantFocusability) {\n                case FOCUS_BLOCK_DESCENDANTS:\n                    return super.requestFocus(direction, previouslyFocusedRect);\n                case FOCUS_BEFORE_DESCENDANTS: {\n                    final boolean took = super.requestFocus(direction, previouslyFocusedRect);\n                    return took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect);\n                }\n                case FOCUS_AFTER_DESCENDANTS: {\n                    final boolean took = onRequestFocusInDescendants(direction, previouslyFocusedRect);\n                    return took ? took : super.requestFocus(direction, previouslyFocusedRect);\n                }\n                default:\n                    throw new IllegalStateException(\"descendant focusability must be \"\n                            + \"one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS \"\n                            + \"but is \" + descendantFocusability);\n            }\n        }\n\n\n通过这里的实现可以看到上面定义的三个常量设置的意思。。\n","source":"_posts/2013-01-05-android-viewgroup-setdescendantfocusability.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2013-01-05 04:15:14+00:00\nlayout: post\nslug: android-viewgroup-setdescendantfocusability\ntitle: Android ViewGroup.setDescendantFocusability函数\nwordpress_id: 42\ncategories:\n- Android\ntags:\n- Android\n---\n\n\n这个函数是在ViewGroup里定义的，主要用于控制child View获取焦点的能力，比如是否阻止child View获取焦点。\n\n他有三个常量可供设置\n\n\n\n\t\n  1. FOCUS_BEFORE_DESCENDANTS ViewGroup本身先对焦点进行处理，如果没有处理则分发给child View进行处理\n\n\t\n  2. FOCUS_AFTER_DESCENDANTS 先分发给Child View进行处理，如果所有的Child View都没有处理，则自己再处理\n\n\t\n  3. FOCUS_BLOCK_DESCENDANTS ViewGroup本身进行处理，不管是否处理成功，都不会分发给ChildView进行处理\n\n\n\n\n    我们看下这个方法的实现\n\n\n\n\n\n\n    \n    public void setDescendantFocusability(int focusability) {\n            switch (focusability) {\n                case FOCUS_BEFORE_DESCENDANTS:\n                case FOCUS_AFTER_DESCENDANTS:\n                case FOCUS_BLOCK_DESCENDANTS:\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"must be one of FOCUS_BEFORE_DESCENDANTS, \"\n                            + \"FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS\");\n            }\n            mGroupFlags &= ~FLAG_MASK_FOCUSABILITY;\n            mGroupFlags |= (focusability & FLAG_MASK_FOCUSABILITY);\n        }\n\n\n可以看到，只有这三个常量可以设置，不是这三个常量会抛出异常的。\n\n设置后，会在requestFocus(int direction, Rect previouslyFocusedRect) 方法里根据设置进行相应的处理。来看下实现\n\n\n\n\n\n    \n    public boolean requestFocus(int direction, Rect previouslyFocusedRect) {\n            if (DBG) {\n                System.out.println(this + \" ViewGroup.requestFocus direction=\"\n                        + direction);\n            }\n            int descendantFocusability = getDescendantFocusability();\n    \n            switch (descendantFocusability) {\n                case FOCUS_BLOCK_DESCENDANTS:\n                    return super.requestFocus(direction, previouslyFocusedRect);\n                case FOCUS_BEFORE_DESCENDANTS: {\n                    final boolean took = super.requestFocus(direction, previouslyFocusedRect);\n                    return took ? took : onRequestFocusInDescendants(direction, previouslyFocusedRect);\n                }\n                case FOCUS_AFTER_DESCENDANTS: {\n                    final boolean took = onRequestFocusInDescendants(direction, previouslyFocusedRect);\n                    return took ? took : super.requestFocus(direction, previouslyFocusedRect);\n                }\n                default:\n                    throw new IllegalStateException(\"descendant focusability must be \"\n                            + \"one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS \"\n                            + \"but is \" + descendantFocusability);\n            }\n        }\n\n\n通过这里的实现可以看到上面定义的三个常量设置的意思。。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvlw002sz1n12qssp3f6"},{"author":"飞雪无情","comments":1,"date":"2011-12-10T01:12:00.000Z","layout":"post","slug":"android-float-widget","title":"基于Android的浮动组件，可以用于应用中的新功能展示等等。","wordpress_id":43,"_content":"\n## 前言\n\n\n在开发Android应用时,加新功能是必不可少的，我们加入了新的功能，有的一看界面就可以看出来，但是有的新功能就比较隐蔽，也就是用户很难知道你添加了这个新功能，这个时候就需要用户在打开我们的应用时给出一些提示，说明我们在哪里添加了新功能，点击哪里可以看到这个新功能。这时我们第一时间想到的可能是Toast，因为它用法简单，又不影响用户操作，但是它有个缺点，就是不能明确的指示是哪里添加了新功能，除非你用文字描述出来。为此，我基于Toast编写了一个小组件FloatTextToast（下面遇到的这个名字代替我写的这个组件），他和Toast的用法一样简单，并且弥补了Toast的缺点，也更显得更好看。\n\n\n## 效果图\n\n\n\n\n![](http://hi.csdn.net/attachment/201112/10/0_13234942045Irb.gif)\n\n\n\n\n## 你可以学到\n\n\n\n\n\n\n\n\n\t\n  1. Toast的基本用法\n\n\t\n  2. Android的消息机制，如何创建自己的消息队列\n\n\t\n  3. 怎样在Activity启动时获取一个View的width、height、top、left等属性\n\n\n\n\n## 基本思路\n\n\n\n\n\n\n\n\n\n\n\n\t\n  1. 首先你要有一个处理好的9 PNG的图片，用于自适应文字显示，关于9 PNG处理可以参考Android Doc\n\n\t\n  2. 要显示在哪个View的下面，就要知道这个目标View的位置\n\n\t\n  3. 把要显示的文本放在一个TextView里，使用Toast的setView方法设置Toast要显示的View\n\n\t\n  4. 根据得到的位置，最后就是使用Toast的setGravity方法把要显示的内容放到正确的位置显示出来即可。\n\n\n\n\n总的来说首先就是要知道目标View，根据targetView计算出要显示提示的位置，然后根据位置使用Toast把提示的文本显示出来。但是这里有几个难点，下面就一一解决\n\n\n\n\n\n\n\n## Activity加载完成时获取targetVIew的宽高和位置属性\n\n\n\n\n\n\n我们加入了新的功能提示，自然会在用户打开这个界面的时候就提示，但是在UI没有渲染完成绑定倒Window上的时候，是不能获取倒targetView的width、height和position的，那么我们怎么才能知道targetView的这些属性呢？Activity的onAttachedToWindow回调方法是不能用的，况且它是在API 5加上的，以前的API中并没有。不过我们还有一种方法，那就是在显示提示的时候获取targetView的属性，如果获取不到（为0）就一直获取，直到获取到为止，这其实是一个轮询。为了达到这一目的，我们在开发者调用FloatTextToast.show()的时候使用Android的Message机制轮询获取一个targetView的属性，如果获取到，就会显示提示文字了。在此之前先看下FloatTextToast构造函数，可以对它有个大概的了解，防止后面的代码中出现的成员变量不认识。\n\n    \n    private FloatTextToast(Context context,View targetView) {\n    \t\tthis.mTargetView = targetView;\n    \t\tthis.mContext= context;\n    \t\tmToast=new Toast(mContext);\n    \t\tmContentView=new TextView(mContext);\n    \t\tmContentView.setBackgroundResource(R.drawable.float_text_toast_bg);\n    \t\tmContentView.setTextColor(Color.BLACK);\n    \t\tmContentView.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);\n    \t\tmToast.setView(mContentView);\n    \n    \t\t//初始化一个Handler线程\n    \t\tmHandlerThread=new HandlerThread(\"FloatTextToast\");\n    \t\tmHandlerThread.start();\n    \t\tmHandler=new FloatTextToastHandler(mHandlerThread.getLooper());\n    \t}\n\n\n\n\n\n\n\n## 自定义自己的消息循环机制\n\n\n\n\n要想在一个自定义的组件中使用Message机制，一定要有自己的Looper机制，我们不能使用Activity的Looper，因为主Looper可能会有其他的Message需要处理，这就会导致我们的show方法会延迟调用，这样效果就不好了，所以要有一个专门的Looper来处理此Message。要声明自己的Looper，就需要HandlerThread这个类的配合了，这可是个好东西，使用它你会很容易的创建一个自己的线程用于处理你Message。使用方法很简单，如下代码：\n\n\n\n\n\n\n    \n    //初始化一个Handler线程\n    \t\tmHandlerThread=new HandlerThread(\"FloatTextToast\");\n    \t\tmHandlerThread.start();\n    \t\tmHandler=new FloatTextToastHandler(mHandlerThread.getLooper());\n\n\n这样就声明了一个HandlerThread并且让它运行，运行之后我们就可以获取一个属于该Thread的Looper，然后把Message发送给这个Looper，那么这个线程就可以处理你发送的消息了。。看看我们的自定义Handler\n\n\n\n\n\n\n\n\n    \n    private class FloatTextToastHandler extends Handler{\n    \n    \t\tpublic FloatTextToastHandler(Looper looper) {\n    \t\t\tsuper(looper);\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic void handleMessage(Message msg) {\n    \t\t\tswitch(msg.what){\n    \t\t\tcase WHAT_SHOW:\n    \t\t\t\tshowInHandler();\n    \t\t\t}\n    \t\t}\n    \n    \t}\n\n\n它需要传递一个Looper作为构造参数声明，意思就是使用这个Looper处理我发send的Message的意思。上面的代码\n\n\n\n\n\n\n\n\n    \n    mHandler=new FloatTextToastHandler(mHandlerThread.getLooper());\n\n\n正是我们使用自己开启的线程处理我们的Message的意思。下面看下我们的showInHandler()方法是怎么处理的。\n\n\n\n\n\n\n\n\n    \n    /**在Handler调用的show方法，主要为了等待{@link #mTargetView}的位置*/\n    \tprivate void showInHandler(){\n    \t\tint[] targetPos=getTargetViewPos();\n    \t\tif(targetPos[0]==0&&targetPos[1]==0){\n    \t\t\tmHandler.sendEmptyMessageDelayed(WHAT_SHOW, 100);\n    \t\t}else{\n    \t\t\tfinal Rect contentPos=getContentViewPos(targetPos);\n    \t\t\tmToast.setGravity(Gravity.LEFT|Gravity.TOP, contentPos.left, contentPos.top);\n    \t\t\tmToast.show();\n    \t\t}\n    \t}\n\n\n该方法其实就是在获取targetVIew的位置，如果获取不到，则向自定义的Looper里发送一个Message重新调用该函数，如果得到了位置，那么就调用Toast的setGravity方法设置好要显示文本的位置，然后显示即可。\n\n\n\n\n\n\n## 获取要显示文本的位置\n\n\n\n\n\n\n要获取显示的位置，就要知道targetVIew的位置以及它的宽、高，这样就能计算要显示文本的位置了。View组件都有一个函数，可以把自己在Window里的坐标转换为一个数组。\n\n    \n    private int[] getTargetViewPos(){\n    \t\tfinal int[] targetPos=new int[2];\n    \t\tmTargetView.getLocationInWindow(targetPos);\n    \t\treturn targetPos;\n    \t}\n\n\n这样，就返回了targetView的xy坐标了。光有targetView的坐标还不够，还要有contentView最终要显示的位置。\n\n\n\n\n\n\n\n\n    \n    /**\n    \t * 计算获取浮动文本显示的位置，把浮动文本放在targetView的中心处\n    \t * @return 一个包含top和left的Rect\n    \t */\n    \tprivate  Rect getContentViewPos(int[] targetPos){\n    \t\tfinal Rect windowVisibleRect=new Rect();\n    \t\tfinal View targetView=mTargetView;\n    \t\tfinal TextView contentView=mContentView;\n    \t\t//状态栏高度\n    \t\ttargetView.getWindowVisibleDisplayFrame(windowVisibleRect);\n    \t\tint statusBarHeight=windowVisibleRect.top;\n    \n    \t\t//背景图那个三角箭头的位置\n    \t\tfinal TextPaint textPaint=contentView.getPaint();\n    \t\tint contentW=(int)textPaint.measureText((String)contentView.getText());\n    \t\tint arrowPos=(int)(contentW*(30.0/160));\n    \n    \t\tfinal Rect rect = new Rect();\n            rect.left = targetPos[0]+targetView.getWidth()/2-arrowPos;\n            rect.top = targetPos[1]-statusBarHeight + targetView.getHeight();\n            return rect;\n    \t}\n\n\n这个函数的功能就是让文本显示在targetView的下方的横向中间的位置，也就是文本的背景尖角三角要指向targetView横向中间的位置，这样才好看些。为了这个才需要使用Paint测量文本的宽度，所以这也是该组件的一个缺陷，不能显示String格式之外的字符，比如SpannableString。\n\n\n\n\n\n\n## 完整的组件代码\n\n\n\n\n\n\n上面是对组件代码的拆分讲解，是为了说明我们当时实现这个组件的想法以及步骤，下面就整体把代码列出来，明了的看一下。\n\n    \n    /**\n     * 浮动的文本显示。根据一个提供的View，可以把文本显示到该View的下面.\n     * 可以设置显示的时间，多了该时间后自动消失。目前只支持纯文本{@link String}类型的显示\n     * 因为要计算显示文本的宽度。\n     * @author michael_li(飞雪无情)\n     * @since 2011-12-10 下午04:57:36\n     */\n    public class FloatTextToast {\n    \tpublic static final int LENGTH_LONG=Toast.LENGTH_LONG;\n    \tpublic static final int LENGTH_SHORT=Toast.LENGTH_SHORT;\n    \tprivate static final int WHAT_SHOW=1;\n    \n    \tprivate Context mContext;\n    \tprivate View mTargetView;\n    \tprivate Toast mToast;\n    \tprivate  TextView mContentView;\n    \n    \tprivate HandlerThread mHandlerThread;\n    \tprivate FloatTextToastHandler mHandler;\n    \tprivate FloatTextToast(Context context,View targetView) {\n    \t\tthis.mTargetView = targetView;\n    \t\tthis.mContext= context;\n    \t\tmToast=new Toast(mContext);\n    \t\tmContentView=new TextView(mContext);\n    \t\tmContentView.setBackgroundResource(R.drawable.float_text_toast_bg);\n    \t\tmContentView.setTextColor(Color.BLACK);\n    \t\tmContentView.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);\n    \t\tmToast.setView(mContentView);\n    \n    \t\t//初始化一个Handler线程\n    \t\tmHandlerThread=new HandlerThread(\"FloatTextToast\");\n    \t\tmHandlerThread.start();\n    \t\tmHandler=new FloatTextToastHandler(mHandlerThread.getLooper());\n    \t}\n    \t/**\n    \t * 生成一个FloatTextToast\n    \t * @param context Activity 上下文\n    \t * @param targetView  目标View，浮动文本要显示在哪个View下面\n    \t * @param text 要显示的文本\n    \t * @param duration 浮动文本显示的时间 {@link #LENGTH_LONG} {@link #LENGTH_SHORT}\n    \t * @return 一个FloatTextToast，可以调用{@link #show()}显示\n    \t */\n    \tpublic static FloatTextToast makeText(Context context,View targetView, String text, int duration) {\n    \t\tfinal FloatTextToast floatToast=new FloatTextToast(context,targetView);\n    \t\tfinal TextView contentView=floatToast.mContentView;\n    \t\tcontentView.setText(text);\n    \t\tfloatToast.mToast.setDuration(duration);\n    \t\treturn floatToast;\n    \t}\n    \t/**\n    \t * 显示浮动文本\n    \t */\n    \tpublic void show(){\n    \t\tmHandler.sendEmptyMessage(WHAT_SHOW);\n    \t}\n    \t/**在Handler调用的show方法，主要为了等待{@link #mTargetView}的位置*/\n    \tprivate void showInHandler(){\n    \t\tint[] targetPos=getTargetViewPos();\n    \t\tif(targetPos[0]==0&&targetPos[1]==0){\n    \t\t\tmHandler.sendEmptyMessageDelayed(WHAT_SHOW, 100);\n    \t\t}else{\n    \t\t\tfinal Rect contentPos=getContentViewPos(targetPos);\n    \t\t\tmToast.setGravity(Gravity.LEFT|Gravity.TOP, contentPos.left, contentPos.top);\n    \t\t\tmToast.show();\n    \t\t}\n    \t}\n    \tprivate int[] getTargetViewPos(){\n    \t\tfinal int[] targetPos=new int[2];\n    \t\tmTargetView.getLocationInWindow(targetPos);\n    \t\treturn targetPos;\n    \t}\n    \t/**\n    \t * 计算获取浮动文本显示的位置，把浮动文本放在targetView的中心处\n    \t * @return 一个包含top和left的Rect\n    \t */\n    \tprivate  Rect getContentViewPos(int[] targetPos){\n    \t\tfinal Rect windowVisibleRect=new Rect();\n    \t\tfinal View targetView=mTargetView;\n    \t\tfinal TextView contentView=mContentView;\n    \t\t//状态栏高度\n    \t\ttargetView.getWindowVisibleDisplayFrame(windowVisibleRect);\n    \t\tint statusBarHeight=windowVisibleRect.top;\n    \n    \t\t//背景图那个三角箭头的位置\n    \t\tfinal TextPaint textPaint=contentView.getPaint();\n    \t\tint contentW=(int)textPaint.measureText((String)contentView.getText());\n    \t\tint arrowPos=(int)(contentW*(30.0/160));\n    \n    \t\tfinal Rect rect = new Rect();\n            rect.left = targetPos[0]+targetView.getWidth()/2-arrowPos;\n            rect.top = targetPos[1]-statusBarHeight + targetView.getHeight();\n            return rect;\n    \t}\n    \tprivate class FloatTextToastHandler extends Handler{\n    \n    \t\tpublic FloatTextToastHandler(Looper looper) {\n    \t\t\tsuper(looper);\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic void handleMessage(Message msg) {\n    \t\t\tswitch(msg.what){\n    \t\t\tcase WHAT_SHOW:\n    \t\t\t\tshowInHandler();\n    \t\t\t}\n    \t\t}\n    \n    \t}\n    }\n\n\n此组件和Toast的实现方法一样，所以上手不难，只需使用makeText静态方法生成一个即可\n\n\n\n\n\n\n\n\n    \n    FloatTextToast.makeText(Context context, View targetView, String text, int duration).show()\n\n\n就这么简单，传进去几个参数，show出即可，和Toast一样好用。\n\n\n\n\n\n\n## 小结\n\n\n\n\n这里主要是通过类之间的组合编写一个一个FloatTextToast组件，便于在应用中提示一些信息，不光局限于新功能的提示，还有其他的点击查看个人信息等等，就如上面的效果图一样。这里主要的难点就在于Activity启动获取targetView的状态，这里采用了不受影响的自定义的消息机制，能及时的获取targetView的状态。这里也采用的Toast的队列机制，这样就能够更好的一个个的提示，让用户看完一个再显示另外一个，不至于一下子全显示出来，而用户没有时间看。这里还采用了Paint用于测量文本的真实宽度，所以也有了一些缺陷，如果哪位有更好的方法，也可以留言告知我，不胜感激。\n\n\n\n\n![](http://hi.csdn.net/attachment/201112/10/0_1323508315BC94.gif)\n","source":"_posts/2011-12-10-android-float-widget.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-12-10 09:12:00+00:00\nlayout: post\nslug: android-float-widget\ntitle: 基于Android的浮动组件，可以用于应用中的新功能展示等等。\nwordpress_id: 43\ncategories:\n- Android\ntags:\n- Android\n---\n\n## 前言\n\n\n在开发Android应用时,加新功能是必不可少的，我们加入了新的功能，有的一看界面就可以看出来，但是有的新功能就比较隐蔽，也就是用户很难知道你添加了这个新功能，这个时候就需要用户在打开我们的应用时给出一些提示，说明我们在哪里添加了新功能，点击哪里可以看到这个新功能。这时我们第一时间想到的可能是Toast，因为它用法简单，又不影响用户操作，但是它有个缺点，就是不能明确的指示是哪里添加了新功能，除非你用文字描述出来。为此，我基于Toast编写了一个小组件FloatTextToast（下面遇到的这个名字代替我写的这个组件），他和Toast的用法一样简单，并且弥补了Toast的缺点，也更显得更好看。\n\n\n## 效果图\n\n\n\n\n![](http://hi.csdn.net/attachment/201112/10/0_13234942045Irb.gif)\n\n\n\n\n## 你可以学到\n\n\n\n\n\n\n\n\n\t\n  1. Toast的基本用法\n\n\t\n  2. Android的消息机制，如何创建自己的消息队列\n\n\t\n  3. 怎样在Activity启动时获取一个View的width、height、top、left等属性\n\n\n\n\n## 基本思路\n\n\n\n\n\n\n\n\n\n\n\n\t\n  1. 首先你要有一个处理好的9 PNG的图片，用于自适应文字显示，关于9 PNG处理可以参考Android Doc\n\n\t\n  2. 要显示在哪个View的下面，就要知道这个目标View的位置\n\n\t\n  3. 把要显示的文本放在一个TextView里，使用Toast的setView方法设置Toast要显示的View\n\n\t\n  4. 根据得到的位置，最后就是使用Toast的setGravity方法把要显示的内容放到正确的位置显示出来即可。\n\n\n\n\n总的来说首先就是要知道目标View，根据targetView计算出要显示提示的位置，然后根据位置使用Toast把提示的文本显示出来。但是这里有几个难点，下面就一一解决\n\n\n\n\n\n\n\n## Activity加载完成时获取targetVIew的宽高和位置属性\n\n\n\n\n\n\n我们加入了新的功能提示，自然会在用户打开这个界面的时候就提示，但是在UI没有渲染完成绑定倒Window上的时候，是不能获取倒targetView的width、height和position的，那么我们怎么才能知道targetView的这些属性呢？Activity的onAttachedToWindow回调方法是不能用的，况且它是在API 5加上的，以前的API中并没有。不过我们还有一种方法，那就是在显示提示的时候获取targetView的属性，如果获取不到（为0）就一直获取，直到获取到为止，这其实是一个轮询。为了达到这一目的，我们在开发者调用FloatTextToast.show()的时候使用Android的Message机制轮询获取一个targetView的属性，如果获取到，就会显示提示文字了。在此之前先看下FloatTextToast构造函数，可以对它有个大概的了解，防止后面的代码中出现的成员变量不认识。\n\n    \n    private FloatTextToast(Context context,View targetView) {\n    \t\tthis.mTargetView = targetView;\n    \t\tthis.mContext= context;\n    \t\tmToast=new Toast(mContext);\n    \t\tmContentView=new TextView(mContext);\n    \t\tmContentView.setBackgroundResource(R.drawable.float_text_toast_bg);\n    \t\tmContentView.setTextColor(Color.BLACK);\n    \t\tmContentView.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);\n    \t\tmToast.setView(mContentView);\n    \n    \t\t//初始化一个Handler线程\n    \t\tmHandlerThread=new HandlerThread(\"FloatTextToast\");\n    \t\tmHandlerThread.start();\n    \t\tmHandler=new FloatTextToastHandler(mHandlerThread.getLooper());\n    \t}\n\n\n\n\n\n\n\n## 自定义自己的消息循环机制\n\n\n\n\n要想在一个自定义的组件中使用Message机制，一定要有自己的Looper机制，我们不能使用Activity的Looper，因为主Looper可能会有其他的Message需要处理，这就会导致我们的show方法会延迟调用，这样效果就不好了，所以要有一个专门的Looper来处理此Message。要声明自己的Looper，就需要HandlerThread这个类的配合了，这可是个好东西，使用它你会很容易的创建一个自己的线程用于处理你Message。使用方法很简单，如下代码：\n\n\n\n\n\n\n    \n    //初始化一个Handler线程\n    \t\tmHandlerThread=new HandlerThread(\"FloatTextToast\");\n    \t\tmHandlerThread.start();\n    \t\tmHandler=new FloatTextToastHandler(mHandlerThread.getLooper());\n\n\n这样就声明了一个HandlerThread并且让它运行，运行之后我们就可以获取一个属于该Thread的Looper，然后把Message发送给这个Looper，那么这个线程就可以处理你发送的消息了。。看看我们的自定义Handler\n\n\n\n\n\n\n\n\n    \n    private class FloatTextToastHandler extends Handler{\n    \n    \t\tpublic FloatTextToastHandler(Looper looper) {\n    \t\t\tsuper(looper);\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic void handleMessage(Message msg) {\n    \t\t\tswitch(msg.what){\n    \t\t\tcase WHAT_SHOW:\n    \t\t\t\tshowInHandler();\n    \t\t\t}\n    \t\t}\n    \n    \t}\n\n\n它需要传递一个Looper作为构造参数声明，意思就是使用这个Looper处理我发send的Message的意思。上面的代码\n\n\n\n\n\n\n\n\n    \n    mHandler=new FloatTextToastHandler(mHandlerThread.getLooper());\n\n\n正是我们使用自己开启的线程处理我们的Message的意思。下面看下我们的showInHandler()方法是怎么处理的。\n\n\n\n\n\n\n\n\n    \n    /**在Handler调用的show方法，主要为了等待{@link #mTargetView}的位置*/\n    \tprivate void showInHandler(){\n    \t\tint[] targetPos=getTargetViewPos();\n    \t\tif(targetPos[0]==0&&targetPos[1]==0){\n    \t\t\tmHandler.sendEmptyMessageDelayed(WHAT_SHOW, 100);\n    \t\t}else{\n    \t\t\tfinal Rect contentPos=getContentViewPos(targetPos);\n    \t\t\tmToast.setGravity(Gravity.LEFT|Gravity.TOP, contentPos.left, contentPos.top);\n    \t\t\tmToast.show();\n    \t\t}\n    \t}\n\n\n该方法其实就是在获取targetVIew的位置，如果获取不到，则向自定义的Looper里发送一个Message重新调用该函数，如果得到了位置，那么就调用Toast的setGravity方法设置好要显示文本的位置，然后显示即可。\n\n\n\n\n\n\n## 获取要显示文本的位置\n\n\n\n\n\n\n要获取显示的位置，就要知道targetVIew的位置以及它的宽、高，这样就能计算要显示文本的位置了。View组件都有一个函数，可以把自己在Window里的坐标转换为一个数组。\n\n    \n    private int[] getTargetViewPos(){\n    \t\tfinal int[] targetPos=new int[2];\n    \t\tmTargetView.getLocationInWindow(targetPos);\n    \t\treturn targetPos;\n    \t}\n\n\n这样，就返回了targetView的xy坐标了。光有targetView的坐标还不够，还要有contentView最终要显示的位置。\n\n\n\n\n\n\n\n\n    \n    /**\n    \t * 计算获取浮动文本显示的位置，把浮动文本放在targetView的中心处\n    \t * @return 一个包含top和left的Rect\n    \t */\n    \tprivate  Rect getContentViewPos(int[] targetPos){\n    \t\tfinal Rect windowVisibleRect=new Rect();\n    \t\tfinal View targetView=mTargetView;\n    \t\tfinal TextView contentView=mContentView;\n    \t\t//状态栏高度\n    \t\ttargetView.getWindowVisibleDisplayFrame(windowVisibleRect);\n    \t\tint statusBarHeight=windowVisibleRect.top;\n    \n    \t\t//背景图那个三角箭头的位置\n    \t\tfinal TextPaint textPaint=contentView.getPaint();\n    \t\tint contentW=(int)textPaint.measureText((String)contentView.getText());\n    \t\tint arrowPos=(int)(contentW*(30.0/160));\n    \n    \t\tfinal Rect rect = new Rect();\n            rect.left = targetPos[0]+targetView.getWidth()/2-arrowPos;\n            rect.top = targetPos[1]-statusBarHeight + targetView.getHeight();\n            return rect;\n    \t}\n\n\n这个函数的功能就是让文本显示在targetView的下方的横向中间的位置，也就是文本的背景尖角三角要指向targetView横向中间的位置，这样才好看些。为了这个才需要使用Paint测量文本的宽度，所以这也是该组件的一个缺陷，不能显示String格式之外的字符，比如SpannableString。\n\n\n\n\n\n\n## 完整的组件代码\n\n\n\n\n\n\n上面是对组件代码的拆分讲解，是为了说明我们当时实现这个组件的想法以及步骤，下面就整体把代码列出来，明了的看一下。\n\n    \n    /**\n     * 浮动的文本显示。根据一个提供的View，可以把文本显示到该View的下面.\n     * 可以设置显示的时间，多了该时间后自动消失。目前只支持纯文本{@link String}类型的显示\n     * 因为要计算显示文本的宽度。\n     * @author michael_li(飞雪无情)\n     * @since 2011-12-10 下午04:57:36\n     */\n    public class FloatTextToast {\n    \tpublic static final int LENGTH_LONG=Toast.LENGTH_LONG;\n    \tpublic static final int LENGTH_SHORT=Toast.LENGTH_SHORT;\n    \tprivate static final int WHAT_SHOW=1;\n    \n    \tprivate Context mContext;\n    \tprivate View mTargetView;\n    \tprivate Toast mToast;\n    \tprivate  TextView mContentView;\n    \n    \tprivate HandlerThread mHandlerThread;\n    \tprivate FloatTextToastHandler mHandler;\n    \tprivate FloatTextToast(Context context,View targetView) {\n    \t\tthis.mTargetView = targetView;\n    \t\tthis.mContext= context;\n    \t\tmToast=new Toast(mContext);\n    \t\tmContentView=new TextView(mContext);\n    \t\tmContentView.setBackgroundResource(R.drawable.float_text_toast_bg);\n    \t\tmContentView.setTextColor(Color.BLACK);\n    \t\tmContentView.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);\n    \t\tmToast.setView(mContentView);\n    \n    \t\t//初始化一个Handler线程\n    \t\tmHandlerThread=new HandlerThread(\"FloatTextToast\");\n    \t\tmHandlerThread.start();\n    \t\tmHandler=new FloatTextToastHandler(mHandlerThread.getLooper());\n    \t}\n    \t/**\n    \t * 生成一个FloatTextToast\n    \t * @param context Activity 上下文\n    \t * @param targetView  目标View，浮动文本要显示在哪个View下面\n    \t * @param text 要显示的文本\n    \t * @param duration 浮动文本显示的时间 {@link #LENGTH_LONG} {@link #LENGTH_SHORT}\n    \t * @return 一个FloatTextToast，可以调用{@link #show()}显示\n    \t */\n    \tpublic static FloatTextToast makeText(Context context,View targetView, String text, int duration) {\n    \t\tfinal FloatTextToast floatToast=new FloatTextToast(context,targetView);\n    \t\tfinal TextView contentView=floatToast.mContentView;\n    \t\tcontentView.setText(text);\n    \t\tfloatToast.mToast.setDuration(duration);\n    \t\treturn floatToast;\n    \t}\n    \t/**\n    \t * 显示浮动文本\n    \t */\n    \tpublic void show(){\n    \t\tmHandler.sendEmptyMessage(WHAT_SHOW);\n    \t}\n    \t/**在Handler调用的show方法，主要为了等待{@link #mTargetView}的位置*/\n    \tprivate void showInHandler(){\n    \t\tint[] targetPos=getTargetViewPos();\n    \t\tif(targetPos[0]==0&&targetPos[1]==0){\n    \t\t\tmHandler.sendEmptyMessageDelayed(WHAT_SHOW, 100);\n    \t\t}else{\n    \t\t\tfinal Rect contentPos=getContentViewPos(targetPos);\n    \t\t\tmToast.setGravity(Gravity.LEFT|Gravity.TOP, contentPos.left, contentPos.top);\n    \t\t\tmToast.show();\n    \t\t}\n    \t}\n    \tprivate int[] getTargetViewPos(){\n    \t\tfinal int[] targetPos=new int[2];\n    \t\tmTargetView.getLocationInWindow(targetPos);\n    \t\treturn targetPos;\n    \t}\n    \t/**\n    \t * 计算获取浮动文本显示的位置，把浮动文本放在targetView的中心处\n    \t * @return 一个包含top和left的Rect\n    \t */\n    \tprivate  Rect getContentViewPos(int[] targetPos){\n    \t\tfinal Rect windowVisibleRect=new Rect();\n    \t\tfinal View targetView=mTargetView;\n    \t\tfinal TextView contentView=mContentView;\n    \t\t//状态栏高度\n    \t\ttargetView.getWindowVisibleDisplayFrame(windowVisibleRect);\n    \t\tint statusBarHeight=windowVisibleRect.top;\n    \n    \t\t//背景图那个三角箭头的位置\n    \t\tfinal TextPaint textPaint=contentView.getPaint();\n    \t\tint contentW=(int)textPaint.measureText((String)contentView.getText());\n    \t\tint arrowPos=(int)(contentW*(30.0/160));\n    \n    \t\tfinal Rect rect = new Rect();\n            rect.left = targetPos[0]+targetView.getWidth()/2-arrowPos;\n            rect.top = targetPos[1]-statusBarHeight + targetView.getHeight();\n            return rect;\n    \t}\n    \tprivate class FloatTextToastHandler extends Handler{\n    \n    \t\tpublic FloatTextToastHandler(Looper looper) {\n    \t\t\tsuper(looper);\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic void handleMessage(Message msg) {\n    \t\t\tswitch(msg.what){\n    \t\t\tcase WHAT_SHOW:\n    \t\t\t\tshowInHandler();\n    \t\t\t}\n    \t\t}\n    \n    \t}\n    }\n\n\n此组件和Toast的实现方法一样，所以上手不难，只需使用makeText静态方法生成一个即可\n\n\n\n\n\n\n\n\n    \n    FloatTextToast.makeText(Context context, View targetView, String text, int duration).show()\n\n\n就这么简单，传进去几个参数，show出即可，和Toast一样好用。\n\n\n\n\n\n\n## 小结\n\n\n\n\n这里主要是通过类之间的组合编写一个一个FloatTextToast组件，便于在应用中提示一些信息，不光局限于新功能的提示，还有其他的点击查看个人信息等等，就如上面的效果图一样。这里主要的难点就在于Activity启动获取targetView的状态，这里采用了不受影响的自定义的消息机制，能及时的获取targetView的状态。这里也采用的Toast的队列机制，这样就能够更好的一个个的提示，让用户看完一个再显示另外一个，不至于一下子全显示出来，而用户没有时间看。这里还采用了Paint用于测量文本的真实宽度，所以也有了一些缺陷，如果哪位有更好的方法，也可以留言告知我，不胜感激。\n\n\n\n\n![](http://hi.csdn.net/attachment/201112/10/0_1323508315BC94.gif)\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvly002vz1n1u4lkf6y2"},{"author":"飞雪无情","comments":1,"date":"2011-11-14T17:41:00.000Z","layout":"post","slug":"download-android-4-0-sources","title":"最新最全的Android4.0 API源代码下载和完整Android4.0源代码下载教程","wordpress_id":46,"_content":"\n这时刚刚整理好的最新的，包含所有的API的源代码，第一次上传的那个Android4.0 API 源代码有部分API没有包含，请点击下面的链接下载最新的。\n\n附Android4.0 API 源代码下载[http://download.csdn.net/detail/michael__li/3802305](http://download.csdn.net/detail/michael__li/3802305)\n\n昨日凌晨Android放出4.0源代码，已经托管到GoogleSource上，大家可以下载了，这次放出的branch为Android-4.0.0_r1。\n\n下载教程。操作系统环境为Linux,并且确保你已经安装了git jdk python等.\n\n1.创建bin目录，并加入到PATH\n\n    \n    $ mkdir ~/bin\n    $ PATH=~/bin:$PATH\n\n\n2.下载repo到刚刚创建的bin目录，并设置权限为可执行。\n\n    \n    $ curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo\n    $ chmod a+x ~/bin/repo\n\n\n3.创建Android源代码存放目录并进入到该目录\n\n    \n    $ mkdirAndroid-4.0.0_r1\n    $ cdAndroid-4.0.0_r1\n\n\n4.初始化Android4.0.1的Git库\n\n    \n    $ repo init -u https://android.googlesource.com/platform/manifest -b android-4.0.1_r1\n\n\n5.最后执行开始同步下载\n\n    \n    $ repo sync\n\n\n然后就是漫长的等待了。。\n","source":"_posts/2011-11-15-download-android-4-0-sources.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-11-15 01:41:00+00:00\nlayout: post\nslug: download-android-4-0-sources\ntitle: 最新最全的Android4.0 API源代码下载和完整Android4.0源代码下载教程\nwordpress_id: 46\ncategories:\n- Android\ntags:\n- Android\n- Ubuntu\n---\n\n这时刚刚整理好的最新的，包含所有的API的源代码，第一次上传的那个Android4.0 API 源代码有部分API没有包含，请点击下面的链接下载最新的。\n\n附Android4.0 API 源代码下载[http://download.csdn.net/detail/michael__li/3802305](http://download.csdn.net/detail/michael__li/3802305)\n\n昨日凌晨Android放出4.0源代码，已经托管到GoogleSource上，大家可以下载了，这次放出的branch为Android-4.0.0_r1。\n\n下载教程。操作系统环境为Linux,并且确保你已经安装了git jdk python等.\n\n1.创建bin目录，并加入到PATH\n\n    \n    $ mkdir ~/bin\n    $ PATH=~/bin:$PATH\n\n\n2.下载repo到刚刚创建的bin目录，并设置权限为可执行。\n\n    \n    $ curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo\n    $ chmod a+x ~/bin/repo\n\n\n3.创建Android源代码存放目录并进入到该目录\n\n    \n    $ mkdirAndroid-4.0.0_r1\n    $ cdAndroid-4.0.0_r1\n\n\n4.初始化Android4.0.1的Git库\n\n    \n    $ repo init -u https://android.googlesource.com/platform/manifest -b android-4.0.1_r1\n\n\n5.最后执行开始同步下载\n\n    \n    $ repo sync\n\n\n然后就是漫长的等待了。。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvm0002yz1n1e626cdza"},{"author":"飞雪无情","comments":1,"date":"2011-11-14T22:06:48.000Z","layout":"post","slug":"android-4-0-api-arrange","title":"提取出的最新Android4.0 API 源代码","wordpress_id":45,"_content":"\n提取出的Android4.0 API 的源代码，也就是android.jar源代码，这样在Eclipse关联到该源代码，就可以在项目中查看Android API 的实现了。\n\n下载地址 [http://download.csdn.net/detail/michael__li/3802305](http://download.csdn.net/detail/michael__li/3802305)\n\nAndroid4.0 全部源代码下载方法 ：[http://blog.csdn.net/michael__li/article/details/6971765](http://blog.csdn.net/michael__li/article/details/6971765)\n\n","source":"_posts/2011-11-15-android-4-0-api-arrange.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-11-15 06:06:48+00:00\nlayout: post\nslug: android-4-0-api-arrange\ntitle: 提取出的最新Android4.0 API 源代码\nwordpress_id: 45\ncategories:\n- Android\ntags:\n- Android\n- API\n---\n\n提取出的Android4.0 API 的源代码，也就是android.jar源代码，这样在Eclipse关联到该源代码，就可以在项目中查看Android API 的实现了。\n\n下载地址 [http://download.csdn.net/detail/michael__li/3802305](http://download.csdn.net/detail/michael__li/3802305)\n\nAndroid4.0 全部源代码下载方法 ：[http://blog.csdn.net/michael__li/article/details/6971765](http://blog.csdn.net/michael__li/article/details/6971765)\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvm20032z1n1850st3ym"},{"author":"飞雪无情","comments":1,"date":"2011-11-11T08:18:00.000Z","layout":"post","slug":"android-asset-studio-integration","title":"Android设计应用图标不用愁---Asset Studio Integration来帮你","wordpress_id":47,"_content":"\n[Android Asset Studio](http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html)Web版是一个非常好用的Andrid图标资源设计工具，它是由RomanNurik开发的。现在我们已经在ADT14里支持同样的功能。首先，你要打开新建向导（Ctrl-N）,选择Android分类，然后在其下找到名字为“Android Icon Set”的这一项：\n\n![](http://hi.csdn.net/attachment/201111/10/0_13209351362229.gif)\n\n然后，将会弹出“资源选择器”（这些资源其实就是你在布局文件用到的那些图片，比如对于上下文菜单自定义的背景图片，就需要一个为“Background”属性设置一个@drawable的引用）对话框，该对话框里有个按钮(Create New Icon...)，点击它.\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320936348j75Y.gif)\n\n当你打开Android Icon Set向导的时候，首先看到的是一个资源类型选择界面，也就是你想创建哪一类图标：\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320936495Wu61.gif)\n\n在这里，你可以选择创建哪一类图标，并且为这个被创建的图标起一个名字。\n\n如果你选择创建一个启动图标并且单击了下一步，这时你会看到如下界面：\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320936654FoRB.gif)\n\n这个界面包含很多功能。首先你会在右边看到我们正在创建和处理的图标的预览图。正如你所看到的，针对不同分辨率的屏幕它创建了多个图标，这就是刚刚为什么我们指的是一个“图标集合”，而不仅仅是一个“图标”。除了上面显示的，我们还创建了一个高分辨率的“web”版本的图标，你可能会在上传应用到Android Market的时候用到它（译者按：在上传App倒Android\nMarket的时候，可以上传一个大图标）。\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320937517H8eb.gif)\n\n仔细看下这个图标，你会发现它比我们在上面预览（Preview）那里看到的更有光泽。你可以选择界面上的“Glossy”选项来使得你的图标具有光泽的效果。\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320937955mwIb.gif)\n\n你还可以设置背景的形状。文本的字体、颜色等等。\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320938081E0sR.gif)\n\n然而，使用文本并不能做出非常好的图标，但是请注意，这仅仅是我们为了得到初步的效果而采取的一种很快捷的方式。请注意界面的最上面还有三个功能选项：\n\n\n\n\n\n\t\n  * 图片\n\n\t\n  * 剪贴画\n\n\t\n  * 文本\n\n\n\n\n理想情况下你会用你自己的“基准”图像（或者如果需要的话会是一个剪贴画），然后使用Asset Studio 向导生成合适的图标。\n\n\n\n\n你会问了：“我已经有了一个自己绘制好的图标了，那么我为什么还要再生成”？原因就是Anroid有不同的版本、不同的主题，这就意味着你会提供不同效果、不同颜色以及不同样式的图标。比如下面我为状态栏和通知栏生成的图标：\n\n\n\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320939254gexG.gif)\n\n\n\n\n你可以看到使用的基准图像只是一个简单的黑白相间的Bugdroid图像，但是我们为Gingerbread(v9)、Honeycomb(v11)以及老的版本都生成了不同样式的图标。对于ActionBar，Asset Studio向导会生成亮、暗两种不同Holo 主题的图标。对于选项卡则会生成“选中”和“未选中”两种不同样式的图标，并且对于v5（Andoid2.0）之前的版本则会新生成不同演示的“未选中”状态的图标（译者按：Asset\nStudio对于v5版本前后生成的“为选中”图标是不一样的，从下图可以看出，v5之前的图标发白，v5之后的发灰）。\n\n\n\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320940269VMv2.gif)\n\n\n\n\n\n\n\n使用Asset Studio的一个优势就是在你点击完成按钮后，它可以直接在你当前的项目中生成你设计好的图标。这样你就不用像使用Web版本（译者按：前面提到过，这个工具一开始是Web App，ADT14才加入进来，成为ADT的一部分）一样，还要下载下来并且提取图标放在正确的位置。它还会在图标名字冲突的时候提示你是否覆盖原文件。如果你在上面的资源选择器界面里点击了“Create\nIcon”按钮，那么新创建的图标将会在选择器里被选中。\n\n\n\n\n\n\n\n当你点击完成退出向导的时候，包资源管理器会自动更新并且选中新创建的图标。\n\n\n\n\n![](http://hi.csdn.net/attachment/201111/11/0_1321025460X3wc.gif)\n\n\n\n\n和ADT集成的第二个优势就是我们可以知道你的项目工程的minimum SDK target，我们就可以利用这些信息仅仅生成必要的图标。比如你正在基于Android2.0或者以上版本开发一个App，那么我们将不会生成不需要的老的样式的图标，也不需要名字为drawable-mdpi-v5的文件夹等等；生成的图标直接会被放进drawable-mdpi文件夹里。\n\n\n\n\n\n\n\n我们希望这些内容能让你更容易的创建很好的应用。请不要经常使用那个文本功能:（译者按：最好使用Image和Clipart两个）-)我们还仍需要为AOSP贡献更多的剪贴画，这样大家就可以在向导里选择使用（译者按：目前向导的剪贴画只有一个，可以参见前面的图片），所以如果你是个艺术设计者，我们非常欢迎你贡献些剪贴画出来！（请参见[贡献页面](http://tools.android.com/contributing)）\n\n\n\n\n\n\n\n非常感谢Roman Nurik写出了这么好的网页应用并且为移植到ADT提供了帮助。\n\n\n\n\n\n\n\n译自：[http://tools.android.com/recent/assetstudiointegration](http://tools.android.com/recent/assetstudiointegration)\n","source":"_posts/2011-11-11-android-asset-studio-integration.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-11-11 16:18:00+00:00\nlayout: post\nslug: android-asset-studio-integration\ntitle: Android设计应用图标不用愁---Asset Studio Integration来帮你\nwordpress_id: 47\ncategories:\n- Android\ntags:\n- Android\n---\n\n[Android Asset Studio](http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html)Web版是一个非常好用的Andrid图标资源设计工具，它是由RomanNurik开发的。现在我们已经在ADT14里支持同样的功能。首先，你要打开新建向导（Ctrl-N）,选择Android分类，然后在其下找到名字为“Android Icon Set”的这一项：\n\n![](http://hi.csdn.net/attachment/201111/10/0_13209351362229.gif)\n\n然后，将会弹出“资源选择器”（这些资源其实就是你在布局文件用到的那些图片，比如对于上下文菜单自定义的背景图片，就需要一个为“Background”属性设置一个@drawable的引用）对话框，该对话框里有个按钮(Create New Icon...)，点击它.\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320936348j75Y.gif)\n\n当你打开Android Icon Set向导的时候，首先看到的是一个资源类型选择界面，也就是你想创建哪一类图标：\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320936495Wu61.gif)\n\n在这里，你可以选择创建哪一类图标，并且为这个被创建的图标起一个名字。\n\n如果你选择创建一个启动图标并且单击了下一步，这时你会看到如下界面：\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320936654FoRB.gif)\n\n这个界面包含很多功能。首先你会在右边看到我们正在创建和处理的图标的预览图。正如你所看到的，针对不同分辨率的屏幕它创建了多个图标，这就是刚刚为什么我们指的是一个“图标集合”，而不仅仅是一个“图标”。除了上面显示的，我们还创建了一个高分辨率的“web”版本的图标，你可能会在上传应用到Android Market的时候用到它（译者按：在上传App倒Android\nMarket的时候，可以上传一个大图标）。\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320937517H8eb.gif)\n\n仔细看下这个图标，你会发现它比我们在上面预览（Preview）那里看到的更有光泽。你可以选择界面上的“Glossy”选项来使得你的图标具有光泽的效果。\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320937955mwIb.gif)\n\n你还可以设置背景的形状。文本的字体、颜色等等。\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320938081E0sR.gif)\n\n然而，使用文本并不能做出非常好的图标，但是请注意，这仅仅是我们为了得到初步的效果而采取的一种很快捷的方式。请注意界面的最上面还有三个功能选项：\n\n\n\n\n\n\t\n  * 图片\n\n\t\n  * 剪贴画\n\n\t\n  * 文本\n\n\n\n\n理想情况下你会用你自己的“基准”图像（或者如果需要的话会是一个剪贴画），然后使用Asset Studio 向导生成合适的图标。\n\n\n\n\n你会问了：“我已经有了一个自己绘制好的图标了，那么我为什么还要再生成”？原因就是Anroid有不同的版本、不同的主题，这就意味着你会提供不同效果、不同颜色以及不同样式的图标。比如下面我为状态栏和通知栏生成的图标：\n\n\n\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320939254gexG.gif)\n\n\n\n\n你可以看到使用的基准图像只是一个简单的黑白相间的Bugdroid图像，但是我们为Gingerbread(v9)、Honeycomb(v11)以及老的版本都生成了不同样式的图标。对于ActionBar，Asset Studio向导会生成亮、暗两种不同Holo 主题的图标。对于选项卡则会生成“选中”和“未选中”两种不同样式的图标，并且对于v5（Andoid2.0）之前的版本则会新生成不同演示的“未选中”状态的图标（译者按：Asset\nStudio对于v5版本前后生成的“为选中”图标是不一样的，从下图可以看出，v5之前的图标发白，v5之后的发灰）。\n\n\n\n\n![](http://hi.csdn.net/attachment/201111/10/0_1320940269VMv2.gif)\n\n\n\n\n\n\n\n使用Asset Studio的一个优势就是在你点击完成按钮后，它可以直接在你当前的项目中生成你设计好的图标。这样你就不用像使用Web版本（译者按：前面提到过，这个工具一开始是Web App，ADT14才加入进来，成为ADT的一部分）一样，还要下载下来并且提取图标放在正确的位置。它还会在图标名字冲突的时候提示你是否覆盖原文件。如果你在上面的资源选择器界面里点击了“Create\nIcon”按钮，那么新创建的图标将会在选择器里被选中。\n\n\n\n\n\n\n\n当你点击完成退出向导的时候，包资源管理器会自动更新并且选中新创建的图标。\n\n\n\n\n![](http://hi.csdn.net/attachment/201111/11/0_1321025460X3wc.gif)\n\n\n\n\n和ADT集成的第二个优势就是我们可以知道你的项目工程的minimum SDK target，我们就可以利用这些信息仅仅生成必要的图标。比如你正在基于Android2.0或者以上版本开发一个App，那么我们将不会生成不需要的老的样式的图标，也不需要名字为drawable-mdpi-v5的文件夹等等；生成的图标直接会被放进drawable-mdpi文件夹里。\n\n\n\n\n\n\n\n我们希望这些内容能让你更容易的创建很好的应用。请不要经常使用那个文本功能:（译者按：最好使用Image和Clipart两个）-)我们还仍需要为AOSP贡献更多的剪贴画，这样大家就可以在向导里选择使用（译者按：目前向导的剪贴画只有一个，可以参见前面的图片），所以如果你是个艺术设计者，我们非常欢迎你贡献些剪贴画出来！（请参见[贡献页面](http://tools.android.com/contributing)）\n\n\n\n\n\n\n\n非常感谢Roman Nurik写出了这么好的网页应用并且为移植到ADT提供了帮助。\n\n\n\n\n\n\n\n译自：[http://tools.android.com/recent/assetstudiointegration](http://tools.android.com/recent/assetstudiointegration)\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvm30036z1n1f713sykz"},{"author":"飞雪无情","comments":1,"date":"2011-10-22T08:06:17.000Z","layout":"post","slug":"adsl-and-vpn-config-for-ubuntu","title":"Ubuntu下ADSL拨号和VPN 访问网站","wordpress_id":48,"_content":"\n## 1.更新NetworkManager\n\n\n添加更新源：deb http://ppa.launchpad.net/network-manager/trunk/ubuntu maverick main\n\ndeb-src http://ppa.launchpad.net/network-manager/trunk/ubuntu maverick main\n\n执行sudo apt-get update更新，然后打开更新管理器进行更新软件。\n\n\n## 2.启用NetworkManager。\n\n\n修改/etc/NetworkManager/NetworkManager.conf文件里的managed为true保存。修改/etc/network/interfaces文件，只保留最上面两行的auto lo iface lo inet loopback,然后删除/etc/resolv.conf，最后重启networkmanager sudo /etc/init.d/network-manager restart。\n\n\n## 3.添加DSL和VPN配置\n\n\n看到面板里的网络链接，编辑他，添加DSL链接，之用输入用户名和密码即可，VPN链接选用pptp协议，输入服务器地址和用户名密码即可\n","source":"_posts/2011-10-22-adsl-and-vpn-config-for-ubuntu.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-10-22 16:06:17+00:00\nlayout: post\nslug: adsl-and-vpn-config-for-ubuntu\ntitle: Ubuntu下ADSL拨号和VPN 访问网站\nwordpress_id: 48\ncategories:\n- Linux\ntags:\n- Ubuntu\n---\n\n## 1.更新NetworkManager\n\n\n添加更新源：deb http://ppa.launchpad.net/network-manager/trunk/ubuntu maverick main\n\ndeb-src http://ppa.launchpad.net/network-manager/trunk/ubuntu maverick main\n\n执行sudo apt-get update更新，然后打开更新管理器进行更新软件。\n\n\n## 2.启用NetworkManager。\n\n\n修改/etc/NetworkManager/NetworkManager.conf文件里的managed为true保存。修改/etc/network/interfaces文件，只保留最上面两行的auto lo iface lo inet loopback,然后删除/etc/resolv.conf，最后重启networkmanager sudo /etc/init.d/network-manager restart。\n\n\n## 3.添加DSL和VPN配置\n\n\n看到面板里的网络链接，编辑他，添加DSL链接，之用输入用户名和密码即可，VPN链接选用pptp协议，输入服务器地址和用户名密码即可\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvm50039z1n10fcoyiky"},{"author":"飞雪无情","comments":1,"date":"2011-07-19T06:50:52.000Z","layout":"post","slug":"android-send-email-intro","title":"Android中我为什么发不了邮件--Android邮件发送详解","wordpress_id":87,"_content":"\nAndroid中我为什么发不了邮件？？？我手机里明明有邮件客户端的，可我为什么不能调用它发送邮件？？？相信这是很多人会问的问题，手机里有Email客户端，可是偏偏在自己的应用里调用不了，抑或是不知道怎么调用，还有的是一直认为自己写对了，可是偏偏不能调用，无奈之下只能却网上找段代码粘贴上，ok，可以了。。可是你知道别人的代码为什么可以？你知道调用Email是怎么工作的吗？如果你又像给多人发邮件，还想发送附件，怎么做？又迷糊了吧？所以需要搞懂原理才能一通百通，举一反三，而这就是这篇博文要写的，也是你可以在这篇博文中学到的。\n\n在这里你可以学到：\n\n\n\n\t\n  1. 什么是Intent和Intent Fileter\n\n\t\n  2. 如何发送Email\n\n\t\n  3. 如何发送特定的标题和内容的Emil\n\n\t\n  4. 如何发送给多人\n\n\t\n  5. 如何抄送和密送\n\n\t\n  6. 如何发送附件\n\n\n\n\n## 一：什么是Intent和Intent Fileter\n\n\n关于这个详细介绍请参考 :\n\n[Intents and Intent Filters(一)](/2011/03/14/android-intents-and-intent-filters-one.html)\n\n[Intents and Intent Filters(二)](/2011/03/17/android-intents-and-intent-filters-two.html)\n\n[Intents and Intent Filters(三)](/2011/03/29/android-intents-and-intent-filters-three.html)\n\n\n## 二：如何发送Email\n\n\n通过上面就会知道Android应用之间的通信是通过Intent这个东西，如果手机中有实现了你想要功能的应用那么你就不用麻烦去实现一个拉。直接使用就可以，比如这里的发送邮件。\n\n我们新建一个工程SendEmail，基于Android1.6实现。然后定义布局文件和代码如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <Button\n    \tandroid:id=\"@+id/send_btn\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:text=\"Send Action\"\n        />\n    </LinearLayout>\n\n\n\n\n    \n     /** 发送邮件测试界面\n     * @author 飞雪无情\n     * ＠since 2011-7-19\n     */\n    public class SendEmailActivity extends Activity implements View.OnClickListener{\n    \tprivate Button mSendBtn;\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            mSendBtn=(Button)findViewById(R.id.send_btn);\n            mSendBtn.setOnClickListener(this);\n        }\n    \t@Override\n    \tpublic void onClick(View v) {\n    \t\tswitch(v.getId()){\n    \t\tcase R.id.send_btn:\n    \t\t\tstartSendEmailIntent();\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tprivate void startSendEmailIntent(){\n    \t\tIntent data=new Intent(Intent.ACTION_SENDTO);\n    \t\tdata.setData(Uri.parse(\"mailto:qq10000@qq.com\"));\n    \t\tdata.putExtra(Intent.EXTRA_SUBJECT, \"这是标题\");\n    \t\tdata.putExtra(Intent.EXTRA_TEXT, \"这是内容\");\n    \t\tstartActivity(data);\n    \t}\n    }\n\n\n这是我们运行应用，点击按钮就会看到如下效果:\n\n![](http://dl.iteye.com/upload/attachment/520422/f01623aa-77eb-3a1f-bf30-306092c83e0d.png)\n![](http://dl.iteye.com/upload/attachment/520425/ed85ef04-3760-33a4-a0e7-b4fc2701eaca.png)\n\n\n## 三：分析发送代码\n\n\n主要的发送代码如下：\n\n    \n    Intent data=new Intent(Intent.ACTION_SENDTO);\n    data.setData(Uri.parse(\"mailto:qq10000@qq.com\"));\n    data.putExtra(Intent.EXTRA_SUBJECT, \"这是标题\");\n    data.putExtra(Intent.EXTRA_TEXT, \"这是内容\");\n    startActivity(data);\n\n\n\n\n\n\t\n  1.  首先构造一个Action为SENDTO的Action\n\n\t\n  2. 其次创建一个Uri，他是一个mailto的邮件链接，也就是接收地址.\n\n\t\n  3. 再通过Intent.EXTRA_SUBJECT和Intent.EXTRA_TEXT传递标题和文本的数据，记住，一定要使用这些常量，这是标准，否则Email客户端不认识，那样你传递的标题和文本就不起作用了。\n\n\t\n  4. 然后就是startActivity进行打开，系统会根据Intent自动匹配找到能处理这个intent的应用，如图列表，有很多个，我们这里选择网易掌上邮，就打开了一个邮件发送界面，如我们所愿，邮件地址、标题和内容都在了，很成功.\n\n\t\n  5. intent中的数据传递是以Extra的方式进行put后传递的，然后在使用的时候getter取出使用。\n\n\n\n\n## 四：发送给多人以及抄送和密送\n\n\n发送给多人以及抄送和密送都很简单，查找Intent类中的Extra常量，发送有这么三个常量:Intent.EXTRA_EMAIL,Intent.EXTRA_CC,Intent.EXTRA_BCC。这三个分别用于传递“接受人地址列表”、“抄送人地址列表”和“密送人地址列表”，传递的都是String[]类型的Email地址，如果数组中有多个地址，就可以发送给多人。发送的函数修改如下，我们看下效果:\n\n    \n    private void startSendEmailIntent(){\n    \t\tIntent data=new Intent(Intent.ACTION_SENDTO);\n    \t\tdata.setData(Uri.parse(\"mailto:qq10000@qq.com\"));\n    \t\tdata.putExtra(Intent.EXTRA_EMAIL, new String[]{\"ls8707@163.com\",\"ls8708@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_CC, new String[]{\"ls8709@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_BCC, new String[]{\"ls810@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_SUBJECT, \"这是标题\");\n    \t\tdata.putExtra(Intent.EXTRA_TEXT, \"这是内容\");\n    \t\tstartActivity(data);\n    \t}\n\n\n![](http://dl.iteye.com/upload/attachment/520438/c837b159-0616-3890-8344-2dd841b43585.png)\n\n\n## 五，发送附件\n\n\nEmail'客户端的发送Activity提供了两个Intent Filter，一个用于发送普通邮件，一个用户发送带有附件的邮件。区分很很容易的，发送普通邮件的那个Intent Filter配置的Action SENDTO，而带有附件的邮件则是SEND,所以是2个不一样，但是哪些比如附加“标题”，“内容”，“抄送”，“发送多人”等等还是通用的。布局文件新增一个按钮，用于发送带有附件的邮件，Activity代码也做修改。\n\n    \n    <Button\n    \tandroid:id=\"@+id/send_to_btn\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:text=\"SendTo Action\"/>\n\n\n\n\n    \n     /* * 发送邮件测试界面\n     * @author 飞雪无情 \n     * ＠since 2011-7-19\n     */\n    public class SendEmailActivity extends Activity implements View.OnClickListener{\n    \tprivate Button mSendBtn;\n    \tprivate Button mSendToBtn;\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            mSendBtn=(Button)findViewById(R.id.send_btn);\n            mSendToBtn=(Button)findViewById(R.id.send_to_btn);\n            mSendBtn.setOnClickListener(this);\n            mSendToBtn.setOnClickListener(this);\n        }\n    \t@Override\n    \tpublic void onClick(View v) {\n    \t\tswitch(v.getId()){\n    \t\tcase R.id.send_btn:\n    \t\t\tstartSendEmailIntent();\n    \t\t\tbreak;\n    \t\tcase R.id.send_to_btn:\n    \t\t\tstartSendToEmailIntent();\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tprivate void startSendEmailIntent(){\n    \t\tIntent data=new Intent(Intent.ACTION_SENDTO);\n    \t\tdata.setData(Uri.parse(\"mailto:qq10000@qq.com\"));\n    \t\tdata.putExtra(Intent.EXTRA_EMAIL, new String[]{\"ls8707@163.com\",\"ls8708@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_CC, new String[]{\"ls8709@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_BCC, new String[]{\"ls810@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_SUBJECT, \"这是标题\");\n    \t\tdata.putExtra(Intent.EXTRA_TEXT, \"这是内容\");\n    \t\tstartActivity(data);\n    \t}\n    \tprivate void startSendToEmailIntent(){\n    \t\tIntent data=new Intent(Intent.ACTION_SEND);\n    \t\tdata.putExtra(Intent.EXTRA_EMAIL, new String[]{\"ls8707@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_SUBJECT, \"这是标题\");\n    \t\tdata.putExtra(Intent.EXTRA_TEXT, \"这是内容\");\n    \t\tdata.putExtra(Intent.EXTRA_STREAM, Uri.parse(\"\"));\n    \t\tdata.setType(\"text/plain\");\n    \t\tstartActivity(data);\n    \t}\n    }\n\n\n运行应用，我们看到效果图里最小面的附件标识，说明已经可以发送附件了.\n\n![](http://dl.iteye.com/upload/attachment/520458/5ebe4f65-d647-3e0e-8a28-c351e8b5fccb.png)\n\n发送附件最重要的就是Action必须为SEND，type一定要设置setType(\"\"),还要为Intent.EXTRA_STREAM赋值，类型为Uri，一个附件的Uri。这样才能发送附件。\n\n\n## 六，客户端Email应用的发送Activity配置\n\n\n这是Android1.6自带Email客户端的配置，如下：\n\n    \n    <activity\n                android:name=\".activity.MessageCompose\"\n                android:label=\"@string/app_name\"\n                android:enabled=\"false\"\n                >\n                <intent-filter>\n                    <action android:name=\"android.intent.action.VIEW\" />\n                    <action android:name=\"android.intent.action.SENDTO\" />\n                    <data android:scheme=\"mailto\" />\n                    <category android:name=\"android.intent.category.DEFAULT\" />\n                    <category android:name=\"android.intent.category.BROWSABLE\" />\n                </intent-filter>\n                <intent-filter android:label=\"@string/app_name\">\n                    <action android:name=\"android.intent.action.SEND\" />\n                    <data android:mimeType=\"text/plain\" />\n                    <data android:mimeType=\"image/*\" />\n                    <data android:mimeType=\"video/*\" />\n                    <category android:name=\"android.intent.category.DEFAULT\" />\n                </intent-filter>\n            </activity>\n\n\n\n\n从以上代码总结:\n\n\n\n\t\n  1. 一个Activity定义了2个Intent Filter用于发送不同类型邮件。\n\n\t\n  2. SENDTO发送普通邮件，SEND可以发送普通和带有附件的，不过最好主要用于发送附件。\n\n\t\n  3. 使用SENDTO时，必须为Intent设置Data，也就是Uri，内容为\"mailto:emailaddr\",否则不能匹配，因为有schema必须为mailto的限制\n\n\t\n  4. 使用SEND时必须要设置type，也就是使用setType()方法，type只能为以前xml定义的4个。不过我测试了text/*也可以，其他的没测试.\n\n\t\n  5. 发送附件只能使用SEND这个Action.\n\n\n\n\n\n\n\n附加Email客户端中提取Email地址，抄送，标题，附件等信息的源代码分析.\n\n\n\n\n\n\n    \n    void initFromIntent(Intent intent) {\n    \n            //提取接受人地址列表\n            String[] extraStrings = intent.getStringArrayExtra(Intent.EXTRA_EMAIL);\n            if (extraStrings != null) {\n                addAddresses(mToView, extraStrings);\n            }\n    //提取抄送人地址列表\n            extraStrings = intent.getStringArrayExtra(Intent.EXTRA_CC);\n            if (extraStrings != null) {\n                addAddresses(mCcView, extraStrings);\n            }\n    //提取密送人地址列表\n            extraStrings = intent.getStringArrayExtra(Intent.EXTRA_BCC);\n            if (extraStrings != null) {\n                addAddresses(mBccView, extraStrings);\n            }\n    //提取标题\n            String extraString = intent.getStringExtra(Intent.EXTRA_SUBJECT);\n            if (extraString != null) {\n                mSubjectView.setText(extraString);\n            }\n    \n            //提取Uri中的接受人地址\n            final Uri dataUri = intent.getData();\n            if (dataUri != null) {\n                if (\"mailto\".equals(dataUri.getScheme())) {\n                    initializeFromMailTo(dataUri.toString());\n                } else {\n                    String toText = dataUri.getSchemeSpecificPart();\n                    if (toText != null) {\n                        addAddresses(mToView, toText.split(\",\"));\n                    }\n                }\n            }\n    \n           //提取邮件内容\n    \n            CharSequence text = intent.getCharSequenceExtra(Intent.EXTRA_TEXT);\n            if (text != null) {\n                mMessageContentView.setText(text);\n            }\n    \n          //提取附件，可以看出Action必须是SEND.EXTRA_STREAM中有数据\n         //type不能为null,这样才能提取倒附件.\n    \n            if (Intent.ACTION_SEND.equals(intent.getAction()) && intent.hasExtra(Intent.EXTRA_STREAM)) {\n                String type = intent.getType();\n                Uri stream = (Uri) intent.getParcelableExtra(Intent.EXTRA_STREAM);\n                if (stream != null && type != null) {\n                    if (MimeUtility.mimeTypeMatches(type, Email.ACCEPTABLE_ATTACHMENT_SEND_TYPES)) {\n                        addAttachment(stream);\n                    }\n                }\n            }\n    \n            // Finally - expose fields that were filled in but are normally hidden, and set focus\n    \n            if (mCcView.length() > 0) {\n                mCcView.setVisibility(View.VISIBLE);\n            }\n            if (mBccView.length() > 0) {\n                mBccView.setVisibility(View.VISIBLE);\n            }\n            setNewMessageFocus();\n            mDraftNeedsSaving = false;\n        }\n\n\n\n\n\n\n","source":"_posts/2011-07-19-android-send-email-intro.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-07-19 14:50:52+00:00\nlayout: post\nslug: android-send-email-intro\ntitle: Android中我为什么发不了邮件--Android邮件发送详解\nwordpress_id: 87\ncategories:\n- Android\ntags:\n- Android\n- Email\n---\n\nAndroid中我为什么发不了邮件？？？我手机里明明有邮件客户端的，可我为什么不能调用它发送邮件？？？相信这是很多人会问的问题，手机里有Email客户端，可是偏偏在自己的应用里调用不了，抑或是不知道怎么调用，还有的是一直认为自己写对了，可是偏偏不能调用，无奈之下只能却网上找段代码粘贴上，ok，可以了。。可是你知道别人的代码为什么可以？你知道调用Email是怎么工作的吗？如果你又像给多人发邮件，还想发送附件，怎么做？又迷糊了吧？所以需要搞懂原理才能一通百通，举一反三，而这就是这篇博文要写的，也是你可以在这篇博文中学到的。\n\n在这里你可以学到：\n\n\n\n\t\n  1. 什么是Intent和Intent Fileter\n\n\t\n  2. 如何发送Email\n\n\t\n  3. 如何发送特定的标题和内容的Emil\n\n\t\n  4. 如何发送给多人\n\n\t\n  5. 如何抄送和密送\n\n\t\n  6. 如何发送附件\n\n\n\n\n## 一：什么是Intent和Intent Fileter\n\n\n关于这个详细介绍请参考 :\n\n[Intents and Intent Filters(一)](/2011/03/14/android-intents-and-intent-filters-one.html)\n\n[Intents and Intent Filters(二)](/2011/03/17/android-intents-and-intent-filters-two.html)\n\n[Intents and Intent Filters(三)](/2011/03/29/android-intents-and-intent-filters-three.html)\n\n\n## 二：如何发送Email\n\n\n通过上面就会知道Android应用之间的通信是通过Intent这个东西，如果手机中有实现了你想要功能的应用那么你就不用麻烦去实现一个拉。直接使用就可以，比如这里的发送邮件。\n\n我们新建一个工程SendEmail，基于Android1.6实现。然后定义布局文件和代码如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <Button\n    \tandroid:id=\"@+id/send_btn\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:text=\"Send Action\"\n        />\n    </LinearLayout>\n\n\n\n\n    \n     /** 发送邮件测试界面\n     * @author 飞雪无情\n     * ＠since 2011-7-19\n     */\n    public class SendEmailActivity extends Activity implements View.OnClickListener{\n    \tprivate Button mSendBtn;\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            mSendBtn=(Button)findViewById(R.id.send_btn);\n            mSendBtn.setOnClickListener(this);\n        }\n    \t@Override\n    \tpublic void onClick(View v) {\n    \t\tswitch(v.getId()){\n    \t\tcase R.id.send_btn:\n    \t\t\tstartSendEmailIntent();\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tprivate void startSendEmailIntent(){\n    \t\tIntent data=new Intent(Intent.ACTION_SENDTO);\n    \t\tdata.setData(Uri.parse(\"mailto:qq10000@qq.com\"));\n    \t\tdata.putExtra(Intent.EXTRA_SUBJECT, \"这是标题\");\n    \t\tdata.putExtra(Intent.EXTRA_TEXT, \"这是内容\");\n    \t\tstartActivity(data);\n    \t}\n    }\n\n\n这是我们运行应用，点击按钮就会看到如下效果:\n\n![](http://dl.iteye.com/upload/attachment/520422/f01623aa-77eb-3a1f-bf30-306092c83e0d.png)\n![](http://dl.iteye.com/upload/attachment/520425/ed85ef04-3760-33a4-a0e7-b4fc2701eaca.png)\n\n\n## 三：分析发送代码\n\n\n主要的发送代码如下：\n\n    \n    Intent data=new Intent(Intent.ACTION_SENDTO);\n    data.setData(Uri.parse(\"mailto:qq10000@qq.com\"));\n    data.putExtra(Intent.EXTRA_SUBJECT, \"这是标题\");\n    data.putExtra(Intent.EXTRA_TEXT, \"这是内容\");\n    startActivity(data);\n\n\n\n\n\n\t\n  1.  首先构造一个Action为SENDTO的Action\n\n\t\n  2. 其次创建一个Uri，他是一个mailto的邮件链接，也就是接收地址.\n\n\t\n  3. 再通过Intent.EXTRA_SUBJECT和Intent.EXTRA_TEXT传递标题和文本的数据，记住，一定要使用这些常量，这是标准，否则Email客户端不认识，那样你传递的标题和文本就不起作用了。\n\n\t\n  4. 然后就是startActivity进行打开，系统会根据Intent自动匹配找到能处理这个intent的应用，如图列表，有很多个，我们这里选择网易掌上邮，就打开了一个邮件发送界面，如我们所愿，邮件地址、标题和内容都在了，很成功.\n\n\t\n  5. intent中的数据传递是以Extra的方式进行put后传递的，然后在使用的时候getter取出使用。\n\n\n\n\n## 四：发送给多人以及抄送和密送\n\n\n发送给多人以及抄送和密送都很简单，查找Intent类中的Extra常量，发送有这么三个常量:Intent.EXTRA_EMAIL,Intent.EXTRA_CC,Intent.EXTRA_BCC。这三个分别用于传递“接受人地址列表”、“抄送人地址列表”和“密送人地址列表”，传递的都是String[]类型的Email地址，如果数组中有多个地址，就可以发送给多人。发送的函数修改如下，我们看下效果:\n\n    \n    private void startSendEmailIntent(){\n    \t\tIntent data=new Intent(Intent.ACTION_SENDTO);\n    \t\tdata.setData(Uri.parse(\"mailto:qq10000@qq.com\"));\n    \t\tdata.putExtra(Intent.EXTRA_EMAIL, new String[]{\"ls8707@163.com\",\"ls8708@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_CC, new String[]{\"ls8709@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_BCC, new String[]{\"ls810@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_SUBJECT, \"这是标题\");\n    \t\tdata.putExtra(Intent.EXTRA_TEXT, \"这是内容\");\n    \t\tstartActivity(data);\n    \t}\n\n\n![](http://dl.iteye.com/upload/attachment/520438/c837b159-0616-3890-8344-2dd841b43585.png)\n\n\n## 五，发送附件\n\n\nEmail'客户端的发送Activity提供了两个Intent Filter，一个用于发送普通邮件，一个用户发送带有附件的邮件。区分很很容易的，发送普通邮件的那个Intent Filter配置的Action SENDTO，而带有附件的邮件则是SEND,所以是2个不一样，但是哪些比如附加“标题”，“内容”，“抄送”，“发送多人”等等还是通用的。布局文件新增一个按钮，用于发送带有附件的邮件，Activity代码也做修改。\n\n    \n    <Button\n    \tandroid:id=\"@+id/send_to_btn\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:text=\"SendTo Action\"/>\n\n\n\n\n    \n     /* * 发送邮件测试界面\n     * @author 飞雪无情 \n     * ＠since 2011-7-19\n     */\n    public class SendEmailActivity extends Activity implements View.OnClickListener{\n    \tprivate Button mSendBtn;\n    \tprivate Button mSendToBtn;\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            mSendBtn=(Button)findViewById(R.id.send_btn);\n            mSendToBtn=(Button)findViewById(R.id.send_to_btn);\n            mSendBtn.setOnClickListener(this);\n            mSendToBtn.setOnClickListener(this);\n        }\n    \t@Override\n    \tpublic void onClick(View v) {\n    \t\tswitch(v.getId()){\n    \t\tcase R.id.send_btn:\n    \t\t\tstartSendEmailIntent();\n    \t\t\tbreak;\n    \t\tcase R.id.send_to_btn:\n    \t\t\tstartSendToEmailIntent();\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tprivate void startSendEmailIntent(){\n    \t\tIntent data=new Intent(Intent.ACTION_SENDTO);\n    \t\tdata.setData(Uri.parse(\"mailto:qq10000@qq.com\"));\n    \t\tdata.putExtra(Intent.EXTRA_EMAIL, new String[]{\"ls8707@163.com\",\"ls8708@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_CC, new String[]{\"ls8709@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_BCC, new String[]{\"ls810@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_SUBJECT, \"这是标题\");\n    \t\tdata.putExtra(Intent.EXTRA_TEXT, \"这是内容\");\n    \t\tstartActivity(data);\n    \t}\n    \tprivate void startSendToEmailIntent(){\n    \t\tIntent data=new Intent(Intent.ACTION_SEND);\n    \t\tdata.putExtra(Intent.EXTRA_EMAIL, new String[]{\"ls8707@163.com\"});\n    \t\tdata.putExtra(Intent.EXTRA_SUBJECT, \"这是标题\");\n    \t\tdata.putExtra(Intent.EXTRA_TEXT, \"这是内容\");\n    \t\tdata.putExtra(Intent.EXTRA_STREAM, Uri.parse(\"\"));\n    \t\tdata.setType(\"text/plain\");\n    \t\tstartActivity(data);\n    \t}\n    }\n\n\n运行应用，我们看到效果图里最小面的附件标识，说明已经可以发送附件了.\n\n![](http://dl.iteye.com/upload/attachment/520458/5ebe4f65-d647-3e0e-8a28-c351e8b5fccb.png)\n\n发送附件最重要的就是Action必须为SEND，type一定要设置setType(\"\"),还要为Intent.EXTRA_STREAM赋值，类型为Uri，一个附件的Uri。这样才能发送附件。\n\n\n## 六，客户端Email应用的发送Activity配置\n\n\n这是Android1.6自带Email客户端的配置，如下：\n\n    \n    <activity\n                android:name=\".activity.MessageCompose\"\n                android:label=\"@string/app_name\"\n                android:enabled=\"false\"\n                >\n                <intent-filter>\n                    <action android:name=\"android.intent.action.VIEW\" />\n                    <action android:name=\"android.intent.action.SENDTO\" />\n                    <data android:scheme=\"mailto\" />\n                    <category android:name=\"android.intent.category.DEFAULT\" />\n                    <category android:name=\"android.intent.category.BROWSABLE\" />\n                </intent-filter>\n                <intent-filter android:label=\"@string/app_name\">\n                    <action android:name=\"android.intent.action.SEND\" />\n                    <data android:mimeType=\"text/plain\" />\n                    <data android:mimeType=\"image/*\" />\n                    <data android:mimeType=\"video/*\" />\n                    <category android:name=\"android.intent.category.DEFAULT\" />\n                </intent-filter>\n            </activity>\n\n\n\n\n从以上代码总结:\n\n\n\n\t\n  1. 一个Activity定义了2个Intent Filter用于发送不同类型邮件。\n\n\t\n  2. SENDTO发送普通邮件，SEND可以发送普通和带有附件的，不过最好主要用于发送附件。\n\n\t\n  3. 使用SENDTO时，必须为Intent设置Data，也就是Uri，内容为\"mailto:emailaddr\",否则不能匹配，因为有schema必须为mailto的限制\n\n\t\n  4. 使用SEND时必须要设置type，也就是使用setType()方法，type只能为以前xml定义的4个。不过我测试了text/*也可以，其他的没测试.\n\n\t\n  5. 发送附件只能使用SEND这个Action.\n\n\n\n\n\n\n\n附加Email客户端中提取Email地址，抄送，标题，附件等信息的源代码分析.\n\n\n\n\n\n\n    \n    void initFromIntent(Intent intent) {\n    \n            //提取接受人地址列表\n            String[] extraStrings = intent.getStringArrayExtra(Intent.EXTRA_EMAIL);\n            if (extraStrings != null) {\n                addAddresses(mToView, extraStrings);\n            }\n    //提取抄送人地址列表\n            extraStrings = intent.getStringArrayExtra(Intent.EXTRA_CC);\n            if (extraStrings != null) {\n                addAddresses(mCcView, extraStrings);\n            }\n    //提取密送人地址列表\n            extraStrings = intent.getStringArrayExtra(Intent.EXTRA_BCC);\n            if (extraStrings != null) {\n                addAddresses(mBccView, extraStrings);\n            }\n    //提取标题\n            String extraString = intent.getStringExtra(Intent.EXTRA_SUBJECT);\n            if (extraString != null) {\n                mSubjectView.setText(extraString);\n            }\n    \n            //提取Uri中的接受人地址\n            final Uri dataUri = intent.getData();\n            if (dataUri != null) {\n                if (\"mailto\".equals(dataUri.getScheme())) {\n                    initializeFromMailTo(dataUri.toString());\n                } else {\n                    String toText = dataUri.getSchemeSpecificPart();\n                    if (toText != null) {\n                        addAddresses(mToView, toText.split(\",\"));\n                    }\n                }\n            }\n    \n           //提取邮件内容\n    \n            CharSequence text = intent.getCharSequenceExtra(Intent.EXTRA_TEXT);\n            if (text != null) {\n                mMessageContentView.setText(text);\n            }\n    \n          //提取附件，可以看出Action必须是SEND.EXTRA_STREAM中有数据\n         //type不能为null,这样才能提取倒附件.\n    \n            if (Intent.ACTION_SEND.equals(intent.getAction()) && intent.hasExtra(Intent.EXTRA_STREAM)) {\n                String type = intent.getType();\n                Uri stream = (Uri) intent.getParcelableExtra(Intent.EXTRA_STREAM);\n                if (stream != null && type != null) {\n                    if (MimeUtility.mimeTypeMatches(type, Email.ACCEPTABLE_ATTACHMENT_SEND_TYPES)) {\n                        addAttachment(stream);\n                    }\n                }\n            }\n    \n            // Finally - expose fields that were filled in but are normally hidden, and set focus\n    \n            if (mCcView.length() > 0) {\n                mCcView.setVisibility(View.VISIBLE);\n            }\n            if (mBccView.length() > 0) {\n                mBccView.setVisibility(View.VISIBLE);\n            }\n            setNewMessageFocus();\n            mDraftNeedsSaving = false;\n        }\n\n\n\n\n\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvma003cz1n1mk9jzmfn"},{"author":"飞雪无情","comments":1,"date":"2011-07-17T02:09:52.000Z","layout":"post","slug":"practices-of-an-agile-developer","title":"高效程序员的45个习惯--敏捷开发修炼之道","wordpress_id":88,"_content":"\n笔者 写道\n在去年就在豆瓣上看到这本不错的书，近来才拿到这本书好好的研读一下。读了之后又对本书有了更深的认识。我如此推崇她，因为我觉得她不像有些书那样的长篇大论，讲的都是大道理，看了云里雾里的。而这本书呢，讲的都是我们项目开发中实实在在遇到的，只是平时不太注意，作者只是用更朴素易懂的语言组织总结出来的一个个好习惯。\n\n本书的文字言简意赅，写作方式采用坏习惯和好习惯的对比方式，当时也许你觉得这些习惯有点偏激，不过不要烦恼，因为每个习惯的最后作者都给出了中庸平衡之道。\n\n相信很多人都有这本书，但是也有没有的，或者还不知道这本书，为了加深我自己对这45个习惯的理解和为了让更多的人知道、了解这45个习惯，所以我在这篇博客中记录下这45个习惯。前面我也提了，这本书言简意赅，所以对于习惯的总结更是如此，让我们可以一看到习惯的标题，就知道这个习惯的精髓所在。\n\n\n### 态度决定一切\n\n\n\n\n\n\t\n  1. 做事\n\n\t\n  2. 欲速则不达\n\n\t\n  3. 对事不对人\n\n\t\n  4. 排除万难，奋勇前进\n\n\n\n\n### 学无止境\n\n\n\n\n\n\t\n  5. 跟踪变化\n\n\t\n  6. 对团队投资\n\n\t\n  7. 懂得丢弃\n\n\t\n  8. 打破沙锅问到底\n\n\t\n  9. 把握开发节奏\n\n\n\n\n### 交付用户想要的软件\n\n\n\n\n\n\t\n  10. 让客户做决定\n\n\t\n  11. 让设计指导而不是操纵开发\n\n\t\n  12. 合理地使用技术\n\n\t\n  13. 保持可以发布\n\n\t\n  14. 提早集成，频繁集成\n\n\t\n  15. 提早实现自动化部署\n\n\t\n  16. 使用演示获得频繁反馈\n\n\t\n  17. 使用短迭代，增量发布\n\n\t\n  18. 固定的价格就意味着背叛承诺\n\n\n\n\n### 敏捷反馈\n\n\n\n\n\n\t\n  19. 守护天使（单元测试）\n\n\t\n  20. 先用它再实现它\n\n\t\n  21. 不同环境，就有不用问题\n\n\t\n  22. 自动验收测试\n\n\t\n  23. 度量真实的进度\n\n\t\n  24. 倾听用户的声音\n\n\n\n\n### 敏捷编码\n\n\n\n\n\n\t\n  25. 代码要清晰地表达意图\n\n\t\n  26. 用代码沟通\n\n\t\n  27. 动态评估取舍\n\n\t\n  28. 增量式编程\n\n\t\n  29. 保持简单\n\n\t\n  30. 编写内聚的代码\n\n\t\n  31. 告知，不要询问\n\n\t\n  32. 根据契约进行替换\n\n\n\n\n### 敏捷调试\n\n\n\n\n\n\t\n  33. 记录问题解决日志\n\n\t\n  34. 警告就是错误\n\n\t\n  35. 对问题各个击破\n\n\t\n  36. 报告所有的异常\n\n\t\n  37. 提供有用的错误信息\n\n\n\n\n### 敏捷协作\n\n\n\n\n\n\t\n  38. 定期安排会面时间\n\n\t\n  39. 架构师必须写代码\n\n\t\n  40. 实行代码集体所有制\n\n\t\n  41. 成为指导者\n\n\t\n  42. 允许大家自己想办法\n\n\t\n  43. 准备好后再共享代码\n\n\t\n  44. 进行代码复查\n\n\t\n  45. 及时通报进展与问题\n\n\n笔者 写道\n\n这些都是些很不错的习惯，如果有你没有用到的，可以试着使用一下，有条件的也可以在团队推广使用，看看是否能带来惊喜。\n","source":"_posts/2011-07-17-practices-of-an-agile-developer.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-07-17 10:09:52+00:00\nlayout: post\nslug: practices-of-an-agile-developer\ntitle: 高效程序员的45个习惯--敏捷开发修炼之道\nwordpress_id: 88\ncategories:\n- 软件开发\ntags:\n- 敏捷\n- 软件工程\n- 软件开发\n---\n\n笔者 写道\n在去年就在豆瓣上看到这本不错的书，近来才拿到这本书好好的研读一下。读了之后又对本书有了更深的认识。我如此推崇她，因为我觉得她不像有些书那样的长篇大论，讲的都是大道理，看了云里雾里的。而这本书呢，讲的都是我们项目开发中实实在在遇到的，只是平时不太注意，作者只是用更朴素易懂的语言组织总结出来的一个个好习惯。\n\n本书的文字言简意赅，写作方式采用坏习惯和好习惯的对比方式，当时也许你觉得这些习惯有点偏激，不过不要烦恼，因为每个习惯的最后作者都给出了中庸平衡之道。\n\n相信很多人都有这本书，但是也有没有的，或者还不知道这本书，为了加深我自己对这45个习惯的理解和为了让更多的人知道、了解这45个习惯，所以我在这篇博客中记录下这45个习惯。前面我也提了，这本书言简意赅，所以对于习惯的总结更是如此，让我们可以一看到习惯的标题，就知道这个习惯的精髓所在。\n\n\n### 态度决定一切\n\n\n\n\n\n\t\n  1. 做事\n\n\t\n  2. 欲速则不达\n\n\t\n  3. 对事不对人\n\n\t\n  4. 排除万难，奋勇前进\n\n\n\n\n### 学无止境\n\n\n\n\n\n\t\n  5. 跟踪变化\n\n\t\n  6. 对团队投资\n\n\t\n  7. 懂得丢弃\n\n\t\n  8. 打破沙锅问到底\n\n\t\n  9. 把握开发节奏\n\n\n\n\n### 交付用户想要的软件\n\n\n\n\n\n\t\n  10. 让客户做决定\n\n\t\n  11. 让设计指导而不是操纵开发\n\n\t\n  12. 合理地使用技术\n\n\t\n  13. 保持可以发布\n\n\t\n  14. 提早集成，频繁集成\n\n\t\n  15. 提早实现自动化部署\n\n\t\n  16. 使用演示获得频繁反馈\n\n\t\n  17. 使用短迭代，增量发布\n\n\t\n  18. 固定的价格就意味着背叛承诺\n\n\n\n\n### 敏捷反馈\n\n\n\n\n\n\t\n  19. 守护天使（单元测试）\n\n\t\n  20. 先用它再实现它\n\n\t\n  21. 不同环境，就有不用问题\n\n\t\n  22. 自动验收测试\n\n\t\n  23. 度量真实的进度\n\n\t\n  24. 倾听用户的声音\n\n\n\n\n### 敏捷编码\n\n\n\n\n\n\t\n  25. 代码要清晰地表达意图\n\n\t\n  26. 用代码沟通\n\n\t\n  27. 动态评估取舍\n\n\t\n  28. 增量式编程\n\n\t\n  29. 保持简单\n\n\t\n  30. 编写内聚的代码\n\n\t\n  31. 告知，不要询问\n\n\t\n  32. 根据契约进行替换\n\n\n\n\n### 敏捷调试\n\n\n\n\n\n\t\n  33. 记录问题解决日志\n\n\t\n  34. 警告就是错误\n\n\t\n  35. 对问题各个击破\n\n\t\n  36. 报告所有的异常\n\n\t\n  37. 提供有用的错误信息\n\n\n\n\n### 敏捷协作\n\n\n\n\n\n\t\n  38. 定期安排会面时间\n\n\t\n  39. 架构师必须写代码\n\n\t\n  40. 实行代码集体所有制\n\n\t\n  41. 成为指导者\n\n\t\n  42. 允许大家自己想办法\n\n\t\n  43. 准备好后再共享代码\n\n\t\n  44. 进行代码复查\n\n\t\n  45. 及时通报进展与问题\n\n\n笔者 写道\n\n这些都是些很不错的习惯，如果有你没有用到的，可以试着使用一下，有条件的也可以在团队推广使用，看看是否能带来惊喜。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvmc003hz1n1l29yko2k"},{"author":"飞雪无情","comments":1,"date":"2011-05-21T06:43:55.000Z","layout":"post","slug":"android-thread-notice-item","title":"Android中关于线程使用的几点注意事项","wordpress_id":89,"_content":"\n我们都知道Android是单线程模型，这意味着Android UI操作并不是线程安全的并且这些操作必须在UI线程中执行，所以你单纯的new一个Thrad并且start()不行的，因为这违背了Android的单线程模型。\n\n很幸运的是Android为我们提供了在其他线程中访问UI线程的方法，相信大家都见过，这几个就是Activity的runOnUiThread方法，View的post和postDelayed方法，以及最常用的Hanlder和AsyncTask，这里我推荐使用Hanlder和AsyncTask，尤其是AsyncTask，因为使用他们你会发现你的代码很容易被理解，因为他们都有一些具有特定职责的方法，尤其是AsyncTask，有预处理的方法onPreExecute，有后台执行任务的方法doInBackground，有更新进度的方法publishProgress，有返回结果的方法onPostExecute等等，这就不像post这些方法，把所有的操作都一大坨的写在一个Runnable里。\n\n有了Android为我们提供了这些方法我们就可以很好的解决一些长时间处理的任务了，但是在使用的时候我们还必须注意以下几点：\n\n\n\n\t\n  1. 这些方法或者类必须在在UI线程中创建和调用\n\n\t\n  2. 其实这些方法和类最终的实现都是Android的Message、MessageQueue和Looper的机制，所以不要期待你会马上看到结果（效果），因为这是一个Loop一直循环出MessageQueue中的Message执行的过程，如果你没有看到效果，那么等等吧，因为还没有轮到你。\n\n\t\n  3. 有线程（多个）的地方就会有并发，会有资源共享冲突，所以在使用的时候谨慎点吧，说不准你的一个线程中使用的变量已经被另一个线程改的面目全非了。。\n\n\n\n\n后语：忙的很久没有写博客了，搭黑写了平时总结的线程的注意事项，demo就不写了，相信大家都会，此外多了解点Android的消息机制对于这个理解比较好的多。。\n","source":"_posts/2011-05-21-android-thread-notice-item.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-05-21 14:43:55+00:00\nlayout: post\nslug: android-thread-notice-item\ntitle: Android中关于线程使用的几点注意事项\nwordpress_id: 89\ncategories:\n- Android\ntags:\n- Android\n---\n\n我们都知道Android是单线程模型，这意味着Android UI操作并不是线程安全的并且这些操作必须在UI线程中执行，所以你单纯的new一个Thrad并且start()不行的，因为这违背了Android的单线程模型。\n\n很幸运的是Android为我们提供了在其他线程中访问UI线程的方法，相信大家都见过，这几个就是Activity的runOnUiThread方法，View的post和postDelayed方法，以及最常用的Hanlder和AsyncTask，这里我推荐使用Hanlder和AsyncTask，尤其是AsyncTask，因为使用他们你会发现你的代码很容易被理解，因为他们都有一些具有特定职责的方法，尤其是AsyncTask，有预处理的方法onPreExecute，有后台执行任务的方法doInBackground，有更新进度的方法publishProgress，有返回结果的方法onPostExecute等等，这就不像post这些方法，把所有的操作都一大坨的写在一个Runnable里。\n\n有了Android为我们提供了这些方法我们就可以很好的解决一些长时间处理的任务了，但是在使用的时候我们还必须注意以下几点：\n\n\n\n\t\n  1. 这些方法或者类必须在在UI线程中创建和调用\n\n\t\n  2. 其实这些方法和类最终的实现都是Android的Message、MessageQueue和Looper的机制，所以不要期待你会马上看到结果（效果），因为这是一个Loop一直循环出MessageQueue中的Message执行的过程，如果你没有看到效果，那么等等吧，因为还没有轮到你。\n\n\t\n  3. 有线程（多个）的地方就会有并发，会有资源共享冲突，所以在使用的时候谨慎点吧，说不准你的一个线程中使用的变量已经被另一个线程改的面目全非了。。\n\n\n\n\n后语：忙的很久没有写博客了，搭黑写了平时总结的线程的注意事项，demo就不写了，相信大家都会，此外多了解点Android的消息机制对于这个理解比较好的多。。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvmg003oz1n1g9xaxac9"},{"author":"飞雪无情","comments":1,"date":"2011-03-28T18:02:48.000Z","layout":"post","slug":"android-intents-and-intent-filters-three","title":"Android Intents and Intent Filters(三)","wordpress_id":90,"_content":"\n## 数据(data)检测\n\n\ndata标记也是在intent-filter中定义的，大致格式如下:\n\n    \n    <intent-filter>\n            \t\t<action android:name=\"android.intent.action.VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t\t<data android:mimeType=\"text/plain\"></data>\n            \t</intent-filter>\n\n\n每个data定义一个URI和数据类型(MIME)，URI由4个属性来定义，分别是android:scheme,android:host,android:port,android:path..这个四个属性构成如下格式的URI:\nscheme://host:port/path\n\n如：content://com.flysnow.intent:8080/show/view。其中content就是scheme，com.flysnow.intent就是host，8080就是port,show/view就是path...如果有经常使用ContentProvider的应该熟悉。。我们经常定义的authority不就是host+port吗？还有这几个元素都是可选的，但是不是随便用就可以的，port要依赖于host，没有host，port就会被忽略，不起作用，同样，如果要使用host+port(authority)就必须指定scheme。而path则依赖于scheme和authority。。\n\n还有一个很重要的类型就是mimeType,这个属性用于指定内容的类型，也就是这个组件可以处理哪些类型的内容。。如text/plain表示无格式文本类型，mimeType也支持通配符，使用text/*则表示所有文本类型。通过使用它，你可以很方便的开发出关联打开诸如txt文件，pdf文件的应用。后面的两个自理将会演示txt文件查看器，图片查看器的例子。。MIME可以参考http://www.w3school.com.cn/media/media_mimeref.asp。这里有所有的内容类型的定义。。\n\n\n### 开发实例-拨打电话，text阅读器和图片查看器\n\n\n\n\n### \n\n\n下面通过一个例子来演示data的检测,项目名为Intents,应用名为Intents and Filters，运行在Android2.2版本上.主启动Activity为IntentsTestList。例子包括以下演示：\n\n\n\n\t\n  1. 通过发送intent的方式“打开拨号界面并输入电话123456”。\n\n\t\n  2. 创建一个Text文件阅读器\n\n\t\n  3. 创建一个图片查看器\n\n\n首先我们实现第一项，修改IntentsTestList类如下：\n\n    \n    /**\n     * Intents测试列表类\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class IntentsTestList extends ListActivity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n          //定义ListAdapter\n    \t\tsetListAdapter(new SimpleAdapter(this, getData(),\n    \t\t\t\tandroid.R.layout.simple_list_item_1, new String[] { \"title\" },new int[] {android.R.id.text1}));\n    \t\tgetListView().setTextFilterEnabled(true);\n        }\n    \t@Override\n    \tprotected void onListItemClick(ListView l, View v, int position, long id) {\n    \t\tIntent intent=(Intent)getData().get(position).get(\"intent\");\n    \t\tBoolean isActivity=(Boolean)getData().get(position).get(\"isActivity\");\n    \t\tif(isActivity){\n    \t\t\tstartActivity(intent);\n    \t\t}else{\n    \t\t\tsendBroadcast(intent);\n    \t\t}\n    \t}\n    \n    \t/**\n    \t * 返回ListView需要的数据\n    \t * @return ListView需要的数据\n    \t */\n    \tprivate List<map<string,object>> getData() {\n    \t\tList<map<string,object>> data=new ArrayList<map<string,object>>();\n    \t\taddItem(data, \"打开拨号界面并输入电话123456\", new Intent(Intent.ACTION_DIAL, Uri.parse(\"tel://123456\")), true);\n    \t\treturn data;\n    \t}\n    \t/**\n    \t * 给ListView添加数据\n    \t * @param data 存储数据的List\n    \t * @param name 要显示的Title\n    \t * @param intent 单击某一项时要启动的Activity\n    \t * @param isActivity 启动的是否是Activity，true是，false为广播\n    \t */\n    \tprivate void addItem(List<map<string,object>> data, String name, Intent intent,boolean isActivity) {\n            Map<string, object=\"\"> temp = new HashMap<string, object=\"\">();\n            temp.put(\"title\", name);\n            temp.put(\"intent\", intent);\n            temp.put(\"isActivity\", isActivity);\n            data.add(temp);\n        }\n    \n    }\n\n\n这时我们运行程序，单击“打开拨号界面并输入电话123456”就会打开系统的自带的拨号界面，并且默认已经录入了要拨打的号码“123456”。效果图如下：\n![](http://dl.iteye.com/upload/attachment/449159/2d492720-aea1-316f-a85f-52e465d8b106.png)\n\n![](http://dl.iteye.com/upload/attachment/449161/b0112c45-6c10-351d-a538-80b8b0a34b6c.png)\n\n\n###   然后我们实现第二功能-txt文件阅读器\n\n\n新建TextWatcherActivity代码如下：\n\n    \n    /**\n     * 显示文本的Activity\n     * @author 飞雪无情\n     * @since 2011-3-24\n     */\n    public class TextWatcherActivity extends Activity {\n    \tprivate TextView mTextView;\n    \n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tmTextView=new TextView(this);\n    \t\tsetContentView(mTextView);\n    \t}\n    \n    \t@Override\n    \tprotected void onStart() {\n    \t\tsuper.onStart();\n    \t\tIntent txtIntent=getIntent();\n    \t\tUri data=txtIntent.getData();\n    \t\tString txt;\n    \t\ttry {\n    \t\t\ttxt = readTxt(data);\n    \t\t} catch (IOException e) {\n    \t\t\ttxt=\"打开txt文件异常\";\n    \t\t}\n    \t\tmTextView.setText(txt);\n    \t}\n    \t/**\n    \t * 读取txt文本\n    \t * @param txtUri\n    \t * @return\n    \t * @throws IOException\n    \t */\n    \tprivate String readTxt(Uri txtUri) throws IOException{\n    \t\tBufferedReader bufferedReader=new BufferedReader(new InputStreamReader(getContentResolver().openInputStream(txtUri),Charset.forName(\"GBK\")));\n    \t\tStringBuilder txt=new StringBuilder();\n    \t\tString buf=\"\";\n    \t\twhile((buf=bufferedReader.readLine())!=null){\n    \t\t\ttxt.append(buf).append(\"\\n\");\n    \t\t}\n    \t\treturn txt.toString();\n    \t}\n    \n    }\n\n\n然后在AndroidManifest.xml中加入如下定义:\n\n    \n    <activity android:name=\".TextWatcherActivity\"\n            \tandroid:label=\"查看TXT文件\">\n            \t<intent-filter>\n            \t\t<action android:name=\"android.intent.action.VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t\t<data android:mimeType=\"text/plain\"></data>\n            \t</intent-filter>\n            </activity>\n\n\n这样在单击txt文件的时候就可以选择我们的这个Activity对txt文件处理，显示其内容.我们新建一个1.txt文件，写上一些内容，放在我们的sd卡中，使用文件管理工具查看这个txt文件，会弹出如下图的提示，看到我们刚刚做的《TXT阅读器》了吧。\n\n![](http://dl.iteye.com/upload/attachment/449475/079e5ed7-7342-39bf-95af-c95ec024681c.png)\n\n选择“查看TXT文件”，就可以看到我们的txt内容：\n\n![](http://dl.iteye.com/upload/attachment/449477/e1fb042a-0555-3e43-b225-7fe7fce94dad.png)\n\n\n### 最后实现第三个功能--图片查看器\n\n\n新建ImageWatcherActivity，代码如下：\n\n    \n    /**\n     * 显示文本的Activity\n     * @author 飞雪无情\n     * @since 2011-3-24\n     */\n    public class ImageWatcherActivity extends Activity {\n    \tprivate final String IMAGE_URI_KEY=\"imageUriKey\";\n    \tprivate Uri image;\n    \tprivate ImageView mImageView;\n    \n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tmImageView=new ImageView(this);\n    \t\tsetContentView(mImageView);\n    \t}\n    \n    \t@Override\n    \tprotected void onStart() {\n    \t\tsuper.onStart();\n    \t\tIntent txtIntent=getIntent();\n    \t\timage=txtIntent.getData();\n    \t\t//对于大图片未做优化处理\n    \t\tmImageView.setImageURI(image);\n    \t}\n    \n    \t@Override\n    \tprotected void onRestoreInstanceState(Bundle savedInstanceState) {\n    \t\tsuper.onRestoreInstanceState(savedInstanceState);\n    \t\timage=savedInstanceState.getParcelable(IMAGE_URI_KEY);\n    \t\tmImageView.setImageURI(image);\n    \t}\n    \n    \t@Override\n    \tprotected void onSaveInstanceState(Bundle outState) {\n    \t\tsuper.onSaveInstanceState(outState);\n    \t\toutState.putParcelable(IMAGE_URI_KEY,image);\n    \t}\n    \n    }\n\n\n然后在AndroidManifest.xml中加入如下定义:\n\n    \n    <activity android:name=\".ImageWatcherActivity\"\n            \tandroid:label=\"查看图片文件\">\n            \t<intent-filter>\n            \t\t<action android:name=\"android.intent.action.VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t\t<data android:mimeType=\"image/*\"></data>\n            \t</intent-filter>\n            </activity>\n\n\n这样在单击图片文件的时候就可以选择我们的这个Activity对txt文件处理并且显示。\n\n![](http://dl.iteye.com/upload/attachment/449481/9b6c7d30-4ed9-3fb4-8615-42dea2f0e02c.png)\n\n![](http://dl.iteye.com/upload/attachment/449483/dba27c5a-45df-3339-9fa6-e2135cff7fb6.png)\n\n\n### 数据(data)检测小结\n\n\n对于data的匹配，如果说怎么怎么匹配，在什么情况下通过可能会比较难以理解，这里以一种简单的方式来解说。\n\n假定我们定义的Intent Filter 的data标签为集合A，传递的Intent中包含的data为集合B，当B是A的子集时就通过了（Action和Category也得检测通过）。如果B为空（不配置data），那么A也得为空（不配置data）才能通过\n。更详细（繁琐）的介绍请参考doc\n\n\n### Intents and Intent Filters总结\n\n\nAndroid提供了以Intent的方式调用Android设备的内置Google应用，比如打电话，调用Google浏览器打开网页，搜索等。关于这方便的介绍可以参考Android开发文档《Intents List: Invoking Google Applications on Android Devices》这一节的介绍，很详细。docs/guide/appendix/g-app-intents.html。\n\nIntent是一个很好的设计，它提供了一种在各个组建之间通信的方式，也为我们使用其他的应用的功能提供了可能，这样如果我们想在自己的应用打开一个网页，我们就不用特意迁入一个webview，我们直接调用Android内的浏览器打开即可。。\n\n最后值得一提的是PackageManager这个类中为我们提供了一系列的query...()方法，可以让我们根据我们定义的Intent查询特定的匹配Intent Filter标记的所有组件。。有兴趣的可以研究一下。。\n","source":"_posts/2011-03-29-android-intents-and-intent-filters-three.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-03-29 02:02:48+00:00\nlayout: post\nslug: android-intents-and-intent-filters-three\ntitle: Android Intents and Intent Filters(三)\nwordpress_id: 90\ncategories:\n- Android\ntags:\n- Android\n- Intent\n---\n\n## 数据(data)检测\n\n\ndata标记也是在intent-filter中定义的，大致格式如下:\n\n    \n    <intent-filter>\n            \t\t<action android:name=\"android.intent.action.VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t\t<data android:mimeType=\"text/plain\"></data>\n            \t</intent-filter>\n\n\n每个data定义一个URI和数据类型(MIME)，URI由4个属性来定义，分别是android:scheme,android:host,android:port,android:path..这个四个属性构成如下格式的URI:\nscheme://host:port/path\n\n如：content://com.flysnow.intent:8080/show/view。其中content就是scheme，com.flysnow.intent就是host，8080就是port,show/view就是path...如果有经常使用ContentProvider的应该熟悉。。我们经常定义的authority不就是host+port吗？还有这几个元素都是可选的，但是不是随便用就可以的，port要依赖于host，没有host，port就会被忽略，不起作用，同样，如果要使用host+port(authority)就必须指定scheme。而path则依赖于scheme和authority。。\n\n还有一个很重要的类型就是mimeType,这个属性用于指定内容的类型，也就是这个组件可以处理哪些类型的内容。。如text/plain表示无格式文本类型，mimeType也支持通配符，使用text/*则表示所有文本类型。通过使用它，你可以很方便的开发出关联打开诸如txt文件，pdf文件的应用。后面的两个自理将会演示txt文件查看器，图片查看器的例子。。MIME可以参考http://www.w3school.com.cn/media/media_mimeref.asp。这里有所有的内容类型的定义。。\n\n\n### 开发实例-拨打电话，text阅读器和图片查看器\n\n\n\n\n### \n\n\n下面通过一个例子来演示data的检测,项目名为Intents,应用名为Intents and Filters，运行在Android2.2版本上.主启动Activity为IntentsTestList。例子包括以下演示：\n\n\n\n\t\n  1. 通过发送intent的方式“打开拨号界面并输入电话123456”。\n\n\t\n  2. 创建一个Text文件阅读器\n\n\t\n  3. 创建一个图片查看器\n\n\n首先我们实现第一项，修改IntentsTestList类如下：\n\n    \n    /**\n     * Intents测试列表类\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class IntentsTestList extends ListActivity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n          //定义ListAdapter\n    \t\tsetListAdapter(new SimpleAdapter(this, getData(),\n    \t\t\t\tandroid.R.layout.simple_list_item_1, new String[] { \"title\" },new int[] {android.R.id.text1}));\n    \t\tgetListView().setTextFilterEnabled(true);\n        }\n    \t@Override\n    \tprotected void onListItemClick(ListView l, View v, int position, long id) {\n    \t\tIntent intent=(Intent)getData().get(position).get(\"intent\");\n    \t\tBoolean isActivity=(Boolean)getData().get(position).get(\"isActivity\");\n    \t\tif(isActivity){\n    \t\t\tstartActivity(intent);\n    \t\t}else{\n    \t\t\tsendBroadcast(intent);\n    \t\t}\n    \t}\n    \n    \t/**\n    \t * 返回ListView需要的数据\n    \t * @return ListView需要的数据\n    \t */\n    \tprivate List<map<string,object>> getData() {\n    \t\tList<map<string,object>> data=new ArrayList<map<string,object>>();\n    \t\taddItem(data, \"打开拨号界面并输入电话123456\", new Intent(Intent.ACTION_DIAL, Uri.parse(\"tel://123456\")), true);\n    \t\treturn data;\n    \t}\n    \t/**\n    \t * 给ListView添加数据\n    \t * @param data 存储数据的List\n    \t * @param name 要显示的Title\n    \t * @param intent 单击某一项时要启动的Activity\n    \t * @param isActivity 启动的是否是Activity，true是，false为广播\n    \t */\n    \tprivate void addItem(List<map<string,object>> data, String name, Intent intent,boolean isActivity) {\n            Map<string, object=\"\"> temp = new HashMap<string, object=\"\">();\n            temp.put(\"title\", name);\n            temp.put(\"intent\", intent);\n            temp.put(\"isActivity\", isActivity);\n            data.add(temp);\n        }\n    \n    }\n\n\n这时我们运行程序，单击“打开拨号界面并输入电话123456”就会打开系统的自带的拨号界面，并且默认已经录入了要拨打的号码“123456”。效果图如下：\n![](http://dl.iteye.com/upload/attachment/449159/2d492720-aea1-316f-a85f-52e465d8b106.png)\n\n![](http://dl.iteye.com/upload/attachment/449161/b0112c45-6c10-351d-a538-80b8b0a34b6c.png)\n\n\n###   然后我们实现第二功能-txt文件阅读器\n\n\n新建TextWatcherActivity代码如下：\n\n    \n    /**\n     * 显示文本的Activity\n     * @author 飞雪无情\n     * @since 2011-3-24\n     */\n    public class TextWatcherActivity extends Activity {\n    \tprivate TextView mTextView;\n    \n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tmTextView=new TextView(this);\n    \t\tsetContentView(mTextView);\n    \t}\n    \n    \t@Override\n    \tprotected void onStart() {\n    \t\tsuper.onStart();\n    \t\tIntent txtIntent=getIntent();\n    \t\tUri data=txtIntent.getData();\n    \t\tString txt;\n    \t\ttry {\n    \t\t\ttxt = readTxt(data);\n    \t\t} catch (IOException e) {\n    \t\t\ttxt=\"打开txt文件异常\";\n    \t\t}\n    \t\tmTextView.setText(txt);\n    \t}\n    \t/**\n    \t * 读取txt文本\n    \t * @param txtUri\n    \t * @return\n    \t * @throws IOException\n    \t */\n    \tprivate String readTxt(Uri txtUri) throws IOException{\n    \t\tBufferedReader bufferedReader=new BufferedReader(new InputStreamReader(getContentResolver().openInputStream(txtUri),Charset.forName(\"GBK\")));\n    \t\tStringBuilder txt=new StringBuilder();\n    \t\tString buf=\"\";\n    \t\twhile((buf=bufferedReader.readLine())!=null){\n    \t\t\ttxt.append(buf).append(\"\\n\");\n    \t\t}\n    \t\treturn txt.toString();\n    \t}\n    \n    }\n\n\n然后在AndroidManifest.xml中加入如下定义:\n\n    \n    <activity android:name=\".TextWatcherActivity\"\n            \tandroid:label=\"查看TXT文件\">\n            \t<intent-filter>\n            \t\t<action android:name=\"android.intent.action.VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t\t<data android:mimeType=\"text/plain\"></data>\n            \t</intent-filter>\n            </activity>\n\n\n这样在单击txt文件的时候就可以选择我们的这个Activity对txt文件处理，显示其内容.我们新建一个1.txt文件，写上一些内容，放在我们的sd卡中，使用文件管理工具查看这个txt文件，会弹出如下图的提示，看到我们刚刚做的《TXT阅读器》了吧。\n\n![](http://dl.iteye.com/upload/attachment/449475/079e5ed7-7342-39bf-95af-c95ec024681c.png)\n\n选择“查看TXT文件”，就可以看到我们的txt内容：\n\n![](http://dl.iteye.com/upload/attachment/449477/e1fb042a-0555-3e43-b225-7fe7fce94dad.png)\n\n\n### 最后实现第三个功能--图片查看器\n\n\n新建ImageWatcherActivity，代码如下：\n\n    \n    /**\n     * 显示文本的Activity\n     * @author 飞雪无情\n     * @since 2011-3-24\n     */\n    public class ImageWatcherActivity extends Activity {\n    \tprivate final String IMAGE_URI_KEY=\"imageUriKey\";\n    \tprivate Uri image;\n    \tprivate ImageView mImageView;\n    \n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tmImageView=new ImageView(this);\n    \t\tsetContentView(mImageView);\n    \t}\n    \n    \t@Override\n    \tprotected void onStart() {\n    \t\tsuper.onStart();\n    \t\tIntent txtIntent=getIntent();\n    \t\timage=txtIntent.getData();\n    \t\t//对于大图片未做优化处理\n    \t\tmImageView.setImageURI(image);\n    \t}\n    \n    \t@Override\n    \tprotected void onRestoreInstanceState(Bundle savedInstanceState) {\n    \t\tsuper.onRestoreInstanceState(savedInstanceState);\n    \t\timage=savedInstanceState.getParcelable(IMAGE_URI_KEY);\n    \t\tmImageView.setImageURI(image);\n    \t}\n    \n    \t@Override\n    \tprotected void onSaveInstanceState(Bundle outState) {\n    \t\tsuper.onSaveInstanceState(outState);\n    \t\toutState.putParcelable(IMAGE_URI_KEY,image);\n    \t}\n    \n    }\n\n\n然后在AndroidManifest.xml中加入如下定义:\n\n    \n    <activity android:name=\".ImageWatcherActivity\"\n            \tandroid:label=\"查看图片文件\">\n            \t<intent-filter>\n            \t\t<action android:name=\"android.intent.action.VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t\t<data android:mimeType=\"image/*\"></data>\n            \t</intent-filter>\n            </activity>\n\n\n这样在单击图片文件的时候就可以选择我们的这个Activity对txt文件处理并且显示。\n\n![](http://dl.iteye.com/upload/attachment/449481/9b6c7d30-4ed9-3fb4-8615-42dea2f0e02c.png)\n\n![](http://dl.iteye.com/upload/attachment/449483/dba27c5a-45df-3339-9fa6-e2135cff7fb6.png)\n\n\n### 数据(data)检测小结\n\n\n对于data的匹配，如果说怎么怎么匹配，在什么情况下通过可能会比较难以理解，这里以一种简单的方式来解说。\n\n假定我们定义的Intent Filter 的data标签为集合A，传递的Intent中包含的data为集合B，当B是A的子集时就通过了（Action和Category也得检测通过）。如果B为空（不配置data），那么A也得为空（不配置data）才能通过\n。更详细（繁琐）的介绍请参考doc\n\n\n### Intents and Intent Filters总结\n\n\nAndroid提供了以Intent的方式调用Android设备的内置Google应用，比如打电话，调用Google浏览器打开网页，搜索等。关于这方便的介绍可以参考Android开发文档《Intents List: Invoking Google Applications on Android Devices》这一节的介绍，很详细。docs/guide/appendix/g-app-intents.html。\n\nIntent是一个很好的设计，它提供了一种在各个组建之间通信的方式，也为我们使用其他的应用的功能提供了可能，这样如果我们想在自己的应用打开一个网页，我们就不用特意迁入一个webview，我们直接调用Android内的浏览器打开即可。。\n\n最后值得一提的是PackageManager这个类中为我们提供了一系列的query...()方法，可以让我们根据我们定义的Intent查询特定的匹配Intent Filter标记的所有组件。。有兴趣的可以研究一下。。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvmj003rz1n1e7xjudls"},{"author":"飞雪无情","comments":1,"date":"2011-03-27T19:22:31.000Z","layout":"post","slug":"do-you-know-android-resource","title":"android.resource://这个Uri你知道吗","wordpress_id":91,"_content":"\n\n\n如何访问平时APK文件Res目录下的内容呢? 如果直接访问Apk下的assets目录可以使用AssetManager类处理，而需要访问\nres/raw这样的文件夹怎么办呢? 这里Android123可以告诉大家APK在安装时已经解压缩，部分资源存放在/data/data\n/package_name/这里， 比如我们想访问res/raw/android123.cwj文件，可以使用android.resource:\n//package_name/\" + R.raw.android123 这个Uri，其中package_name是你工程的包名。\n完整的处理代码为 Uri uri = Uri.parse(\"android.resource://com.android123.Sample/raw/android123.cwj\"); 即可使用工程res/raw目录下的文件了。\n\n转自：http://www.android123.com.cn/androidkaifa/827.html\n","source":"_posts/2011-03-28-do-you-know-android-resource.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-03-28 03:22:31+00:00\nlayout: post\nslug: do-you-know-android-resource\ntitle: android.resource://这个Uri你知道吗\nwordpress_id: 91\ncategories:\n- Android\ntags:\n- Android\n---\n\n\n\n如何访问平时APK文件Res目录下的内容呢? 如果直接访问Apk下的assets目录可以使用AssetManager类处理，而需要访问\nres/raw这样的文件夹怎么办呢? 这里Android123可以告诉大家APK在安装时已经解压缩，部分资源存放在/data/data\n/package_name/这里， 比如我们想访问res/raw/android123.cwj文件，可以使用android.resource:\n//package_name/\" + R.raw.android123 这个Uri，其中package_name是你工程的包名。\n完整的处理代码为 Uri uri = Uri.parse(\"android.resource://com.android123.Sample/raw/android123.cwj\"); 即可使用工程res/raw目录下的文件了。\n\n转自：http://www.android123.com.cn/androidkaifa/827.html\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvml003wz1n17abfolal"},{"author":"飞雪无情","comments":1,"date":"2011-03-17T00:41:02.000Z","layout":"post","slug":"android-intents-and-intent-filters-two","title":"Android Intents and Intent Filters(二)","wordpress_id":92,"_content":"\n## Category（类别）检测\n\n\n类别在中是通过标记定义的,Category和Action一样，他们的名字都是一个字符串定义，但是我们在代码中可以使用对应的类别常量，在xml文件定义中只能使用定义好的字符串。Android的Intent类中提供了很多内置的类别定义，一中类别代表一个意思，可以参考说明使用。。比如android.intent.category.LAUNCHER标表示你的应用会展示在启动列表页面，经常和android.intent.action.MAIN搭配使用\n\n下面通过一个例子来说明Category的检测,项目名为Intents,应用名为Intents and Filters，运行在Android2.2版本上.主启动Activity为IntentsTestList。\n\nIntentsTestList代码如下:\n\n    \n    /**\n     * Intents测试列表类\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class IntentsTestList extends ListActivity {\n    \tprivate String ACTION_VIEW=\"com.flysnow.intent.ACTION_VIEW\";\n    \tprivate String CATEGORY_MAN=\"com.flysnow.intent.CATEGORY_MAN\";\n    \tprivate String CATEGORY_SHOP=\"com.flysnow.intent.CATEGORY_SHOP\";\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n          //定义ListAdapter\n    \t\tsetListAdapter(new SimpleAdapter(this, getData(),\n    \t\t\t\tandroid.R.layout.simple_list_item_1, new String[] { \"title\" },new int[] {android.R.id.text1}));\n    \t\tgetListView().setTextFilterEnabled(true);\n    \n    \t\tfilter.addCategory(CATEGORY_MAN);\n    \t\t//注册一个广播\n            super.registerReceiver(new BroadcastReceiver() {\n    \n    \t\t\t@Override\n    \t\t\tpublic void onReceive(Context context, Intent intent) {\n    \t\t\t\tToast.makeText(context, \"该Broadcast的Intent Filter设置了Category和Action\", Toast.LENGTH_SHORT).show();\n    \t\t\t}\n    \t\t},filter);\n        }\n    \t@Override\n    \tprotected void onListItemClick(ListView l, View v, int position, long id) {\n    \t\tIntent intent=(Intent)getData().get(position).get(\"intent\");\n    \t\tBoolean isActivity=(Boolean)getData().get(position).get(\"isActivity\");\n    \t\tif(isActivity){\n    \t\t\tstartActivity(intent);\n    \t\t}else{\n    \t\t\tsendBroadcast(intent);\n    \t\t}\n    \n    \t}\n    \n    \t/**\n    \t * 返回ListView需要的数据\n    \t * @return ListView需要的数据\n    \t */\n    \tprivate List<map<string,object>> getData() {\n    \t\tList<map<string,object>> data=new ArrayList<map<string,object>>();\n    \t\taddItem(data, \"1个Category检测-Activity\", new Intent(ACTION_VIEW).addCategory(CATEGORY_MAN),true);\n    \t\taddItem(data, \"1个Category检测-Broadcast\", new Intent(ACTION_VIEW).addCategory(CATEGORY_MAN),false);\n    \t\taddItem(data, \"2个Category检测-Activity\", new Intent(ACTION_VIEW).addCategory(CATEGORY_MAN).addCategory(CATEGORY_SHOP),true);\n    \t\treturn data;\n    \t}\n    \t/**\n    \t * 给ListView添加数据\n    \t * @param data 存储数据的List\n    \t * @param name 要显示的Title\n    \t * @param intent 单击某一项时要启动的Activity\n    \t * @param isActivity 启动的是否是Activity，true是，false为广播\n    \t */\n    \tprivate void addItem(List<map<string,object>> data, String name, Intent intent,boolean isActivity) {\n            Map<string, object=\"\"> temp = new HashMap<string, object=\"\">();\n            temp.put(\"title\", name);\n            temp.put(\"intent\", intent);\n            temp.put(\"isActivity\", isActivity);\n            data.add(temp);\n        }\n    \tprivate IntentFilter filter=new IntentFilter(ACTION_VIEW);\n    \n    }\n\n\n以上代码主要是一个ListView，列出了三个测试项，1个Category的测试和2个Category的测试，注册了一个广播.\n为了测试新建了2个Activity，分别是CategoryActivity和Category2Activity,代码如下：\n\n    \n    /**\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class CategoryActivity extends Activity {\n    \n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tTextView text=new TextView(this);\n    \t\ttext.setText(\"该Activity的Intent Filter值设置了Action和1个Category，不包含android.intent.category.DEFAULT\");\n    \t\tsetContentView(text);\n    \t}\n    \n    }\n\n\n\n    \n    /**\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class Category2Activity extends Activity {\n    \n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tTextView text=new TextView(this);\n    \t\ttext.setText(\"该Activity的Intent Filter值设置了Action和2个Category，不包含android.intent.category.DEFAULT\");\n    \t\tsetContentView(text);\n    \t}\n    \n    }\n\n\n很简单只是一段文字的说明\n\nAndroidManiftest.xml修改如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.flysnow.intent\"\n          android:versionCode=\"1\"\n          android:versionName=\"1.0\">\n        <uses-sdk android:minSdkVersion=\"8\" />\n    \n        <application android:icon=\"@drawable/icon\" android:label=\"@string/app_name\">\n            <activity android:name=\".IntentsTestList\"\n                      android:label=\"@string/app_name\">\n                <intent-filter>\n                    <action android:name=\"android.intent.action.MAIN\" />\n                    <category android:name=\"android.intent.category.LAUNCHER\" />\n                </intent-filter>\n            </activity>\n            <activity android:name=\".CategoryActivity\" android:label=\"1个Category检测\">\n            \t<intent-filter>\n            \t\t<action android:name=\"com.flysnow.intent.ACTION_VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t\t<category android:name=\"com.flysnow.intent.CATEGORY_MAN\"></category>\n            \t</intent-filter>\n            </activity>\n             <activity android:name=\".Category2Activity\" android:label=\"2个Category检测\">\n            \t<intent-filter>\n            \t\t<action android:name=\"com.flysnow.intent.ACTION_VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t\t<category android:name=\"com.flysnow.intent.CATEGORY_MAN\"></category>\n            \t\t<category android:name=\"com.flysnow.intent.CATEGORY_SHOP\"></category>\n            \t</intent-filter>\n            </activity>\n        </application>\n    </manifest>\n\n\n为CategoryActivity添加了2个Category，一个是默认的（隐式Intent必须），一个是自定义的。而相应的Category2Activity则有三个Category。\n\n我们运行测试，效果图如下：![](http://dl.iteye.com/upload/attachment/439568/21480d9b-d2fb-35cd-a240-5b045eacc7bd.png)\n当点击“1个Category检测-Activity”的时候，会弹出\n\n![](http://dl.iteye.com/upload/attachment/439572/ccf8c038-7289-3d78-aa21-fecdbe95497c.png)\n这是，因为我们的Intent定义了一个Category，这个Category在CategoryActivity和Category2Activity里都有，都能匹配上，所以就会弹出这两个Activity供我们选择，而当我们单击《2个Category检测-Activity》的时候就会直接打开Category2Activity，这是因为这个选项里的Intent有2个Category，只有Category2Activity才能匹配上。。。通过例子我们可以总结到：Intent中所包含的所有Category必须在一个组件的intent-filter中有定义，一个都不能少，否则不能通过检测。。但是intent-filter的可以有额外的Category\n.再次提醒：\n\nAndroid对所有传递给\n\nContext.startActivity()的隐式intent至少包含\"android.intent.category.DEFAULT\"\n\n未完待续\n","source":"_posts/2011-03-17-android-intents-and-intent-filters-two.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-03-17 08:41:02+00:00\nlayout: post\nslug: android-intents-and-intent-filters-two\ntitle: Android Intents and Intent Filters(二)\nwordpress_id: 92\ncategories:\n- Android\ntags:\n- Android\n- Intent\n---\n\n## Category（类别）检测\n\n\n类别在中是通过标记定义的,Category和Action一样，他们的名字都是一个字符串定义，但是我们在代码中可以使用对应的类别常量，在xml文件定义中只能使用定义好的字符串。Android的Intent类中提供了很多内置的类别定义，一中类别代表一个意思，可以参考说明使用。。比如android.intent.category.LAUNCHER标表示你的应用会展示在启动列表页面，经常和android.intent.action.MAIN搭配使用\n\n下面通过一个例子来说明Category的检测,项目名为Intents,应用名为Intents and Filters，运行在Android2.2版本上.主启动Activity为IntentsTestList。\n\nIntentsTestList代码如下:\n\n    \n    /**\n     * Intents测试列表类\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class IntentsTestList extends ListActivity {\n    \tprivate String ACTION_VIEW=\"com.flysnow.intent.ACTION_VIEW\";\n    \tprivate String CATEGORY_MAN=\"com.flysnow.intent.CATEGORY_MAN\";\n    \tprivate String CATEGORY_SHOP=\"com.flysnow.intent.CATEGORY_SHOP\";\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n          //定义ListAdapter\n    \t\tsetListAdapter(new SimpleAdapter(this, getData(),\n    \t\t\t\tandroid.R.layout.simple_list_item_1, new String[] { \"title\" },new int[] {android.R.id.text1}));\n    \t\tgetListView().setTextFilterEnabled(true);\n    \n    \t\tfilter.addCategory(CATEGORY_MAN);\n    \t\t//注册一个广播\n            super.registerReceiver(new BroadcastReceiver() {\n    \n    \t\t\t@Override\n    \t\t\tpublic void onReceive(Context context, Intent intent) {\n    \t\t\t\tToast.makeText(context, \"该Broadcast的Intent Filter设置了Category和Action\", Toast.LENGTH_SHORT).show();\n    \t\t\t}\n    \t\t},filter);\n        }\n    \t@Override\n    \tprotected void onListItemClick(ListView l, View v, int position, long id) {\n    \t\tIntent intent=(Intent)getData().get(position).get(\"intent\");\n    \t\tBoolean isActivity=(Boolean)getData().get(position).get(\"isActivity\");\n    \t\tif(isActivity){\n    \t\t\tstartActivity(intent);\n    \t\t}else{\n    \t\t\tsendBroadcast(intent);\n    \t\t}\n    \n    \t}\n    \n    \t/**\n    \t * 返回ListView需要的数据\n    \t * @return ListView需要的数据\n    \t */\n    \tprivate List<map<string,object>> getData() {\n    \t\tList<map<string,object>> data=new ArrayList<map<string,object>>();\n    \t\taddItem(data, \"1个Category检测-Activity\", new Intent(ACTION_VIEW).addCategory(CATEGORY_MAN),true);\n    \t\taddItem(data, \"1个Category检测-Broadcast\", new Intent(ACTION_VIEW).addCategory(CATEGORY_MAN),false);\n    \t\taddItem(data, \"2个Category检测-Activity\", new Intent(ACTION_VIEW).addCategory(CATEGORY_MAN).addCategory(CATEGORY_SHOP),true);\n    \t\treturn data;\n    \t}\n    \t/**\n    \t * 给ListView添加数据\n    \t * @param data 存储数据的List\n    \t * @param name 要显示的Title\n    \t * @param intent 单击某一项时要启动的Activity\n    \t * @param isActivity 启动的是否是Activity，true是，false为广播\n    \t */\n    \tprivate void addItem(List<map<string,object>> data, String name, Intent intent,boolean isActivity) {\n            Map<string, object=\"\"> temp = new HashMap<string, object=\"\">();\n            temp.put(\"title\", name);\n            temp.put(\"intent\", intent);\n            temp.put(\"isActivity\", isActivity);\n            data.add(temp);\n        }\n    \tprivate IntentFilter filter=new IntentFilter(ACTION_VIEW);\n    \n    }\n\n\n以上代码主要是一个ListView，列出了三个测试项，1个Category的测试和2个Category的测试，注册了一个广播.\n为了测试新建了2个Activity，分别是CategoryActivity和Category2Activity,代码如下：\n\n    \n    /**\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class CategoryActivity extends Activity {\n    \n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tTextView text=new TextView(this);\n    \t\ttext.setText(\"该Activity的Intent Filter值设置了Action和1个Category，不包含android.intent.category.DEFAULT\");\n    \t\tsetContentView(text);\n    \t}\n    \n    }\n\n\n\n    \n    /**\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class Category2Activity extends Activity {\n    \n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tTextView text=new TextView(this);\n    \t\ttext.setText(\"该Activity的Intent Filter值设置了Action和2个Category，不包含android.intent.category.DEFAULT\");\n    \t\tsetContentView(text);\n    \t}\n    \n    }\n\n\n很简单只是一段文字的说明\n\nAndroidManiftest.xml修改如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.flysnow.intent\"\n          android:versionCode=\"1\"\n          android:versionName=\"1.0\">\n        <uses-sdk android:minSdkVersion=\"8\" />\n    \n        <application android:icon=\"@drawable/icon\" android:label=\"@string/app_name\">\n            <activity android:name=\".IntentsTestList\"\n                      android:label=\"@string/app_name\">\n                <intent-filter>\n                    <action android:name=\"android.intent.action.MAIN\" />\n                    <category android:name=\"android.intent.category.LAUNCHER\" />\n                </intent-filter>\n            </activity>\n            <activity android:name=\".CategoryActivity\" android:label=\"1个Category检测\">\n            \t<intent-filter>\n            \t\t<action android:name=\"com.flysnow.intent.ACTION_VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t\t<category android:name=\"com.flysnow.intent.CATEGORY_MAN\"></category>\n            \t</intent-filter>\n            </activity>\n             <activity android:name=\".Category2Activity\" android:label=\"2个Category检测\">\n            \t<intent-filter>\n            \t\t<action android:name=\"com.flysnow.intent.ACTION_VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t\t<category android:name=\"com.flysnow.intent.CATEGORY_MAN\"></category>\n            \t\t<category android:name=\"com.flysnow.intent.CATEGORY_SHOP\"></category>\n            \t</intent-filter>\n            </activity>\n        </application>\n    </manifest>\n\n\n为CategoryActivity添加了2个Category，一个是默认的（隐式Intent必须），一个是自定义的。而相应的Category2Activity则有三个Category。\n\n我们运行测试，效果图如下：![](http://dl.iteye.com/upload/attachment/439568/21480d9b-d2fb-35cd-a240-5b045eacc7bd.png)\n当点击“1个Category检测-Activity”的时候，会弹出\n\n![](http://dl.iteye.com/upload/attachment/439572/ccf8c038-7289-3d78-aa21-fecdbe95497c.png)\n这是，因为我们的Intent定义了一个Category，这个Category在CategoryActivity和Category2Activity里都有，都能匹配上，所以就会弹出这两个Activity供我们选择，而当我们单击《2个Category检测-Activity》的时候就会直接打开Category2Activity，这是因为这个选项里的Intent有2个Category，只有Category2Activity才能匹配上。。。通过例子我们可以总结到：Intent中所包含的所有Category必须在一个组件的intent-filter中有定义，一个都不能少，否则不能通过检测。。但是intent-filter的可以有额外的Category\n.再次提醒：\n\nAndroid对所有传递给\n\nContext.startActivity()的隐式intent至少包含\"android.intent.category.DEFAULT\"\n\n未完待续\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvmo003zz1n1my78cbfv"},{"author":"飞雪无情","comments":1,"date":"2011-03-14T02:01:05.000Z","layout":"post","slug":"android-intents-and-intent-filters-one","title":"Android Intents and Intent Filters(一)","wordpress_id":93,"_content":"\n看过前面的几节教程的应该都会留意到一个很重要的东西，那就是Intent。Intent是什么呢？我们都知道Android有四大核心组件 Activity、Service、Broadcast Receiver和Content Provider，略去Content Provider不提，那么剩下的三个组件之间的通信考什么？这就是Intent！！它不仅可以在同一个应用中起传递信息的作用，还是可以在不同的应用进行传递信息。这就使得我们的应用和系统中的其他应用进行交互有了可能，进而使得整个Android开发变得更加精彩。想想吧，我们自己的应用可以调用系统中的通话应用进行拨号、可以调用短信应用发短信，这是多么美妙的一件事情啊！！！\n\n\n##  在这里你将会学到：\n\n\n\n\n\n\t\n  1. 什么是Intent和Intent Filter\n\n\t\n  2. Intent和Intent Filter有什么用\n\n\t\n  3. 怎么启动（传递）一个Intent\n\n\t\n  4. Intent里包含什么\n\n\t\n  5. 什么是显式Intent以及什么隐式Intent\n\n\t\n  6. Intent是怎样匹配的\n\n\n\n\n## 一：前言\n\n\n在正式介绍Intent之前，我们先看下上面说的Activity、Service和Broadcast Receiver是怎样传递Intent。对于这三个组件而言，他们都有自己独立的传递Intent的机制：\n\n\n\n\t\n  1. Activity:对于Activity来说，它主要是通过Context.startActivity()或Activity.startActivityForRestult()来启动一个存在的Activity做一些事情。当使用Activity.startActivityForResult()启动一个Activity时，可以使用Activity.setResult()返回一些结果信息，可以在Activity.onActivityResult()\n中得到返回的结果.\n\n\t\n  2. Service:对于Service来说，它主要是通过Context.startService()初始化一个Service或者传递消息给正在运行的Service。同样，也可以通过Context.bindService()建立一个调用组件和目标服务之间的连接。\n\n\t\n  3. Broadcast Receiver:我们可以通过Context.sendBroadcast()Context.sendOrderedBroadcast()以及Context.sendStickyBroadcast()这些方法，传递Intent给感兴趣的广播。\n\n\n消息之间的传递是没有重叠的，比如调用startActivity()传播一个Intent，只会传播给Activity，而不会传播给Service和Broadcast Receiver，反过来也是这样的。\n\n\n## 二：Intent对象\n\n\n一个Intent对象包含了很多数据的信息，比如要执行的动作，类别，数据，附加信息等等，下面就一一列列出一个Intent中包含的信息。\n\n\n### 组件名称\n\n\n这个组件名称字段其实就是一个ComponentName类，它包含了一个目标组件的全限定名，比如com.flysnow.intent.Activity1，这就是一个全限定名的Activity。组件名字可以通过setComponent()、setClass()或者setClassName()设置，如果设置了Intent目标组件的名字，那么这个Intent就会被传递给特定的组件，也就是我们说的显式Intent.如果不设置，则是隐式的Intent，Android系统将根据Intent Filter中的信息进行匹配.\n\n\n### Action(动作)\n\n\n一个Intent的Action在很大程度上说明这个Intent要做什么，是查看(View)、删除(Delete)、编辑(Edit)等等。Action一个字符串命名的动作，Android中预定义了很多Action，可以参考Intent类查看,下面是文档中的几个动作\n\n![](http://dl.iteye.com/upload/attachment/435153/de61628d-7112-32f4-a6b2-902e1eb72ea1.png)\n当然，我们也可以自定义Action，比如com.flysnow.intent.ACTION_ADD,定义Action的时候最好能表明意思，要做什么，这样我们的Intent中的数据才好填充。Intent对象的getAction()可以获取动作，使用setAction()可以设置动作。\n\n\n### Data（数据）\n\n\nData，其实就是一个URI，用于执行一个Action时所用到的数据的URI和MIME。不同的Action有不同的数据规格，比如ACTION_EDIT动作，数据就可以能包含一个用于编辑文档的URI,如果是一个ACTION_CALL动作，那么数据就是一个包含了tel:6546541的数据字段，所以上面提到的自定义Action时要规范命名。数据的URI和类型对于Intent的匹配是很重要的，Android往往根据数据的URI和MIME找到能处理该Intent的最佳目标组件。\n\n\n### Category(类别)\n\n\nCategory指定了用于处理Intent的组件的类型信息，一个Intent可以添加多个Category，使用addCategory()方法即可，使用removeCategory()删除一个已经添加的类别。Android的Intent类里定义了很多常用的类别，可以参考使用。\n\n\n### Extras(附加信息)\n\n\n有些用于处理Intent的目标组件需要一些额外的信息，那么就可以通过Intent的put..()方法把额外的信息塞入到Intent对象中，用于目标组件的使用，一个附件信息就是一个key-value的键值对..Intent有一系列的put和get方法用于处理附加信息的塞入和取出。\n\n\n### Flag(标识)\n\n\nAndroid有很多标识，用于标记如何启动一个活动，是NEW_TASK还是其他等等，以及启动后怎么对待这个活动。。可以参考Intent类中的FLAG常量字段。\n\n\n## 三：Intent的解析\n\n\n介绍完了Intent对象的构成，就要介绍Android系统是怎样解析Intent的，Android是怎么传递Intent到目标组件的呢？\n\n\n### Intent分类\n\n\nIntent可以分为两类，一类是显式的Intent，一类是隐式的Intent，上面有过提及。显示的Intent就是指定了组件名字的，隐式的就是没有指定Intent的组件名字，需要Android根据Intent中的Action、data、Category等来解析匹配。而目标组件（Activity、Service、Broadcast Receiver）怎通过设置他们的Intent Filter来界定其处理的Intent。如果一个组件没有定义Intent Filter，那么它只能接受处理显示的Intent，只有定义了Intent Filter的组件才能同时处理隐式和显示的Intent。\n\n\n### Action检测\n\n\n为了对Action的作用进行检测，我们使用一个例子来演示Action的作用。项目名为Intents,应用名为Intents and Filters，运行在Android2.2版本上.主启动Activity为IntentsTestList\n\nIntentsTestList代码如下：\n\n    \n    /**\n     * Intents测试列表类\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class IntentsTestList extends ListActivity {\n    \tprivate String ACTION_VIEW=\"com.flysnow.intent.ACTION_VIEW\";\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n          //定义ListAdapter\n    \t\tsetListAdapter(new SimpleAdapter(this, getData(),\n    \t\t\t\tandroid.R.layout.simple_list_item_1, new String[] { \"title\" },new int[] {android.R.id.text1}));\n    \t\tgetListView().setTextFilterEnabled(true);\n    \n    \t\t//注册一个广播\n            super.registerReceiver(new BroadcastReceiver() {\n    \n    \t\t\t@Override\n    \t\t\tpublic void onReceive(Context context, Intent intent) {\n    \t\t\t\tToast.makeText(context, \"该Broadcast的Intent Filter值只设置了Action\", Toast.LENGTH_SHORT).show();\n    \t\t\t}\n    \t\t},new IntentFilter(ACTION_VIEW));\n        }\n    \t@Override\n    \tprotected void onListItemClick(ListView l, View v, int position, long id) {\n    \t\tIntent intent=(Intent)getData().get(position).get(\"intent\");\n    \t\tBoolean isActivity=(Boolean)getData().get(position).get(\"isActivity\");\n    \t\tif(isActivity){\n    \t\t\tstartActivity(intent);\n    \t\t}else{\n    \t\t\tsendBroadcast(intent);\n    \t\t}\n    \n    \t}\n    \n    \t/**\n    \t * 返回ListView需要的数据\n    \t * @return ListView需要的数据\n    \t */\n    \tprivate List<map<string,object>> getData() {\n    \t\tList<map<string,object>> data=new ArrayList<map<string,object>>();\n    \t\taddItem(data, \"空Action的Activity\", new Intent(),true);\n    \t\taddItem(data, \"Action检测-Activity\", new Intent(ACTION_VIEW),true);\n    \t\taddItem(data, \"Action检测-Broadcast\", new Intent(ACTION_VIEW),false);\n    \t\treturn data;\n    \t}\n    \t/**\n    \t * 给ListView添加数据\n    \t * @param data 存储数据的List\n    \t * @param name 要显示的Title\n    \t * @param intent 单击某一项时要启动的Activity\n    \t * @param isActivity 启动的是否是Activity，true是，false为广播\n    \t */\n    \tprivate void addItem(List<map<string,object>> data, String name, Intent intent,boolean isActivity) {\n            Map<string, object=\"\"> temp = new HashMap<string, object=\"\">();\n            temp.put(\"title\", name);\n            temp.put(\"intent\", intent);\n            temp.put(\"isActivity\", isActivity);\n            data.add(temp);\n        }\n    }\n\n\n这里主要是使用ListActivity列出3个测试，一个测试空的Intent,一个测试只有Action的Intent--Activity版，一个测试只有Action的Intent--Broadcast版。。。\n\n为了测试startActivity()，我们新建一个Activity名字为ActionActivity代码如下：\n\n    \n    /**\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class ActionActivity extends Activity {\n    \n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tTextView text=new TextView(this);\n    \t\ttext.setText(\"该Activity的Intent Filter值只设置了Action\");\n    \t\tsetContentView(text);\n    \t}\n    \n    }\n\n\n很简单，只有一段文本的展示。\n\nAndroidManifest.xml修改如下:\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.flysnow.intent\"\n          android:versionCode=\"1\"\n          android:versionName=\"1.0\">\n        <uses-sdk android:minSdkVersion=\"8\" />\n    \n        <application android:icon=\"@drawable/icon\" android:label=\"@string/app_name\">\n            <activity android:name=\".IntentsTestList\"\n                      android:label=\"@string/app_name\">\n                <intent-filter>\n                    <action android:name=\"android.intent.action.MAIN\" />\n                    <category android:name=\"android.intent.category.LAUNCHER\" />\n                </intent-filter>\n            </activity>\n            <activity android:name=\".ActionActivity\" android:label=\"Action检测\">\n            \t<intent-filter>\n            \t\t<action android:name=\"com.flysnow.intent.ACTION_VIEW\"></action>\n            \t\t<action android:name=\"android.intent.action.VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t</intent-filter>\n            </activity>\n    \n        </application>\n    </manifest>\n\n\n很简单，为我们的ActionContext加上了两个action标签和一个category标签,加category标签设置成android.intent.category.DEFAULT是为了让这个Activity可以接收隐式的Intent请求，这是Android规定的，对于Activity，使用Context.startActivity()传递隐式Intent，默认是包含了android.intent.category.DEFAULT的，所以定义的Activity要想接收，必须在Intent Filter里添加android.intent.category.DEFAULT这个Category。\n\n运行入下图：\n![](http://dl.iteye.com/upload/attachment/435312/5a7c0913-7b0f-3035-8b65-abe0a68dd21f.png)\n当点击“空Action的Activity”的时候，会报异常，因为Intent什么都没有设置，没有任何的Activity能处理它\n。当点击“Action检测-Activity”的时候会打开我们的ActionActivity这个Activity，点击“Action检测-Broadcast”会弹出Toast提示，说明已经被接收到。。从上面我们可以看出，当Intent设置了Action时，只要对应的组件的Intent Filter中包含该Action的定义，那么这个组件就会接收该Intent。。。\n\n\n因为内容较多，，所以进行了分节。。。这样也会使得看本章带的Demo的时候不至于迷糊，因为这个Demo就只是实现了这一个功能。如果多个功能测试的话，就会在Demo改来改去，导致Demo代码不清晰了。未完待续，敬请期待！！！\n","source":"_posts/2011-03-14-android-intents-and-intent-filters-one.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-03-14 10:01:05+00:00\nlayout: post\nslug: android-intents-and-intent-filters-one\ntitle: Android Intents and Intent Filters(一)\nwordpress_id: 93\ncategories:\n- Android\ntags:\n- Android\n- Intent\n---\n\n看过前面的几节教程的应该都会留意到一个很重要的东西，那就是Intent。Intent是什么呢？我们都知道Android有四大核心组件 Activity、Service、Broadcast Receiver和Content Provider，略去Content Provider不提，那么剩下的三个组件之间的通信考什么？这就是Intent！！它不仅可以在同一个应用中起传递信息的作用，还是可以在不同的应用进行传递信息。这就使得我们的应用和系统中的其他应用进行交互有了可能，进而使得整个Android开发变得更加精彩。想想吧，我们自己的应用可以调用系统中的通话应用进行拨号、可以调用短信应用发短信，这是多么美妙的一件事情啊！！！\n\n\n##  在这里你将会学到：\n\n\n\n\n\n\t\n  1. 什么是Intent和Intent Filter\n\n\t\n  2. Intent和Intent Filter有什么用\n\n\t\n  3. 怎么启动（传递）一个Intent\n\n\t\n  4. Intent里包含什么\n\n\t\n  5. 什么是显式Intent以及什么隐式Intent\n\n\t\n  6. Intent是怎样匹配的\n\n\n\n\n## 一：前言\n\n\n在正式介绍Intent之前，我们先看下上面说的Activity、Service和Broadcast Receiver是怎样传递Intent。对于这三个组件而言，他们都有自己独立的传递Intent的机制：\n\n\n\n\t\n  1. Activity:对于Activity来说，它主要是通过Context.startActivity()或Activity.startActivityForRestult()来启动一个存在的Activity做一些事情。当使用Activity.startActivityForResult()启动一个Activity时，可以使用Activity.setResult()返回一些结果信息，可以在Activity.onActivityResult()\n中得到返回的结果.\n\n\t\n  2. Service:对于Service来说，它主要是通过Context.startService()初始化一个Service或者传递消息给正在运行的Service。同样，也可以通过Context.bindService()建立一个调用组件和目标服务之间的连接。\n\n\t\n  3. Broadcast Receiver:我们可以通过Context.sendBroadcast()Context.sendOrderedBroadcast()以及Context.sendStickyBroadcast()这些方法，传递Intent给感兴趣的广播。\n\n\n消息之间的传递是没有重叠的，比如调用startActivity()传播一个Intent，只会传播给Activity，而不会传播给Service和Broadcast Receiver，反过来也是这样的。\n\n\n## 二：Intent对象\n\n\n一个Intent对象包含了很多数据的信息，比如要执行的动作，类别，数据，附加信息等等，下面就一一列列出一个Intent中包含的信息。\n\n\n### 组件名称\n\n\n这个组件名称字段其实就是一个ComponentName类，它包含了一个目标组件的全限定名，比如com.flysnow.intent.Activity1，这就是一个全限定名的Activity。组件名字可以通过setComponent()、setClass()或者setClassName()设置，如果设置了Intent目标组件的名字，那么这个Intent就会被传递给特定的组件，也就是我们说的显式Intent.如果不设置，则是隐式的Intent，Android系统将根据Intent Filter中的信息进行匹配.\n\n\n### Action(动作)\n\n\n一个Intent的Action在很大程度上说明这个Intent要做什么，是查看(View)、删除(Delete)、编辑(Edit)等等。Action一个字符串命名的动作，Android中预定义了很多Action，可以参考Intent类查看,下面是文档中的几个动作\n\n![](http://dl.iteye.com/upload/attachment/435153/de61628d-7112-32f4-a6b2-902e1eb72ea1.png)\n当然，我们也可以自定义Action，比如com.flysnow.intent.ACTION_ADD,定义Action的时候最好能表明意思，要做什么，这样我们的Intent中的数据才好填充。Intent对象的getAction()可以获取动作，使用setAction()可以设置动作。\n\n\n### Data（数据）\n\n\nData，其实就是一个URI，用于执行一个Action时所用到的数据的URI和MIME。不同的Action有不同的数据规格，比如ACTION_EDIT动作，数据就可以能包含一个用于编辑文档的URI,如果是一个ACTION_CALL动作，那么数据就是一个包含了tel:6546541的数据字段，所以上面提到的自定义Action时要规范命名。数据的URI和类型对于Intent的匹配是很重要的，Android往往根据数据的URI和MIME找到能处理该Intent的最佳目标组件。\n\n\n### Category(类别)\n\n\nCategory指定了用于处理Intent的组件的类型信息，一个Intent可以添加多个Category，使用addCategory()方法即可，使用removeCategory()删除一个已经添加的类别。Android的Intent类里定义了很多常用的类别，可以参考使用。\n\n\n### Extras(附加信息)\n\n\n有些用于处理Intent的目标组件需要一些额外的信息，那么就可以通过Intent的put..()方法把额外的信息塞入到Intent对象中，用于目标组件的使用，一个附件信息就是一个key-value的键值对..Intent有一系列的put和get方法用于处理附加信息的塞入和取出。\n\n\n### Flag(标识)\n\n\nAndroid有很多标识，用于标记如何启动一个活动，是NEW_TASK还是其他等等，以及启动后怎么对待这个活动。。可以参考Intent类中的FLAG常量字段。\n\n\n## 三：Intent的解析\n\n\n介绍完了Intent对象的构成，就要介绍Android系统是怎样解析Intent的，Android是怎么传递Intent到目标组件的呢？\n\n\n### Intent分类\n\n\nIntent可以分为两类，一类是显式的Intent，一类是隐式的Intent，上面有过提及。显示的Intent就是指定了组件名字的，隐式的就是没有指定Intent的组件名字，需要Android根据Intent中的Action、data、Category等来解析匹配。而目标组件（Activity、Service、Broadcast Receiver）怎通过设置他们的Intent Filter来界定其处理的Intent。如果一个组件没有定义Intent Filter，那么它只能接受处理显示的Intent，只有定义了Intent Filter的组件才能同时处理隐式和显示的Intent。\n\n\n### Action检测\n\n\n为了对Action的作用进行检测，我们使用一个例子来演示Action的作用。项目名为Intents,应用名为Intents and Filters，运行在Android2.2版本上.主启动Activity为IntentsTestList\n\nIntentsTestList代码如下：\n\n    \n    /**\n     * Intents测试列表类\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class IntentsTestList extends ListActivity {\n    \tprivate String ACTION_VIEW=\"com.flysnow.intent.ACTION_VIEW\";\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n          //定义ListAdapter\n    \t\tsetListAdapter(new SimpleAdapter(this, getData(),\n    \t\t\t\tandroid.R.layout.simple_list_item_1, new String[] { \"title\" },new int[] {android.R.id.text1}));\n    \t\tgetListView().setTextFilterEnabled(true);\n    \n    \t\t//注册一个广播\n            super.registerReceiver(new BroadcastReceiver() {\n    \n    \t\t\t@Override\n    \t\t\tpublic void onReceive(Context context, Intent intent) {\n    \t\t\t\tToast.makeText(context, \"该Broadcast的Intent Filter值只设置了Action\", Toast.LENGTH_SHORT).show();\n    \t\t\t}\n    \t\t},new IntentFilter(ACTION_VIEW));\n        }\n    \t@Override\n    \tprotected void onListItemClick(ListView l, View v, int position, long id) {\n    \t\tIntent intent=(Intent)getData().get(position).get(\"intent\");\n    \t\tBoolean isActivity=(Boolean)getData().get(position).get(\"isActivity\");\n    \t\tif(isActivity){\n    \t\t\tstartActivity(intent);\n    \t\t}else{\n    \t\t\tsendBroadcast(intent);\n    \t\t}\n    \n    \t}\n    \n    \t/**\n    \t * 返回ListView需要的数据\n    \t * @return ListView需要的数据\n    \t */\n    \tprivate List<map<string,object>> getData() {\n    \t\tList<map<string,object>> data=new ArrayList<map<string,object>>();\n    \t\taddItem(data, \"空Action的Activity\", new Intent(),true);\n    \t\taddItem(data, \"Action检测-Activity\", new Intent(ACTION_VIEW),true);\n    \t\taddItem(data, \"Action检测-Broadcast\", new Intent(ACTION_VIEW),false);\n    \t\treturn data;\n    \t}\n    \t/**\n    \t * 给ListView添加数据\n    \t * @param data 存储数据的List\n    \t * @param name 要显示的Title\n    \t * @param intent 单击某一项时要启动的Activity\n    \t * @param isActivity 启动的是否是Activity，true是，false为广播\n    \t */\n    \tprivate void addItem(List<map<string,object>> data, String name, Intent intent,boolean isActivity) {\n            Map<string, object=\"\"> temp = new HashMap<string, object=\"\">();\n            temp.put(\"title\", name);\n            temp.put(\"intent\", intent);\n            temp.put(\"isActivity\", isActivity);\n            data.add(temp);\n        }\n    }\n\n\n这里主要是使用ListActivity列出3个测试，一个测试空的Intent,一个测试只有Action的Intent--Activity版，一个测试只有Action的Intent--Broadcast版。。。\n\n为了测试startActivity()，我们新建一个Activity名字为ActionActivity代码如下：\n\n    \n    /**\n     * @author 飞雪无情\n     * @since 2011-3-14\n     */\n    public class ActionActivity extends Activity {\n    \n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tTextView text=new TextView(this);\n    \t\ttext.setText(\"该Activity的Intent Filter值只设置了Action\");\n    \t\tsetContentView(text);\n    \t}\n    \n    }\n\n\n很简单，只有一段文本的展示。\n\nAndroidManifest.xml修改如下:\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.flysnow.intent\"\n          android:versionCode=\"1\"\n          android:versionName=\"1.0\">\n        <uses-sdk android:minSdkVersion=\"8\" />\n    \n        <application android:icon=\"@drawable/icon\" android:label=\"@string/app_name\">\n            <activity android:name=\".IntentsTestList\"\n                      android:label=\"@string/app_name\">\n                <intent-filter>\n                    <action android:name=\"android.intent.action.MAIN\" />\n                    <category android:name=\"android.intent.category.LAUNCHER\" />\n                </intent-filter>\n            </activity>\n            <activity android:name=\".ActionActivity\" android:label=\"Action检测\">\n            \t<intent-filter>\n            \t\t<action android:name=\"com.flysnow.intent.ACTION_VIEW\"></action>\n            \t\t<action android:name=\"android.intent.action.VIEW\"></action>\n            \t\t<category android:name=\"android.intent.category.DEFAULT\"></category>\n            \t</intent-filter>\n            </activity>\n    \n        </application>\n    </manifest>\n\n\n很简单，为我们的ActionContext加上了两个action标签和一个category标签,加category标签设置成android.intent.category.DEFAULT是为了让这个Activity可以接收隐式的Intent请求，这是Android规定的，对于Activity，使用Context.startActivity()传递隐式Intent，默认是包含了android.intent.category.DEFAULT的，所以定义的Activity要想接收，必须在Intent Filter里添加android.intent.category.DEFAULT这个Category。\n\n运行入下图：\n![](http://dl.iteye.com/upload/attachment/435312/5a7c0913-7b0f-3035-8b65-abe0a68dd21f.png)\n当点击“空Action的Activity”的时候，会报异常，因为Intent什么都没有设置，没有任何的Activity能处理它\n。当点击“Action检测-Activity”的时候会打开我们的ActionActivity这个Activity，点击“Action检测-Broadcast”会弹出Toast提示，说明已经被接收到。。从上面我们可以看出，当Intent设置了Action时，只要对应的组件的Intent Filter中包含该Action的定义，那么这个组件就会接收该Intent。。。\n\n\n因为内容较多，，所以进行了分节。。。这样也会使得看本章带的Demo的时候不至于迷糊，因为这个Demo就只是实现了这一个功能。如果多个功能测试的话，就会在Demo改来改去，导致Demo代码不清晰了。未完待续，敬请期待！！！\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvmr0043z1n11xqf467x"},{"author":"飞雪无情","comments":1,"date":"2011-03-08T00:31:54.000Z","layout":"post","slug":"android-bottom-tool-bar-demo","title":"新浪微博布局学习--新浪微博Android版底部工具栏的Demo","wordpress_id":94,"_content":"\n前几天看到一篇很好的文章《新浪微博布局学习——妙用TabHost》，已经转载到我的博客里[新浪微博布局学习——妙用TabHost ](/2011/03/02/sina-weibo-tool-bar-tabhost.html)\n里面详细的介绍了怎么妙用TabHost构建底部的工具栏，有兴趣的可以看一下。因为那边文章没有Demo，工作之余，我写了一个Demo，供朋友们参考，欢迎拍砖讨论。。附件中提供下载。\n\n![](http://dl.iteye.com/upload/attachment/431685/f7fbcca0-7830-37a9-8caa-cfa908809cd4.png)\n本文附件下载:\n\n[sina-weibo-tool-bar-demo](/uploads/2013/10/sina-weibo-tool-bar-demo.zip)\n","source":"_posts/2011-03-08-android-bottom-tool-bar-demo.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-03-08 08:31:54+00:00\nlayout: post\nslug: android-bottom-tool-bar-demo\ntitle: 新浪微博布局学习--新浪微博Android版底部工具栏的Demo\nwordpress_id: 94\ncategories:\n- Android\ntags:\n- Android\n---\n\n前几天看到一篇很好的文章《新浪微博布局学习——妙用TabHost》，已经转载到我的博客里[新浪微博布局学习——妙用TabHost ](/2011/03/02/sina-weibo-tool-bar-tabhost.html)\n里面详细的介绍了怎么妙用TabHost构建底部的工具栏，有兴趣的可以看一下。因为那边文章没有Demo，工作之余，我写了一个Demo，供朋友们参考，欢迎拍砖讨论。。附件中提供下载。\n\n![](http://dl.iteye.com/upload/attachment/431685/f7fbcca0-7830-37a9-8caa-cfa908809cd4.png)\n本文附件下载:\n\n[sina-weibo-tool-bar-demo](/uploads/2013/10/sina-weibo-tool-bar-demo.zip)\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvms0047z1n1715yq8am"},{"author":"飞雪无情","comments":1,"date":"2011-03-01T23:44:21.000Z","layout":"post","slug":"sina-weibo-tool-bar-tabhost","title":"新浪微博布局学习——妙用TabHost","wordpress_id":95,"_content":"\n前言\n\n为了更好的开发Android应用程序，除了熟练掌握基本的UI组件和API外，还需要掌握一些技巧，而这些技巧可以通过阅读一些代码来提高，本系列将与大家分享一些新浪微博布局方面的收获，欢迎交流！\n\n声明\n\n欢迎转载，但请保留文章原始出处:)\n\n博客园：http://www.cnblogs.com\n\n农民伯伯： http://www.cnblogs.com/over140\n\n版本\n\n新浪微博 weibo_10235010.apk\n\n正文\n\n一、效果图\n\n![](http://images.cnblogs.com/cnblogs_com/over140/2011/3/2011-3-1_1.png)\n\n红色部分是本文要实现的目标。\n\n二、实现maintabs.xml\n\n    \n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <TabHost android:id=\"@android:id/tabhost\" android:layout_width=\"fill_parent\" android:layout_height=\"fill_parent\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\">\n        <LinearLayout android:orientation=\"vertical\" android:layout_width=\"fill_parent\" android:layout_height=\"fill_parent\">\n            <FrameLayout android:id=\"@android:id/tabcontent\" android:layout_width=\"fill_parent\" android:layout_height=\"0.0dip\" android:layout_weight=\"1.0\" />\n            <TabWidget android:id=\"@android:id/tabs\" android:visibility=\"gone\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:layout_weight=\"0.0\" />\n            <RadioGroup android:gravity=\"center_vertical\" android:layout_gravity=\"bottom\" android:orientation=\"horizontal\" android:id=\"@id/main_radio\" android:background=\"@drawable/maintab_toolbar_bg\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\">\n                <RadioButton   android:text=\"@string/main_home\" android:checked=\"true\" android:id=\"@+id/radio_button0\" android:layout_marginTop=\"2.0dip\" android:drawableTop=\"@drawable/icon_1_n\" style=\"@style/main_tab_bottom\" />\n                <RadioButton android:id=\"@+id/radio_button1\" android:layout_marginTop=\"2.0dip\" android:text=\"@string/main_news\" android:drawableTop=\"@drawable/icon_2_n\" style=\"@style/main_tab_bottom\" />\n                <RadioButton android:id=\"@+id/radio_button2\" android:layout_marginTop=\"2.0dip\" android:text=\"@string/main_my_info\" android:drawableTop=\"@drawable/icon_3_n\" style=\"@style/main_tab_bottom\" />\n                <RadioButton android:id=\"@+id/radio_button3\" android:layout_marginTop=\"2.0dip\" android:text=\"@string/menu_search\" android:drawableTop=\"@drawable/icon_4_n\" style=\"@style/main_tab_bottom\" />\n                <RadioButton android:id=\"@+id/radio_button4\" android:layout_marginTop=\"2.0dip\" android:text=\"@string/more\" android:drawableTop=\"@drawable/icon_5_n\" style=\"@style/main_tab_bottom\" />\n            </RadioGroup>\n        </LinearLayout>\n    </TabHost>\n\n\nstyles.xml\n\n    \n     <style name=\"main_tab_bottom\">\n            <item name=\"android:textSize\">@dimen/bottom_tab_font_size</item>\n            <item name=\"android:textColor\">#ffffffff</item>\n            <item name=\"android:ellipsize\">marquee</item>\n            <item name=\"android:gravity\">center_horizontal</item>\n            <item name=\"android:background\">@drawable/home_btn_bg</item>\n            <item name=\"android:paddingTop\">@dimen/bottom_tab_padding_up</item>\n            <item name=\"android:layout_width\">fill_parent</item>\n            <item name=\"android:layout_height\">wrap_content</item>\n            <item name=\"android:button\">@null</item>\n            <item name=\"android:singleLine\">true</item>\n            <item name=\"android:drawablePadding\">@dimen/bottom_tab_padding_drawable</item>\n            <item name=\"android:layout_weight\">1.0</item>\n        </style>\n\n\nhome_btn_bg.xml\n\n    \n     <selector\n              xmlns:android=\"http://schemas.android.com/apk/res/android\">\n                <item android:state_focused=\"true\" android:state_enabled=\"true\" android:state_pressed=\"false\" android:drawable=\"@drawable/home_btn_bg_s\" />\n                <item android:state_enabled=\"true\" android:state_pressed=\"true\" android:drawable=\"@drawable/home_btn_bg_s\" />\n                <item android:state_enabled=\"true\" android:state_checked=\"true\" android:drawable=\"@drawable/home_btn_bg_d\" />\n                <item android:drawable=\"@drawable/transparent\" />\n            </selector>\n\n\n代码说明：\n\n\n\n\t\n  1. 需要注意的是他这里把TabWidget的Visibility设置成了gone!也就是默认难看的风格不见了：![](http://images.cnblogs.com/cnblogs_com/over140/2011/3/2011-3-1_2.jpg) ，取而代之的是5个带风格的单选按钮.\n\n\t\n  2. 注意为单选按钮设置的style，其中最重要的是为其background设置了home_btn_bg.xml，也就是自定义了选中效果。\n\n\nJava文件\n\n    \n    public class MainTabActivity extends TabActivity implements\n            OnCheckedChangeListener {\n    \n        private TabHost mHost;\n        private Intent mMBlogIntent;\n        private Intent mMoreIntent;\n        private Intent mInfoIntent;\n        private Intent mSearchIntent;\n        private Intent mUserInfoIntent;\n    \n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            requestWindowFeature(Window.FEATURE_NO_TITLE);\n            setContentView(R.layout.maintabs);\n    \n            // ~~~~~~~~~~~~ 初始化\n            this.mMBlogIntent = new Intent(this, HomeListActivity.class);\n            this.mSearchIntent = new Intent(this, SearchSquareActivity.class);\n            this.mInfoIntent = new Intent(this, MessageGroup.class);\n            this.mUserInfoIntent = new Intent(this, MyInfoActivity.class);\n            this.mMoreIntent = new Intent(this, MoreItemsActivity.class);\n    \n            initRadios();\n    \n            setupIntent();\n        }\n    \n        /**\n         * 初始化底部按钮\n         */\n        private void initRadios() {\n             ((RadioButton) findViewById(R.id.radio_button0)).setOnCheckedChangeListener(this);\n             ((RadioButton) findViewById(R.id.radio_button1)).setOnCheckedChangeListener(this);\n             ((RadioButton) findViewById(R.id.radio_button2)).setOnCheckedChangeListener(this);\n             ((RadioButton) findViewById(R.id.radio_button3)).setOnCheckedChangeListener(this);\n             ((RadioButton) findViewById(R.id.radio_button4)).setOnCheckedChangeListener(this);\n        }\n    \n        /**\n         * 切换模块\n         */\n        @Override\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            if (isChecked) {\n                switch (buttonView.getId()) {\n                case R.id.radio_button0:\n                    this.mHost.setCurrentTabByTag(\"mblog_tab\");\n                    break;\n                case R.id.radio_button1:\n                    this.mHost.setCurrentTabByTag(\"message_tab\");\n                    break;\n                case R.id.radio_button2:\n                    this.mHost.setCurrentTabByTag(\"userinfo_tab\");\n                    break;\n                case R.id.radio_button3:\n                    this.mHost.setCurrentTabByTag(\"search_tab\");\n                    break;\n                case R.id.radio_button4:\n                    this.mHost.setCurrentTabByTag(\"more_tab\");\n                    break;\n                }\n            }\n        }\n    \n        private void setupIntent() {\n            this.mHost = getTabHost();\n            TabHost localTabHost = this.mHost;\n    \n            localTabHost.addTab(buildTabSpec(\"mblog_tab\", R.string.main_home,\n                    R.drawable.icon_1_n, this.mMBlogIntent));\n    \n            localTabHost.addTab(buildTabSpec(\"message_tab\", R.string.main_news,\n                    R.drawable.icon_2_n, this.mInfoIntent));\n    \n            localTabHost.addTab(buildTabSpec(\"userinfo_tab\", R.string.main_my_info,\n                    R.drawable.icon_3_n, this.mUserInfoIntent));\n    \n            localTabHost.addTab(buildTabSpec(\"search_tab\", R.string.menu_search,\n                    R.drawable.icon_4_n, this.mSearchIntent));\n    \n            localTabHost.addTab(buildTabSpec(\"more_tab\", R.string.more,\n                    R.drawable.icon_5_n, this.mMoreIntent));\n    \n        }\n    \n        private TabHost.TabSpec buildTabSpec(String tag, int resLabel, int resIcon,\n                final Intent content) {\n            return this.mHost\n                    .newTabSpec(tag)\n                    .setIndicator(getString(resLabel),\n                            getResources().getDrawable(resIcon))\n                    .setContent(content);\n        }\n\n\n代码说明\n\n\n\n\t\n  1. 由于TabWidget被隐藏，所以相关的事件也会无效，这里取巧用RadioGroup与RadioButton的特性来处理切换，然后监听事件调用setCurrentTabByTag来切换Activity。\n\n\t\n  2. 注意即使TabWidget被隐藏，也要为其设置indicator，否则会保持。\n\n\n三、总结\n在这之前如果要做这种效果我恐怕第一时间就会想到用ActivityGroup来做，主要是因为TabHost的TabWidget非常难看，用起\n来也不方便。其实从源码可以看出，TabActivity也是继承自ActivityGroup，这里结合了单选按钮和TabHost，各取其长，有时间\n可以专门写一个这样的自定义控件:)\n\n四、相关文章\n\n[[Android]使用ActivityGroup来切换Activity和Layout](http://www.cnblogs.com/over140/archive/2010/09/07/1820876.html)\n\n结束\n\n本文中使用的资源均反编译自apk文件，这里主要是讲思路，欢迎大家交流。\n","source":"_posts/2011-03-02-sina-weibo-tool-bar-tabhost.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-03-02 07:44:21+00:00\nlayout: post\nslug: sina-weibo-tool-bar-tabhost\ntitle: 新浪微博布局学习——妙用TabHost\nwordpress_id: 95\ncategories:\n- Android\ntags:\n- Android\n---\n\n前言\n\n为了更好的开发Android应用程序，除了熟练掌握基本的UI组件和API外，还需要掌握一些技巧，而这些技巧可以通过阅读一些代码来提高，本系列将与大家分享一些新浪微博布局方面的收获，欢迎交流！\n\n声明\n\n欢迎转载，但请保留文章原始出处:)\n\n博客园：http://www.cnblogs.com\n\n农民伯伯： http://www.cnblogs.com/over140\n\n版本\n\n新浪微博 weibo_10235010.apk\n\n正文\n\n一、效果图\n\n![](http://images.cnblogs.com/cnblogs_com/over140/2011/3/2011-3-1_1.png)\n\n红色部分是本文要实现的目标。\n\n二、实现maintabs.xml\n\n    \n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <TabHost android:id=\"@android:id/tabhost\" android:layout_width=\"fill_parent\" android:layout_height=\"fill_parent\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\">\n        <LinearLayout android:orientation=\"vertical\" android:layout_width=\"fill_parent\" android:layout_height=\"fill_parent\">\n            <FrameLayout android:id=\"@android:id/tabcontent\" android:layout_width=\"fill_parent\" android:layout_height=\"0.0dip\" android:layout_weight=\"1.0\" />\n            <TabWidget android:id=\"@android:id/tabs\" android:visibility=\"gone\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:layout_weight=\"0.0\" />\n            <RadioGroup android:gravity=\"center_vertical\" android:layout_gravity=\"bottom\" android:orientation=\"horizontal\" android:id=\"@id/main_radio\" android:background=\"@drawable/maintab_toolbar_bg\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\">\n                <RadioButton   android:text=\"@string/main_home\" android:checked=\"true\" android:id=\"@+id/radio_button0\" android:layout_marginTop=\"2.0dip\" android:drawableTop=\"@drawable/icon_1_n\" style=\"@style/main_tab_bottom\" />\n                <RadioButton android:id=\"@+id/radio_button1\" android:layout_marginTop=\"2.0dip\" android:text=\"@string/main_news\" android:drawableTop=\"@drawable/icon_2_n\" style=\"@style/main_tab_bottom\" />\n                <RadioButton android:id=\"@+id/radio_button2\" android:layout_marginTop=\"2.0dip\" android:text=\"@string/main_my_info\" android:drawableTop=\"@drawable/icon_3_n\" style=\"@style/main_tab_bottom\" />\n                <RadioButton android:id=\"@+id/radio_button3\" android:layout_marginTop=\"2.0dip\" android:text=\"@string/menu_search\" android:drawableTop=\"@drawable/icon_4_n\" style=\"@style/main_tab_bottom\" />\n                <RadioButton android:id=\"@+id/radio_button4\" android:layout_marginTop=\"2.0dip\" android:text=\"@string/more\" android:drawableTop=\"@drawable/icon_5_n\" style=\"@style/main_tab_bottom\" />\n            </RadioGroup>\n        </LinearLayout>\n    </TabHost>\n\n\nstyles.xml\n\n    \n     <style name=\"main_tab_bottom\">\n            <item name=\"android:textSize\">@dimen/bottom_tab_font_size</item>\n            <item name=\"android:textColor\">#ffffffff</item>\n            <item name=\"android:ellipsize\">marquee</item>\n            <item name=\"android:gravity\">center_horizontal</item>\n            <item name=\"android:background\">@drawable/home_btn_bg</item>\n            <item name=\"android:paddingTop\">@dimen/bottom_tab_padding_up</item>\n            <item name=\"android:layout_width\">fill_parent</item>\n            <item name=\"android:layout_height\">wrap_content</item>\n            <item name=\"android:button\">@null</item>\n            <item name=\"android:singleLine\">true</item>\n            <item name=\"android:drawablePadding\">@dimen/bottom_tab_padding_drawable</item>\n            <item name=\"android:layout_weight\">1.0</item>\n        </style>\n\n\nhome_btn_bg.xml\n\n    \n     <selector\n              xmlns:android=\"http://schemas.android.com/apk/res/android\">\n                <item android:state_focused=\"true\" android:state_enabled=\"true\" android:state_pressed=\"false\" android:drawable=\"@drawable/home_btn_bg_s\" />\n                <item android:state_enabled=\"true\" android:state_pressed=\"true\" android:drawable=\"@drawable/home_btn_bg_s\" />\n                <item android:state_enabled=\"true\" android:state_checked=\"true\" android:drawable=\"@drawable/home_btn_bg_d\" />\n                <item android:drawable=\"@drawable/transparent\" />\n            </selector>\n\n\n代码说明：\n\n\n\n\t\n  1. 需要注意的是他这里把TabWidget的Visibility设置成了gone!也就是默认难看的风格不见了：![](http://images.cnblogs.com/cnblogs_com/over140/2011/3/2011-3-1_2.jpg) ，取而代之的是5个带风格的单选按钮.\n\n\t\n  2. 注意为单选按钮设置的style，其中最重要的是为其background设置了home_btn_bg.xml，也就是自定义了选中效果。\n\n\nJava文件\n\n    \n    public class MainTabActivity extends TabActivity implements\n            OnCheckedChangeListener {\n    \n        private TabHost mHost;\n        private Intent mMBlogIntent;\n        private Intent mMoreIntent;\n        private Intent mInfoIntent;\n        private Intent mSearchIntent;\n        private Intent mUserInfoIntent;\n    \n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            requestWindowFeature(Window.FEATURE_NO_TITLE);\n            setContentView(R.layout.maintabs);\n    \n            // ~~~~~~~~~~~~ 初始化\n            this.mMBlogIntent = new Intent(this, HomeListActivity.class);\n            this.mSearchIntent = new Intent(this, SearchSquareActivity.class);\n            this.mInfoIntent = new Intent(this, MessageGroup.class);\n            this.mUserInfoIntent = new Intent(this, MyInfoActivity.class);\n            this.mMoreIntent = new Intent(this, MoreItemsActivity.class);\n    \n            initRadios();\n    \n            setupIntent();\n        }\n    \n        /**\n         * 初始化底部按钮\n         */\n        private void initRadios() {\n             ((RadioButton) findViewById(R.id.radio_button0)).setOnCheckedChangeListener(this);\n             ((RadioButton) findViewById(R.id.radio_button1)).setOnCheckedChangeListener(this);\n             ((RadioButton) findViewById(R.id.radio_button2)).setOnCheckedChangeListener(this);\n             ((RadioButton) findViewById(R.id.radio_button3)).setOnCheckedChangeListener(this);\n             ((RadioButton) findViewById(R.id.radio_button4)).setOnCheckedChangeListener(this);\n        }\n    \n        /**\n         * 切换模块\n         */\n        @Override\n        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n            if (isChecked) {\n                switch (buttonView.getId()) {\n                case R.id.radio_button0:\n                    this.mHost.setCurrentTabByTag(\"mblog_tab\");\n                    break;\n                case R.id.radio_button1:\n                    this.mHost.setCurrentTabByTag(\"message_tab\");\n                    break;\n                case R.id.radio_button2:\n                    this.mHost.setCurrentTabByTag(\"userinfo_tab\");\n                    break;\n                case R.id.radio_button3:\n                    this.mHost.setCurrentTabByTag(\"search_tab\");\n                    break;\n                case R.id.radio_button4:\n                    this.mHost.setCurrentTabByTag(\"more_tab\");\n                    break;\n                }\n            }\n        }\n    \n        private void setupIntent() {\n            this.mHost = getTabHost();\n            TabHost localTabHost = this.mHost;\n    \n            localTabHost.addTab(buildTabSpec(\"mblog_tab\", R.string.main_home,\n                    R.drawable.icon_1_n, this.mMBlogIntent));\n    \n            localTabHost.addTab(buildTabSpec(\"message_tab\", R.string.main_news,\n                    R.drawable.icon_2_n, this.mInfoIntent));\n    \n            localTabHost.addTab(buildTabSpec(\"userinfo_tab\", R.string.main_my_info,\n                    R.drawable.icon_3_n, this.mUserInfoIntent));\n    \n            localTabHost.addTab(buildTabSpec(\"search_tab\", R.string.menu_search,\n                    R.drawable.icon_4_n, this.mSearchIntent));\n    \n            localTabHost.addTab(buildTabSpec(\"more_tab\", R.string.more,\n                    R.drawable.icon_5_n, this.mMoreIntent));\n    \n        }\n    \n        private TabHost.TabSpec buildTabSpec(String tag, int resLabel, int resIcon,\n                final Intent content) {\n            return this.mHost\n                    .newTabSpec(tag)\n                    .setIndicator(getString(resLabel),\n                            getResources().getDrawable(resIcon))\n                    .setContent(content);\n        }\n\n\n代码说明\n\n\n\n\t\n  1. 由于TabWidget被隐藏，所以相关的事件也会无效，这里取巧用RadioGroup与RadioButton的特性来处理切换，然后监听事件调用setCurrentTabByTag来切换Activity。\n\n\t\n  2. 注意即使TabWidget被隐藏，也要为其设置indicator，否则会保持。\n\n\n三、总结\n在这之前如果要做这种效果我恐怕第一时间就会想到用ActivityGroup来做，主要是因为TabHost的TabWidget非常难看，用起\n来也不方便。其实从源码可以看出，TabActivity也是继承自ActivityGroup，这里结合了单选按钮和TabHost，各取其长，有时间\n可以专门写一个这样的自定义控件:)\n\n四、相关文章\n\n[[Android]使用ActivityGroup来切换Activity和Layout](http://www.cnblogs.com/over140/archive/2010/09/07/1820876.html)\n\n结束\n\n本文中使用的资源均反编译自apk文件，这里主要是讲思路，欢迎大家交流。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvmu004az1n1wv19ab04"},{"author":"飞雪无情","comments":1,"date":"2011-02-21T18:38:51.000Z","layout":"post","slug":"writing-efficient-android-code","title":"编写高效的Android代码","wordpress_id":96,"_content":"\n\n\n毫无疑问，基于Android平台的设备一定是嵌入式设备。现代的手持设备不仅仅是一部电话那么简单，它还是一个小型的手持电脑，但是，即使是最快的最高端的手持设备也远远比不上一个中等性能的桌面机。\n\n这就是为什么在编写Android程序时要时刻考虑执行的效率，这些系统不是想象中的那么快，并且你还要考虑它电池的续航能力。这就意味着没有多少剩余空间给你去浪费了，因此，在你写Android程序的时候，要尽可能的使你的代码优化而提高效率。\n\n本页介绍了几种可以让开发者的Android程序运行的更加有效率的方法。通过下面的一些跳转的连接，你可以学会怎么让你的程序更加有效运行\n\n\n\n\n内容\n\n\n\n\t\n  * 介绍\n\n\t\n  * 尽量避免创建对象\n\n\t\n  * 使用自身方法\n\n\t\n  * 使用虚拟优于使用接口\n\n\t\n  * 使用静态优于使用虚拟\n\n\t\n  * 避免内部使用Setter和Getter\n\n\t\n  * 缓冲属性调用\n\n\t\n  * 声明Final常量\n\n\t\n  * 慎重使用增强型的For循环语句\n\n\t\n  * 避免列举类型Avoid Enums\n\n\t\n  * 通过内联类使用包空间\n\n\t\n  * 尽量避免浮点类型\n\n\t\n  * 一些标准操作的时间比较\n\n\t\n  * [结束语](/admin/blogs/l#closing_notes)\n\n\n\n\n\n## 介绍\n\n\n对于如何判断一个系统的不合理，这里有两个基本的原则：\n\n\n\n\t\n  * 不要做不必要做的事情。\n\n\t\n  * 尽可能的节省内存的使用。\n\n\n下面的所有方法都是基于这两项的。\n\n有人会认为本页花了大量的篇幅去讲如何进行“初步优化”（ premature\noptimization）。虽然有时候微观优化对开发高效的数据结构和算法很困难，但是在嵌入式手持设备上面你毫无选择。例如，如果把桌面电脑的虚拟机\n移植到你的Android系统中，你会发现你写的程序会耗尽你的内存。这就会导致程序运行起来极度缓慢，即使不考虑它对系统上其他的运行程序的影响。\n\n这就是为什么上面两条原则这么重要。Android的成功在于开发程序提供给用户的体验，然而用户体验的好坏又决定于你的代码是否能及时的响应而不\n至于慢的让人崩溃。因为我们所有的程序都会在同一个设备上面运行，所以我们把它们作为一个整体来考虑。本文就像你考驾照需要学习的交通规则一样：如果所有\n人遵守，事情就会很流畅；但当你不遵守时，你就会撞车。\n\n在我们讨论实质问题之前，有一个简要的说明：无论虚拟机是否是Java编译器的一个特点，下面介绍的所有观点都是正确的。如果我们有两种方法完成同\n样的事情，但是foo()的解释执行要快于bar()，那么foo()的编译速度一定不会比bar()慢，仅仅靠编译器使你的代码运行速度提升是不明智的\n做法。\n\n\n\n\n## 尽可能避免创建对象（Object）\n\n\n对象的创建并不是没有代价的。一个带有线程分配池的generational的内存管理机制会使创建临时对象的代价减少，不是分配内存总比不上不分配内存好。\n\n如果你在一个用户界面的循环中分配一个对象，你不得不强制的进行内存回收，那么就会使用户体验出现稍微“打嗝”的现象。\n\n因此，如果没有必要你就不应该创建对象实例。下面是一件有帮助的例子：\n\n\n\n\t\n  * 当从原始的输入数据中提取字符串时，试着从原始字符串返回一个子字符串，而不是创建一份拷贝。你将会创建一个新的字符串对象，但是它和你的原始数据共享数据空间。\n\n\t\n  * 如果你有一个返回字符串地方法，你应该知道无论如何返回的结果是StringBuffer，改变你的函数的定义和执行，让函数直接返回而不是通过创建一个临时的对象。\n\n\n一个比较激进的方法就是把一个多维数组分割成几个平行的一维数组：\n\n\t\n  * 一个Int类型的数组要比一个Integer类型的数组要好，但着同样也可以归纳于这样一个原则，两个Int类型的数组要比一个（int，int）对象数组的效率要高的多\n。对于其他原始数据类型，这个原则同样适用。\n\n\t\n  * \n如果你需要创建一个包含一系列Foo和Bar对象的容器（container）时，记住：两个平行的Foo[]和Bar[]要比一个（Foo,Bar）对\n象数组的效率高得多。（这个例子也有一个例外，当你设计其他代码的接口API时；在这种情况下，速度上的一点损失就不用考虑了。但是，在你的代码里面，你\n应该尽可能的编写高效代码。）\n\n\n一般来说，尽可能的避免创建短期的临时对象。越少的对象创建意味着越少的垃圾回收，这会提高你程序的用户体验质量。\n\n\n\n\n## 使用自身方法（Use Native Methods）\n\n\n当处理字符串的时候，不要犹豫，尽可能多的使用诸如String.indexOf()、String.lastIndexOf()这样对象自身带有的方法。因为这些方法使用C/C++来实现的，要比在一个java循环中做同样的事情快10-100倍。\n\n还有一点要补充说明的是，这些自身方法使用的代价要比那些解释过的方法高很多，因而，对于细微的运算，尽量不用这类方法。\n\n\n\n\n## 使用虚拟优于使用接口\n\n\n假设你有一个HashMap对象，你可以声明它是一个HashMap或则只是一个Map：\n\n    \n    Map myMap1 = new HashMap();\n    HashMap myMap2 = new HashMap();\n\n\n\n\n哪一个更好呢？\n\n一般来说明智的做法是使用Map，因为它能够允许你改变Map接口执行上面的任何东西，但是这种“明智”的方法只是适用于常规的编程，对于嵌入式系统并不适合。通过接口引用来调用会花费2倍以上的时间，相对于通过具体的引用进行虚拟函数的调用。\n\n如果你选择使用一个HashMap，因为它更适合于你的编程，那么使用Map会毫无价值。假定你有一个能重构你代码的集成编码环境，那么调用Map\n没有什么用处，即使你不确定你的程序从哪开头。（同样，public的API是一个例外，一个好的API的价值往往大于执行效率上的那点损失）\n\n\n\n\n## 使用静态优于使用虚拟\n\n\n如果你没有必要去访问对象的外部，那么使你的方法成为静态方法。它会被更快的调用，因为它不需要一个虚拟函数导向表。这同时也是一个很好的实践，因为它告诉你如何区分方法的性质（signature），调用这个方法不会改变对象的状态。\n\n\n\n\n## 尽可能避免使用内在的Get、Set方法\n\n\n像C++iyangde编程语言，通常会使用Get方法(例如` i = getCount()`\n)去取代直接访问这个属性（`i=mCount`\n）。 这在C++编程里面是一个很好的习惯，因为编译器会把访问方式设置为Inline，并且如果想约束或调试属性访问，你只需要在任何时候添加一些代码。\n\n在Android编程中，这不是一个很不好的主意。虚方法的调用会产生很多代价，比实例属性查询的代价还要多。我们应该在外部调用时使用Get和Set函数，但是在内部调用时，我们应该直接调用。\n\n\n\n\n## 缓冲属性调用Cache Field Lookups\n\n\n访问对象属性要比访问本地变量慢得多。你不应该这样写你的代码：\n\n    \n    for (int i = 0; i < this.mCount; i++)\n          dumpItem(this.mItems[i]);\n\n\n\n\n而是应该这样写：\n\n    \n      int count = this.mCount;\n      Item[] items = this.mItems;\n    \n      for (int i = 0; i < count; i++)\n          dumpItems(items[i]);\n\n\n\n\n（我们直接使用“this”表明这些是它的成员变量）\n\n一个相似的原则就是：决不在一个For语句中第二次调用一个类的方法。例如，下面的代码就会一次又一次地执行getCount（）方法，这是一个极大地浪费相比你把它直接隐藏到一个Int变量中。\n\n    \n    for (int i = 0; i < this.getCount(); i++)\n        dumpItems(this.getItem(i));\n\n\n\n\n这是一个比较好的办法，当你不止一次的调用某个实例时，直接本地化这个实例，把这个实例中的某些值赋给一个本地变量。例如：\n\n    \n     protected void drawHorizontalScrollBar(Canvas canvas, int width, int height) {\n            if (isHorizontalScrollBarEnabled()) {\n                int size = mScrollBar.getSize(false\n    \n    );\n                if (size <= 0) {\n                    size = mScrollBarSize;\n                }\n                mScrollBar.setBounds(0, height- size, width, height);\n                mScrollBar.setParams(\n                        computeHorizontalScrollRange(),\n                        computeHorizontalScrollOffset(),\n                        computeHorizontalScrollExtent(), false\n    \n    );\n                mScrollBar.draw(canvas);\n            }\n        }\n\n\n\n\n这里有四次`mScrollBar`\n的属性调用，把`mScrollBar`\n缓冲到一个堆栈变量之中，四次成员属性的调用就会变成四次堆栈的访问，这样就会提高效率。\n\n附带说一下，对于方法同样也可以像本地变量一样具有相同的特点。\n\n\n\n\n## 声明Final常量\n\n\n我们可以看看下面一个类顶部的声明：\n\n    \n    static int intVal = 42;\n    static String strVal = \"Hello, world!\";\n\n\n当一个类第一次使用时，编译器会调用一个类初始化方法——``\n，这个方法将42存入变量`intVal`\n，并且为`strVal`\n在类文件字符串常量表中提取一个引用，当这些值在后面引用时，就会直接属性调用。\n\n我们可以用关键字“final”来改进代码：\n\n    \n    static final int intVal = 42;\n    static final String strVal = \"Hello, world!\";\n\n\n这个类将不会调用es a ``\n方法，因为这些常量直接写入了类文件静态属性初始化中，这个初始化直接由虚拟机来处理。代码访问`intVal`\n将会使用Integer类型的42，访问`strVal`\n将使用相对节省的“字符串常量”来替代一个属性调用。\n\n将一个类或者方法声明为“final”并不会带来任何的执行上的好处，它能够进行一定的最优化处理。例如，如果编译器知道一个Get方法不能被子类重载，那么它就把该函数设置成Inline。\n\n同时，你也可以把本地变量声明为final变量。但是，这毫无意义。作为一个本地变量，使用final只能使代码更加清晰（或者你不得不用，在匿名访问内联类时）。\n\n\n\n\n## 慎重使用增强型For循环语句\n\n\n增强型For循环（也就是常说的“For-each循环”）经常用于Iterable接口的继承收集接口上面。在这些对象里面，一个\niterator被分配给对象去调用它的hasNext（）和next（）方法。在一个数组列表里面，你可以自己接的敷衍它，在其他的收集器里面，增强型\n的for循环将相当于iterator的使用。\n\n尽管如此，下面的源代码给出了一个可以接受的增强型for循环的例子：\n\n    \n    public class Foo {\n        int mSplat;\n        static Foo mArray[] = new Foo[27];\n    \n        public static void zero() {\n            int sum = 0;\n            for (int i = 0; i < mArray.length; i++) {\n                sum += mArray[i].mSplat;\n            }\n        }\n    \n        public static void one() {\n            int sum = 0;\n            Foo[] localArray = mArray;\n            int len = localArray.length;\n    \n            for (int i = 0; i < len; i++) {\n                sum += localArray[i].mSplat;\n            }\n        }\n    \n        public static void two() {\n            int sum = 0;\n            for (Foo a: mArray) {\n                sum += a.mSplat;\n            }\n        }\n    }\n\n\nzero()\n函数在每一次的循环中重新得到静态属性两次，获得数组长度一次。\n\none()\n函数把所有的东西都变为本地变量，避免类查找属性调用\n\ntwo()\n\n函数使用Java语言的1.5版本中的for循环语句，编辑者产生的源代码考虑到了拷贝数组的引用和数组的长度到本地变量，是例遍数组比较好的方法，它在\n主循环中确实产生了一个额外的载入和储存过程（显然保存了“a”），相比函数one（）来说，它有一点比特上的减慢和4字节的增长。\n\n总结之后，我们可以得到：增强的for循环在数组里面表现很好，但是当和Iterable对象一起使用时要谨慎，因为这里多了一个对象的创建。\n\n\n\n\n## 避免列举类型Avoid Enums\n\n\n列举类型非常好用，当考虑到尺寸和速度的时候，就会显得代价很高，例如：\n\n    \n    public class Foo {\n       public enum Shrubbery { GROUND, CRAWLING, HANGING }\n    }\n\n\n这会转变成为一个900字节的class文件（Foo$Shrubbery.class）。第一次使用时，类的初始化要在独享上面调用方法去描述列举的每一项，每一个对象都要有它自身的静态空间，整个被储存在一个数组里面（一个叫做“$VALUE”的静态数组）。那是一大堆的代码和数据，仅仅是为了三个整数值。\n\n    \n    Shrubbery shrub = Shrubbery.GROUND;\n\n\n这会引起一个静态属性的调用，如果GROUND是一个静态的Final变量，编译器会把它当做一个常数嵌套在代码里面。\n\n还有一点要说的，通过列举，你可以得到更好地API和一些编译时间上的检查。因此，一种比较平衡的做法就是：你应该尽一切方法在你的公用API中使用列举型变量，当处理问题时就尽量的避免。\n\n在一些环境下面，通过`ordinal`\n（）方法获取一个列举变量的整数值是很有用的，例如：把下面代码\n\n    \n    for (int n = 0; n < list.size(); n++) {\n        if (list.items[n].e == MyEnum.VAL_X)\n           // do stuff 1\n        else if (list.items[n].e == MyEnum.VAL_Y)\n           // do stuff 2\n    }\n\n\n替换为：\n\n    \n       int valX = MyEnum.VAL_X.ordinal();\n       int valY = MyEnum.VAL_Y.ordinal();\n       int count = list.size();\n       MyItem items = list.items();\n    \n       for (int  n = 0; n < count; n++)\n       {\n            int  valItem = items[n].e.ordinal();\n    \n            if (valItem == valX)\n              // do stuff 1\n            else if (valItem == valY)\n              // do stuff 2\n       }\n\n\n在一些条件下，这会执行的更快，虽然没有保障。\n\n\n\n\n## 通过内联类使用包空间\n\n\n我们看下面的类声明\n\n    \n    public class Foo {\n        private int mValue;\n    \n        public void run() {\n            Inner in = new Inner();\n            mValue = 27;\n            in.stuff();\n        }\n    \n        private void doStuff(int value) {\n            System.out.println(\"Value is \" + value);\n        }\n    \n        private class Inner {\n            void stuff() {\n                Foo.this.doStuff(Foo.this.mValue);\n            }\n        }\n    }\n\n\n这里我们要注意的是我们定义了一个内联类，它调用了外部类的私有方法和私有属性。这是合法的调用，代码应该会显示\"Value is 27\"。\n\n问题是Foo$Inner在理论上（后台运行上）是应该是一个完全独立的类，它违规的调用了Foo的私有成员。为了弥补这个缺陷，编译器产生了一对合成的方法：\n\n    \n    /*package*/ static int Foo.access$100(Foo foo) {\n        return foo.mValue;\n    }\n    /*package*/ static void Foo.access$200(Foo foo, int value) {\n        foo.doStuff(value);\n    }\n\n\n当内联类需要从外部访问“mValue”和调用“doStuff”时，内联类就会调用这些静态的方法，这就意味着你不是直接访问类成员，而是通过公共的方法来访问的。前面我们谈过间接访问要比直接访问慢，因此这是一个按语言习惯无形执行的例子。\n\n让拥有包空间的内联类直接声明需要访问的属性和方法，我们就可以避免这个问题，哲理诗是包空间而不是私有空间。这运行的更快并且去除了生成函数前面\n东西。（不幸的是，它同时也意味着该属性也能够被相同包下面的其他的类直接访问，这违反了标准的面向对象的使所有属性私有的原则。同样，如果是设计公共的\nAPI你就要仔细的考虑这种优化的用法）\n\n\n\n\n## 避免浮点类型的使用\n\n\n在奔腾CPU发布之前，游戏作者尽可能的使用Integer类型的数学函数是很正常的。在奔腾处理器里面，浮点数的处理变为它一个突出的特点，并且浮点数与整数的交互使用相比单独使用整数来说，前者会使你的游戏运行的更快，一般的在桌面电脑上面我们可以自由的使用浮点数。\n\n不幸的是，嵌入式的处理器通常并不支持浮点数的处理，阴齿所有的“float”和“double”操作都是通过软件进行的，一些基本的浮点数的操作就需要花费毫秒级的时间。\n\n同事，即使是整数，一些芯片也只有乘法而没有除法。在这些情况下，整数的除法和取模操作都是通过软件实现。当你创建一个Hash表或者进行大量的数学运算时，这都是你要考虑的。\n\n\n\n\n## 一些标准操作的时间比较\n\n\n为了距离说明我们的观点，下面有一张表，包括一些基本操作所使用的大概时间。注意这些时间并不是绝对的时间，绝对时间要考虑到CPU和时钟频率。系\n统不同，时间的大小也会有所差别。当然，这也是一种有意义的比较方法，我们可以比叫不同操作花费的相对时间。例如，添加一个成员变量的时间是添加一个本地\n变量的四倍。\n\nAction\nTime\n\n\n<table border=\"0\" >\n<tbody >\n<tr >\n\n<td >Add a local variable\n</td>\n\n<td >1\n</td>\n</tr>\n<tr >\n\n<td >Add a member variable\n</td>\n\n<td >4\n</td>\n</tr>\n<tr >\n\n<td >Call String.length()\n</td>\n\n<td >5\n</td>\n</tr>\n<tr >\n\n<td >Call empty static native method\n</td>\n\n<td >5\n</td>\n</tr>\n<tr >\n\n<td >Call empty static method\n</td>\n\n<td >12\n</td>\n</tr>\n<tr >\n\n<td >Call empty virtual method\n</td>\n\n<td >12.5\n</td>\n</tr>\n<tr >\n\n<td >Call empty interface method\n</td>\n\n<td >15\n</td>\n</tr>\n<tr >\n\n<td >Call Iterator:next() on a HashMap\n</td>\n\n<td >165\n</td>\n</tr>\n<tr >\n\n<td >Call put() on a HashMap\n</td>\n\n<td >600\n</td>\n</tr>\n<tr >\n\n<td >Inflate 1 View from XML\n</td>\n\n<td >22,000\n</td>\n</tr>\n<tr >\n\n<td >Inflate 1 LinearLayout containing 1 TextView\n</td>\n\n<td >25,000\n</td>\n</tr>\n<tr >\n\n<td >Inflate 1 LinearLayout containing 6 View objects\n</td>\n\n<td >100,000\n</td>\n</tr>\n<tr >\n\n<td >Inflate 1 LinearLayout containing 6 TextView objects\n</td>\n\n<td >135,000\n</td>\n</tr>\n<tr >\n\n<td >Launch an empty activity\n</td>\n\n<td >3,000,000\n</td>\n</tr>\n</tbody>\n</table>\n\n\n\n## 结束语\n\n\n写高效的嵌入式程序的最好方法就是要搞清楚你写的程序究竟做了些什么。如果你真的想分配一个iterator类，进一切方法的在一个List中使用增强型的for循环，使它成为一个有意而为之的做法，而不是一个无意的疏漏而产生负面影响。\n\n有备无患，搞清楚你在做什么！你可以假如你自己的一些行为准则，但是一定要注意你的代码正在做什么，然后开始寻找方法去优化它。\n\n转自：http://www.chinaup.org/docs/toolbox/performance.html\n","source":"_posts/2011-02-22-writing-efficient-android-code.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-02-22 02:38:51+00:00\nlayout: post\nslug: writing-efficient-android-code\ntitle: 编写高效的Android代码\nwordpress_id: 96\ncategories:\n- Android\ntags:\n- Android\n---\n\n\n\n毫无疑问，基于Android平台的设备一定是嵌入式设备。现代的手持设备不仅仅是一部电话那么简单，它还是一个小型的手持电脑，但是，即使是最快的最高端的手持设备也远远比不上一个中等性能的桌面机。\n\n这就是为什么在编写Android程序时要时刻考虑执行的效率，这些系统不是想象中的那么快，并且你还要考虑它电池的续航能力。这就意味着没有多少剩余空间给你去浪费了，因此，在你写Android程序的时候，要尽可能的使你的代码优化而提高效率。\n\n本页介绍了几种可以让开发者的Android程序运行的更加有效率的方法。通过下面的一些跳转的连接，你可以学会怎么让你的程序更加有效运行\n\n\n\n\n内容\n\n\n\n\t\n  * 介绍\n\n\t\n  * 尽量避免创建对象\n\n\t\n  * 使用自身方法\n\n\t\n  * 使用虚拟优于使用接口\n\n\t\n  * 使用静态优于使用虚拟\n\n\t\n  * 避免内部使用Setter和Getter\n\n\t\n  * 缓冲属性调用\n\n\t\n  * 声明Final常量\n\n\t\n  * 慎重使用增强型的For循环语句\n\n\t\n  * 避免列举类型Avoid Enums\n\n\t\n  * 通过内联类使用包空间\n\n\t\n  * 尽量避免浮点类型\n\n\t\n  * 一些标准操作的时间比较\n\n\t\n  * [结束语](/admin/blogs/l#closing_notes)\n\n\n\n\n\n## 介绍\n\n\n对于如何判断一个系统的不合理，这里有两个基本的原则：\n\n\n\n\t\n  * 不要做不必要做的事情。\n\n\t\n  * 尽可能的节省内存的使用。\n\n\n下面的所有方法都是基于这两项的。\n\n有人会认为本页花了大量的篇幅去讲如何进行“初步优化”（ premature\noptimization）。虽然有时候微观优化对开发高效的数据结构和算法很困难，但是在嵌入式手持设备上面你毫无选择。例如，如果把桌面电脑的虚拟机\n移植到你的Android系统中，你会发现你写的程序会耗尽你的内存。这就会导致程序运行起来极度缓慢，即使不考虑它对系统上其他的运行程序的影响。\n\n这就是为什么上面两条原则这么重要。Android的成功在于开发程序提供给用户的体验，然而用户体验的好坏又决定于你的代码是否能及时的响应而不\n至于慢的让人崩溃。因为我们所有的程序都会在同一个设备上面运行，所以我们把它们作为一个整体来考虑。本文就像你考驾照需要学习的交通规则一样：如果所有\n人遵守，事情就会很流畅；但当你不遵守时，你就会撞车。\n\n在我们讨论实质问题之前，有一个简要的说明：无论虚拟机是否是Java编译器的一个特点，下面介绍的所有观点都是正确的。如果我们有两种方法完成同\n样的事情，但是foo()的解释执行要快于bar()，那么foo()的编译速度一定不会比bar()慢，仅仅靠编译器使你的代码运行速度提升是不明智的\n做法。\n\n\n\n\n## 尽可能避免创建对象（Object）\n\n\n对象的创建并不是没有代价的。一个带有线程分配池的generational的内存管理机制会使创建临时对象的代价减少，不是分配内存总比不上不分配内存好。\n\n如果你在一个用户界面的循环中分配一个对象，你不得不强制的进行内存回收，那么就会使用户体验出现稍微“打嗝”的现象。\n\n因此，如果没有必要你就不应该创建对象实例。下面是一件有帮助的例子：\n\n\n\n\t\n  * 当从原始的输入数据中提取字符串时，试着从原始字符串返回一个子字符串，而不是创建一份拷贝。你将会创建一个新的字符串对象，但是它和你的原始数据共享数据空间。\n\n\t\n  * 如果你有一个返回字符串地方法，你应该知道无论如何返回的结果是StringBuffer，改变你的函数的定义和执行，让函数直接返回而不是通过创建一个临时的对象。\n\n\n一个比较激进的方法就是把一个多维数组分割成几个平行的一维数组：\n\n\t\n  * 一个Int类型的数组要比一个Integer类型的数组要好，但着同样也可以归纳于这样一个原则，两个Int类型的数组要比一个（int，int）对象数组的效率要高的多\n。对于其他原始数据类型，这个原则同样适用。\n\n\t\n  * \n如果你需要创建一个包含一系列Foo和Bar对象的容器（container）时，记住：两个平行的Foo[]和Bar[]要比一个（Foo,Bar）对\n象数组的效率高得多。（这个例子也有一个例外，当你设计其他代码的接口API时；在这种情况下，速度上的一点损失就不用考虑了。但是，在你的代码里面，你\n应该尽可能的编写高效代码。）\n\n\n一般来说，尽可能的避免创建短期的临时对象。越少的对象创建意味着越少的垃圾回收，这会提高你程序的用户体验质量。\n\n\n\n\n## 使用自身方法（Use Native Methods）\n\n\n当处理字符串的时候，不要犹豫，尽可能多的使用诸如String.indexOf()、String.lastIndexOf()这样对象自身带有的方法。因为这些方法使用C/C++来实现的，要比在一个java循环中做同样的事情快10-100倍。\n\n还有一点要补充说明的是，这些自身方法使用的代价要比那些解释过的方法高很多，因而，对于细微的运算，尽量不用这类方法。\n\n\n\n\n## 使用虚拟优于使用接口\n\n\n假设你有一个HashMap对象，你可以声明它是一个HashMap或则只是一个Map：\n\n    \n    Map myMap1 = new HashMap();\n    HashMap myMap2 = new HashMap();\n\n\n\n\n哪一个更好呢？\n\n一般来说明智的做法是使用Map，因为它能够允许你改变Map接口执行上面的任何东西，但是这种“明智”的方法只是适用于常规的编程，对于嵌入式系统并不适合。通过接口引用来调用会花费2倍以上的时间，相对于通过具体的引用进行虚拟函数的调用。\n\n如果你选择使用一个HashMap，因为它更适合于你的编程，那么使用Map会毫无价值。假定你有一个能重构你代码的集成编码环境，那么调用Map\n没有什么用处，即使你不确定你的程序从哪开头。（同样，public的API是一个例外，一个好的API的价值往往大于执行效率上的那点损失）\n\n\n\n\n## 使用静态优于使用虚拟\n\n\n如果你没有必要去访问对象的外部，那么使你的方法成为静态方法。它会被更快的调用，因为它不需要一个虚拟函数导向表。这同时也是一个很好的实践，因为它告诉你如何区分方法的性质（signature），调用这个方法不会改变对象的状态。\n\n\n\n\n## 尽可能避免使用内在的Get、Set方法\n\n\n像C++iyangde编程语言，通常会使用Get方法(例如` i = getCount()`\n)去取代直接访问这个属性（`i=mCount`\n）。 这在C++编程里面是一个很好的习惯，因为编译器会把访问方式设置为Inline，并且如果想约束或调试属性访问，你只需要在任何时候添加一些代码。\n\n在Android编程中，这不是一个很不好的主意。虚方法的调用会产生很多代价，比实例属性查询的代价还要多。我们应该在外部调用时使用Get和Set函数，但是在内部调用时，我们应该直接调用。\n\n\n\n\n## 缓冲属性调用Cache Field Lookups\n\n\n访问对象属性要比访问本地变量慢得多。你不应该这样写你的代码：\n\n    \n    for (int i = 0; i < this.mCount; i++)\n          dumpItem(this.mItems[i]);\n\n\n\n\n而是应该这样写：\n\n    \n      int count = this.mCount;\n      Item[] items = this.mItems;\n    \n      for (int i = 0; i < count; i++)\n          dumpItems(items[i]);\n\n\n\n\n（我们直接使用“this”表明这些是它的成员变量）\n\n一个相似的原则就是：决不在一个For语句中第二次调用一个类的方法。例如，下面的代码就会一次又一次地执行getCount（）方法，这是一个极大地浪费相比你把它直接隐藏到一个Int变量中。\n\n    \n    for (int i = 0; i < this.getCount(); i++)\n        dumpItems(this.getItem(i));\n\n\n\n\n这是一个比较好的办法，当你不止一次的调用某个实例时，直接本地化这个实例，把这个实例中的某些值赋给一个本地变量。例如：\n\n    \n     protected void drawHorizontalScrollBar(Canvas canvas, int width, int height) {\n            if (isHorizontalScrollBarEnabled()) {\n                int size = mScrollBar.getSize(false\n    \n    );\n                if (size <= 0) {\n                    size = mScrollBarSize;\n                }\n                mScrollBar.setBounds(0, height- size, width, height);\n                mScrollBar.setParams(\n                        computeHorizontalScrollRange(),\n                        computeHorizontalScrollOffset(),\n                        computeHorizontalScrollExtent(), false\n    \n    );\n                mScrollBar.draw(canvas);\n            }\n        }\n\n\n\n\n这里有四次`mScrollBar`\n的属性调用，把`mScrollBar`\n缓冲到一个堆栈变量之中，四次成员属性的调用就会变成四次堆栈的访问，这样就会提高效率。\n\n附带说一下，对于方法同样也可以像本地变量一样具有相同的特点。\n\n\n\n\n## 声明Final常量\n\n\n我们可以看看下面一个类顶部的声明：\n\n    \n    static int intVal = 42;\n    static String strVal = \"Hello, world!\";\n\n\n当一个类第一次使用时，编译器会调用一个类初始化方法——``\n，这个方法将42存入变量`intVal`\n，并且为`strVal`\n在类文件字符串常量表中提取一个引用，当这些值在后面引用时，就会直接属性调用。\n\n我们可以用关键字“final”来改进代码：\n\n    \n    static final int intVal = 42;\n    static final String strVal = \"Hello, world!\";\n\n\n这个类将不会调用es a ``\n方法，因为这些常量直接写入了类文件静态属性初始化中，这个初始化直接由虚拟机来处理。代码访问`intVal`\n将会使用Integer类型的42，访问`strVal`\n将使用相对节省的“字符串常量”来替代一个属性调用。\n\n将一个类或者方法声明为“final”并不会带来任何的执行上的好处，它能够进行一定的最优化处理。例如，如果编译器知道一个Get方法不能被子类重载，那么它就把该函数设置成Inline。\n\n同时，你也可以把本地变量声明为final变量。但是，这毫无意义。作为一个本地变量，使用final只能使代码更加清晰（或者你不得不用，在匿名访问内联类时）。\n\n\n\n\n## 慎重使用增强型For循环语句\n\n\n增强型For循环（也就是常说的“For-each循环”）经常用于Iterable接口的继承收集接口上面。在这些对象里面，一个\niterator被分配给对象去调用它的hasNext（）和next（）方法。在一个数组列表里面，你可以自己接的敷衍它，在其他的收集器里面，增强型\n的for循环将相当于iterator的使用。\n\n尽管如此，下面的源代码给出了一个可以接受的增强型for循环的例子：\n\n    \n    public class Foo {\n        int mSplat;\n        static Foo mArray[] = new Foo[27];\n    \n        public static void zero() {\n            int sum = 0;\n            for (int i = 0; i < mArray.length; i++) {\n                sum += mArray[i].mSplat;\n            }\n        }\n    \n        public static void one() {\n            int sum = 0;\n            Foo[] localArray = mArray;\n            int len = localArray.length;\n    \n            for (int i = 0; i < len; i++) {\n                sum += localArray[i].mSplat;\n            }\n        }\n    \n        public static void two() {\n            int sum = 0;\n            for (Foo a: mArray) {\n                sum += a.mSplat;\n            }\n        }\n    }\n\n\nzero()\n函数在每一次的循环中重新得到静态属性两次，获得数组长度一次。\n\none()\n函数把所有的东西都变为本地变量，避免类查找属性调用\n\ntwo()\n\n函数使用Java语言的1.5版本中的for循环语句，编辑者产生的源代码考虑到了拷贝数组的引用和数组的长度到本地变量，是例遍数组比较好的方法，它在\n主循环中确实产生了一个额外的载入和储存过程（显然保存了“a”），相比函数one（）来说，它有一点比特上的减慢和4字节的增长。\n\n总结之后，我们可以得到：增强的for循环在数组里面表现很好，但是当和Iterable对象一起使用时要谨慎，因为这里多了一个对象的创建。\n\n\n\n\n## 避免列举类型Avoid Enums\n\n\n列举类型非常好用，当考虑到尺寸和速度的时候，就会显得代价很高，例如：\n\n    \n    public class Foo {\n       public enum Shrubbery { GROUND, CRAWLING, HANGING }\n    }\n\n\n这会转变成为一个900字节的class文件（Foo$Shrubbery.class）。第一次使用时，类的初始化要在独享上面调用方法去描述列举的每一项，每一个对象都要有它自身的静态空间，整个被储存在一个数组里面（一个叫做“$VALUE”的静态数组）。那是一大堆的代码和数据，仅仅是为了三个整数值。\n\n    \n    Shrubbery shrub = Shrubbery.GROUND;\n\n\n这会引起一个静态属性的调用，如果GROUND是一个静态的Final变量，编译器会把它当做一个常数嵌套在代码里面。\n\n还有一点要说的，通过列举，你可以得到更好地API和一些编译时间上的检查。因此，一种比较平衡的做法就是：你应该尽一切方法在你的公用API中使用列举型变量，当处理问题时就尽量的避免。\n\n在一些环境下面，通过`ordinal`\n（）方法获取一个列举变量的整数值是很有用的，例如：把下面代码\n\n    \n    for (int n = 0; n < list.size(); n++) {\n        if (list.items[n].e == MyEnum.VAL_X)\n           // do stuff 1\n        else if (list.items[n].e == MyEnum.VAL_Y)\n           // do stuff 2\n    }\n\n\n替换为：\n\n    \n       int valX = MyEnum.VAL_X.ordinal();\n       int valY = MyEnum.VAL_Y.ordinal();\n       int count = list.size();\n       MyItem items = list.items();\n    \n       for (int  n = 0; n < count; n++)\n       {\n            int  valItem = items[n].e.ordinal();\n    \n            if (valItem == valX)\n              // do stuff 1\n            else if (valItem == valY)\n              // do stuff 2\n       }\n\n\n在一些条件下，这会执行的更快，虽然没有保障。\n\n\n\n\n## 通过内联类使用包空间\n\n\n我们看下面的类声明\n\n    \n    public class Foo {\n        private int mValue;\n    \n        public void run() {\n            Inner in = new Inner();\n            mValue = 27;\n            in.stuff();\n        }\n    \n        private void doStuff(int value) {\n            System.out.println(\"Value is \" + value);\n        }\n    \n        private class Inner {\n            void stuff() {\n                Foo.this.doStuff(Foo.this.mValue);\n            }\n        }\n    }\n\n\n这里我们要注意的是我们定义了一个内联类，它调用了外部类的私有方法和私有属性。这是合法的调用，代码应该会显示\"Value is 27\"。\n\n问题是Foo$Inner在理论上（后台运行上）是应该是一个完全独立的类，它违规的调用了Foo的私有成员。为了弥补这个缺陷，编译器产生了一对合成的方法：\n\n    \n    /*package*/ static int Foo.access$100(Foo foo) {\n        return foo.mValue;\n    }\n    /*package*/ static void Foo.access$200(Foo foo, int value) {\n        foo.doStuff(value);\n    }\n\n\n当内联类需要从外部访问“mValue”和调用“doStuff”时，内联类就会调用这些静态的方法，这就意味着你不是直接访问类成员，而是通过公共的方法来访问的。前面我们谈过间接访问要比直接访问慢，因此这是一个按语言习惯无形执行的例子。\n\n让拥有包空间的内联类直接声明需要访问的属性和方法，我们就可以避免这个问题，哲理诗是包空间而不是私有空间。这运行的更快并且去除了生成函数前面\n东西。（不幸的是，它同时也意味着该属性也能够被相同包下面的其他的类直接访问，这违反了标准的面向对象的使所有属性私有的原则。同样，如果是设计公共的\nAPI你就要仔细的考虑这种优化的用法）\n\n\n\n\n## 避免浮点类型的使用\n\n\n在奔腾CPU发布之前，游戏作者尽可能的使用Integer类型的数学函数是很正常的。在奔腾处理器里面，浮点数的处理变为它一个突出的特点，并且浮点数与整数的交互使用相比单独使用整数来说，前者会使你的游戏运行的更快，一般的在桌面电脑上面我们可以自由的使用浮点数。\n\n不幸的是，嵌入式的处理器通常并不支持浮点数的处理，阴齿所有的“float”和“double”操作都是通过软件进行的，一些基本的浮点数的操作就需要花费毫秒级的时间。\n\n同事，即使是整数，一些芯片也只有乘法而没有除法。在这些情况下，整数的除法和取模操作都是通过软件实现。当你创建一个Hash表或者进行大量的数学运算时，这都是你要考虑的。\n\n\n\n\n## 一些标准操作的时间比较\n\n\n为了距离说明我们的观点，下面有一张表，包括一些基本操作所使用的大概时间。注意这些时间并不是绝对的时间，绝对时间要考虑到CPU和时钟频率。系\n统不同，时间的大小也会有所差别。当然，这也是一种有意义的比较方法，我们可以比叫不同操作花费的相对时间。例如，添加一个成员变量的时间是添加一个本地\n变量的四倍。\n\nAction\nTime\n\n\n<table border=\"0\" >\n<tbody >\n<tr >\n\n<td >Add a local variable\n</td>\n\n<td >1\n</td>\n</tr>\n<tr >\n\n<td >Add a member variable\n</td>\n\n<td >4\n</td>\n</tr>\n<tr >\n\n<td >Call String.length()\n</td>\n\n<td >5\n</td>\n</tr>\n<tr >\n\n<td >Call empty static native method\n</td>\n\n<td >5\n</td>\n</tr>\n<tr >\n\n<td >Call empty static method\n</td>\n\n<td >12\n</td>\n</tr>\n<tr >\n\n<td >Call empty virtual method\n</td>\n\n<td >12.5\n</td>\n</tr>\n<tr >\n\n<td >Call empty interface method\n</td>\n\n<td >15\n</td>\n</tr>\n<tr >\n\n<td >Call Iterator:next() on a HashMap\n</td>\n\n<td >165\n</td>\n</tr>\n<tr >\n\n<td >Call put() on a HashMap\n</td>\n\n<td >600\n</td>\n</tr>\n<tr >\n\n<td >Inflate 1 View from XML\n</td>\n\n<td >22,000\n</td>\n</tr>\n<tr >\n\n<td >Inflate 1 LinearLayout containing 1 TextView\n</td>\n\n<td >25,000\n</td>\n</tr>\n<tr >\n\n<td >Inflate 1 LinearLayout containing 6 View objects\n</td>\n\n<td >100,000\n</td>\n</tr>\n<tr >\n\n<td >Inflate 1 LinearLayout containing 6 TextView objects\n</td>\n\n<td >135,000\n</td>\n</tr>\n<tr >\n\n<td >Launch an empty activity\n</td>\n\n<td >3,000,000\n</td>\n</tr>\n</tbody>\n</table>\n\n\n\n## 结束语\n\n\n写高效的嵌入式程序的最好方法就是要搞清楚你写的程序究竟做了些什么。如果你真的想分配一个iterator类，进一切方法的在一个List中使用增强型的for循环，使它成为一个有意而为之的做法，而不是一个无意的疏漏而产生负面影响。\n\n有备无患，搞清楚你在做什么！你可以假如你自己的一些行为准则，但是一定要注意你的代码正在做什么，然后开始寻找方法去优化它。\n\n转自：http://www.chinaup.org/docs/toolbox/performance.html\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvmw004dz1n1ktci8sfx"},{"author":"飞雪无情","comments":1,"date":"2011-02-14T21:48:01.000Z","layout":"post","slug":"android-icon-with-number","title":"Android中为图标加上数字--用于未读短信数提醒，待更新应用数提醒等","wordpress_id":112,"_content":"\n在我们开发一些如短消息、应用商店等应用时，会考虑在短消息的图标上加上未读短信的数量，在应用商店上加上可以升级的应用数量，这样不占太大空间还能达到提示的目的。\n\n\n\n\n\n\n本节就以一个展示手机内联系人数量的例子来演示怎么在一个图标的上面加上数字的例子，也就是一个数字overlay..做过google map开发的知道overlay这个东西。。\n\n\n\n\n\n\n##  一：你可学到\n\n\n\n\n\n\t\n  1. 手机内依据Uri查看联系人\n\n\t\n  2. 权限的添加\n\n\t\n  3. 获取手机内任意一款应用的应用图标\n\n\t\n  4. 对图形的处理，如复制，为图片加上覆盖层--数字。\n\n\t\n  5. 使用RemoteView自定义Notification\n\n\n\n\n## 二：开始行动\n\n\n\n\n\n\t\n  1. 新建名为NotificationIconCount的Android Project。附件中有最终版本的项目工程\n\n\t\n  2. 首先修改AndroidManifest.xml,加入权限,因为我们要读取联系人。\n\n\t\n  3. 修改main.xml如下,这里定义一个ImageView，勇于预览我们处理好的加上数字的图标。\n\n\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n        <ImageView \n        \tandroid:id=\"@+id/icon\"\n        \tandroid:layout_width=\"wrap_content\"\n        \tandroid:layout_height=\"wrap_content\"\n        \tandroid:scaleType=\"center\"\n        \tandroid:adjustViewBounds=\"true\"/>\n    </LinearLayout>\n\n\n\n\n\n\t\n  4. 先来获取手机内通讯录的图标，如果没有获取到，则使用该应用的图标.\n\n\n\n    \n    super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            mImageView=(ImageView)findViewById(R.id.icon);\n            //优先采用联系人的图标，如果不存在则采用该应用的图标\n            Drawable contactIcon;\n    \t\ttry {\n    \t\t\tcontactIcon = getPackageManager().getApplicationIcon(\"com.android.contacts\");\n    \t\t} catch (NameNotFoundException e) {\n    \t\t\tcontactIcon=null;\n    \t\t}\n    \t\tBitmap icon;\n            if(contactIcon instanceof BitmapDrawable){\n            \ticon=((BitmapDrawable)contactIcon).getBitmap();\n            }else{\n            \ticon=getResIcon(getResources(), R.id.icon);\n            }\n\n\n这里用到一个自定义的根据资源图标id获取图片的函数，很简单，代码如下：\n\n    \n    \t/**\n         * 根据id获取一个图片\n         * @param res\n         * @param resId\n         * @return\n         */\n        private Bitmap getResIcon(Resources res,int resId){\n        \tDrawable icon=res.getDrawable(resId);\n        \tif(icon instanceof BitmapDrawable){\n        \t\tBitmapDrawable bd=(BitmapDrawable)icon;\n        \t\treturn bd.getBitmap();\n        \t}else{\n        \t\treturn null;\n        \t}\n        }\n\n\n\n\n\n\t\n  5. 获取到图标之后就要对这个图标进行处理了，要为该图标加上联系人数量的覆盖，首先我们看获取联系人个数的函数。\n\n\n\n    \n    /**\n         * 获取联系人的个数\n         * @return 手里通讯录中联系人的个数\n         */\n        private int getContactCount(){\n        \tCursor c=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, new String[]{ContactsContract.Contacts._COUNT}, null, null, null);\n        \ttry{\n        \t\tc.moveToFirst();\n        \t\treturn c.getInt(0);\n        \t}catch(Exception e){\n        \t\treturn 0;\n        \t}finally{\n        \t\tc.close();\n        \t}\n        }\n\n\n这里采用Uri的方式获取联系人的cursor，然后获取个数。\n\n\n\n\t\n  6. 有了图标和联系人个数就可以生成带联系人个数的图标了，我们看下生成的这个函数。\n\n\n\n    \n    /**\n         * 在给定的图片的右上角加上联系人数量。数量用红色表示\n         * @param icon 给定的图片\n         * @return 带联系人数量的图片\n         */\n        private Bitmap generatorContactCountIcon(Bitmap icon){\n        \t//初始化画布\n        \tint iconSize=(int)getResources().getDimension(android.R.dimen.app_icon_size);\n        \tLog.d(TAG, \"the icon size is \"+iconSize);\n        \tBitmap contactIcon=Bitmap.createBitmap(iconSize, iconSize, Config.ARGB_8888);\n        \tCanvas canvas=new Canvas(contactIcon);\n    \n        \t//拷贝图片\n        \tPaint iconPaint=new Paint();\n        \ticonPaint.setDither(true);//防抖动\n        \ticonPaint.setFilterBitmap(true);//用来对Bitmap进行滤波处理，这样，当你选择Drawable时，会有抗锯齿的效果\n        \tRect src=new Rect(0, 0, icon.getWidth(), icon.getHeight());\n        \tRect dst=new Rect(0, 0, iconSize, iconSize);\n        \tcanvas.drawBitmap(icon, src, dst, iconPaint);\n    \n        \t//在图片上创建一个覆盖的联系人个数\n        \tint contacyCount=getContactCount();\n        \t//启用抗锯齿和使用设备的文本字距\n        \tPaint countPaint=new Paint(Paint.ANTI_ALIAS_FLAG|Paint.DEV_KERN_TEXT_FLAG);\n        \tcountPaint.setColor(Color.RED);\n        \tcountPaint.setTextSize(20f);\n        \tcountPaint.setTypeface(Typeface.DEFAULT_BOLD);\n        \tcanvas.drawText(String.valueOf(contacyCount), iconSize-18, 25, countPaint);\n        \treturn contactIcon;\n        }\n\n\n注释的很详细，就不解释了，无非就是定义一个画布(Canvas)，然后在上面画图标，画数字文本。\n\n\n\n\t\n  7. 然后我们把得到的这个处理过的Bitmap放在我们在main.xml里定义的ImageView里展示就可以看到效果了.\n\n\n\n    \n    mImageView.setImageBitmap(contactCountIcon);\n\n\n\n\n\n\t\n  8. 我们启动应用看看效果.\n\n\n![](http://dl.iteye.com/upload/attachment/416490/e01bcd81-c359-366c-944b-1b451c698847.png)\n我们看到了，右上角红色的1代表我手机中有一个联系人\n\n\n## 三：采用状态栏通知的办法展示联系人的数量\n\n\n\n\n\n\t\n  1. 如果我们监听未读短信的数量，展示在状态栏通知了，就可以用这个方法，我这里还是以联系人的数量为例\n\n\t\n  2. 由于Notification默认的icon字段使用的是一个一个资源的引用类型int,所以我们这里采用RemoteView的方式自定义Notification。定义RemoteView，需要一个layout，用于定义展示的Notification样式，我们新建一个notification.xml布局文件如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                  android:orientation=\"horizontal\"\n                  android:layout_width=\"fill_parent\"\n                  android:layout_height=\"fill_parent\"\n                  android:padding=\"3dp\"\n                  >\n        <ImageView android:id=\"@+id/image\"\n                  android:layout_width=\"wrap_content\"\n                  android:layout_height=\"fill_parent\"\n                  android:layout_marginRight=\"10dp\"\n                  />\n        <TextView android:id=\"@+id/text\"\n                  android:layout_width=\"wrap_content\"\n                  android:layout_height=\"fill_parent\"\n                  android:textColor=\"#000\"\n                  />\n    </LinearLayout>\n\n\n很简单，一个ImageView和一个TextView，用于显示提示的图标和文字。\n\n\t\n  3. 要想使用Notification，我们必须获取一个Service--NotificationManager,Android中由它来管理我们的Notification，获取NotificationManager的代码如下,卸载onCreate方法里\n\n    \n    nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);\n\n\n\n\n\t\n  4. 然后紧接着我们就调用我们定义好的方法来显示通知:\n\n    \n    showNotifacation(contactCountIcon);\n\n\n\n\n\t\n  5. 下面我们看一下方法showNotifacation的具体实现:\n\n    \n        /**\n         * 显示状态栏通知\n         * @param icon 通知内容图标\n         */\n        private void showNotifacation(Bitmap icon){\n        \tNotification notification=new  Notification(R.drawable.icon,\"联系人数量\",System.currentTimeMillis());\n        \t//使用RemoteView自定义通知视图\n        \tRemoteViews contentView=new RemoteViews(getPackageName(), R.layout.notification);\n        \tcontentView.setImageViewBitmap(R.id.image, icon);\n        \tcontentView.setTextViewText(R.id.text, \"图标上的红色数字表示手机中联系人的数量\");\n        \tnotification.contentView=contentView;\n        \tIntent notificationIntent=new Intent(this, NotificationIconActivity.class);\n        \tPendingIntent contentIntent=PendingIntent.getActivity(this, 0, notificationIntent, 0);\n        \tnotification.contentIntent=contentIntent;\n        \tnm.notify(NOTIFICATION_CONTACT_ID, notification);\n        }\n\n\n注释的都很详细，就不一一解释了\n\n\t\n  6. 最后的就是重写onDestroy，在Android销毁该Activity的时候清除我们的通知。\n\n    \n    @Override\n    \tprotected void onDestroy() {\n    \t\tsuper.onDestroy();\n    \t\tnm.cancel(NOTIFICATION_CONTACT_ID);\n    \t}\n\n\n\n\n\t\n  7. 运行，可以看到如下效果\n![](http://dl.iteye.com/upload/attachment/416492/cf287cda-9c80-3fe1-8fe9-09d06f677b33.png)\n可以看到，效果已经出来了。。\n\n\n\n\n## 四：小结和一点引申\n\n\n这结的主要关键还是对图片的处理，比如这里的加上数字，当时你也可以加上其他的东西，Canvas里有很多相应的函数可以使用。。\n\n这里说的都是应用内、状态通知等一些显示处理后图片的办法，那么有没有方法处理手机主屏幕上的图标的办法，为他们加上数字呢。比如在短信息的应用图标的右上角加上未读短信数目等,答案是有的，不过是迂回实现的，给个思路就是使用AppWidget,这个可以实现，还能动态更新，具体怎么实现，大家可以自己摸索下，这里只提供个思路，整体和这节的例子差不多，只不过呢，要做成AppWidget。。。\n","source":"_posts/2011-02-15-android-icon-with-number.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-02-15 05:48:01+00:00\nlayout: post\nslug: android-icon-with-number\ntitle: Android中为图标加上数字--用于未读短信数提醒，待更新应用数提醒等\nwordpress_id: 112\ncategories:\n- Android\ntags:\n- Android\n---\n\n在我们开发一些如短消息、应用商店等应用时，会考虑在短消息的图标上加上未读短信的数量，在应用商店上加上可以升级的应用数量，这样不占太大空间还能达到提示的目的。\n\n\n\n\n\n\n本节就以一个展示手机内联系人数量的例子来演示怎么在一个图标的上面加上数字的例子，也就是一个数字overlay..做过google map开发的知道overlay这个东西。。\n\n\n\n\n\n\n##  一：你可学到\n\n\n\n\n\n\t\n  1. 手机内依据Uri查看联系人\n\n\t\n  2. 权限的添加\n\n\t\n  3. 获取手机内任意一款应用的应用图标\n\n\t\n  4. 对图形的处理，如复制，为图片加上覆盖层--数字。\n\n\t\n  5. 使用RemoteView自定义Notification\n\n\n\n\n## 二：开始行动\n\n\n\n\n\n\t\n  1. 新建名为NotificationIconCount的Android Project。附件中有最终版本的项目工程\n\n\t\n  2. 首先修改AndroidManifest.xml,加入权限,因为我们要读取联系人。\n\n\t\n  3. 修改main.xml如下,这里定义一个ImageView，勇于预览我们处理好的加上数字的图标。\n\n\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n        <ImageView \n        \tandroid:id=\"@+id/icon\"\n        \tandroid:layout_width=\"wrap_content\"\n        \tandroid:layout_height=\"wrap_content\"\n        \tandroid:scaleType=\"center\"\n        \tandroid:adjustViewBounds=\"true\"/>\n    </LinearLayout>\n\n\n\n\n\n\t\n  4. 先来获取手机内通讯录的图标，如果没有获取到，则使用该应用的图标.\n\n\n\n    \n    super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            mImageView=(ImageView)findViewById(R.id.icon);\n            //优先采用联系人的图标，如果不存在则采用该应用的图标\n            Drawable contactIcon;\n    \t\ttry {\n    \t\t\tcontactIcon = getPackageManager().getApplicationIcon(\"com.android.contacts\");\n    \t\t} catch (NameNotFoundException e) {\n    \t\t\tcontactIcon=null;\n    \t\t}\n    \t\tBitmap icon;\n            if(contactIcon instanceof BitmapDrawable){\n            \ticon=((BitmapDrawable)contactIcon).getBitmap();\n            }else{\n            \ticon=getResIcon(getResources(), R.id.icon);\n            }\n\n\n这里用到一个自定义的根据资源图标id获取图片的函数，很简单，代码如下：\n\n    \n    \t/**\n         * 根据id获取一个图片\n         * @param res\n         * @param resId\n         * @return\n         */\n        private Bitmap getResIcon(Resources res,int resId){\n        \tDrawable icon=res.getDrawable(resId);\n        \tif(icon instanceof BitmapDrawable){\n        \t\tBitmapDrawable bd=(BitmapDrawable)icon;\n        \t\treturn bd.getBitmap();\n        \t}else{\n        \t\treturn null;\n        \t}\n        }\n\n\n\n\n\n\t\n  5. 获取到图标之后就要对这个图标进行处理了，要为该图标加上联系人数量的覆盖，首先我们看获取联系人个数的函数。\n\n\n\n    \n    /**\n         * 获取联系人的个数\n         * @return 手里通讯录中联系人的个数\n         */\n        private int getContactCount(){\n        \tCursor c=getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, new String[]{ContactsContract.Contacts._COUNT}, null, null, null);\n        \ttry{\n        \t\tc.moveToFirst();\n        \t\treturn c.getInt(0);\n        \t}catch(Exception e){\n        \t\treturn 0;\n        \t}finally{\n        \t\tc.close();\n        \t}\n        }\n\n\n这里采用Uri的方式获取联系人的cursor，然后获取个数。\n\n\n\n\t\n  6. 有了图标和联系人个数就可以生成带联系人个数的图标了，我们看下生成的这个函数。\n\n\n\n    \n    /**\n         * 在给定的图片的右上角加上联系人数量。数量用红色表示\n         * @param icon 给定的图片\n         * @return 带联系人数量的图片\n         */\n        private Bitmap generatorContactCountIcon(Bitmap icon){\n        \t//初始化画布\n        \tint iconSize=(int)getResources().getDimension(android.R.dimen.app_icon_size);\n        \tLog.d(TAG, \"the icon size is \"+iconSize);\n        \tBitmap contactIcon=Bitmap.createBitmap(iconSize, iconSize, Config.ARGB_8888);\n        \tCanvas canvas=new Canvas(contactIcon);\n    \n        \t//拷贝图片\n        \tPaint iconPaint=new Paint();\n        \ticonPaint.setDither(true);//防抖动\n        \ticonPaint.setFilterBitmap(true);//用来对Bitmap进行滤波处理，这样，当你选择Drawable时，会有抗锯齿的效果\n        \tRect src=new Rect(0, 0, icon.getWidth(), icon.getHeight());\n        \tRect dst=new Rect(0, 0, iconSize, iconSize);\n        \tcanvas.drawBitmap(icon, src, dst, iconPaint);\n    \n        \t//在图片上创建一个覆盖的联系人个数\n        \tint contacyCount=getContactCount();\n        \t//启用抗锯齿和使用设备的文本字距\n        \tPaint countPaint=new Paint(Paint.ANTI_ALIAS_FLAG|Paint.DEV_KERN_TEXT_FLAG);\n        \tcountPaint.setColor(Color.RED);\n        \tcountPaint.setTextSize(20f);\n        \tcountPaint.setTypeface(Typeface.DEFAULT_BOLD);\n        \tcanvas.drawText(String.valueOf(contacyCount), iconSize-18, 25, countPaint);\n        \treturn contactIcon;\n        }\n\n\n注释的很详细，就不解释了，无非就是定义一个画布(Canvas)，然后在上面画图标，画数字文本。\n\n\n\n\t\n  7. 然后我们把得到的这个处理过的Bitmap放在我们在main.xml里定义的ImageView里展示就可以看到效果了.\n\n\n\n    \n    mImageView.setImageBitmap(contactCountIcon);\n\n\n\n\n\n\t\n  8. 我们启动应用看看效果.\n\n\n![](http://dl.iteye.com/upload/attachment/416490/e01bcd81-c359-366c-944b-1b451c698847.png)\n我们看到了，右上角红色的1代表我手机中有一个联系人\n\n\n## 三：采用状态栏通知的办法展示联系人的数量\n\n\n\n\n\n\t\n  1. 如果我们监听未读短信的数量，展示在状态栏通知了，就可以用这个方法，我这里还是以联系人的数量为例\n\n\t\n  2. 由于Notification默认的icon字段使用的是一个一个资源的引用类型int,所以我们这里采用RemoteView的方式自定义Notification。定义RemoteView，需要一个layout，用于定义展示的Notification样式，我们新建一个notification.xml布局文件如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                  android:orientation=\"horizontal\"\n                  android:layout_width=\"fill_parent\"\n                  android:layout_height=\"fill_parent\"\n                  android:padding=\"3dp\"\n                  >\n        <ImageView android:id=\"@+id/image\"\n                  android:layout_width=\"wrap_content\"\n                  android:layout_height=\"fill_parent\"\n                  android:layout_marginRight=\"10dp\"\n                  />\n        <TextView android:id=\"@+id/text\"\n                  android:layout_width=\"wrap_content\"\n                  android:layout_height=\"fill_parent\"\n                  android:textColor=\"#000\"\n                  />\n    </LinearLayout>\n\n\n很简单，一个ImageView和一个TextView，用于显示提示的图标和文字。\n\n\t\n  3. 要想使用Notification，我们必须获取一个Service--NotificationManager,Android中由它来管理我们的Notification，获取NotificationManager的代码如下,卸载onCreate方法里\n\n    \n    nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);\n\n\n\n\n\t\n  4. 然后紧接着我们就调用我们定义好的方法来显示通知:\n\n    \n    showNotifacation(contactCountIcon);\n\n\n\n\n\t\n  5. 下面我们看一下方法showNotifacation的具体实现:\n\n    \n        /**\n         * 显示状态栏通知\n         * @param icon 通知内容图标\n         */\n        private void showNotifacation(Bitmap icon){\n        \tNotification notification=new  Notification(R.drawable.icon,\"联系人数量\",System.currentTimeMillis());\n        \t//使用RemoteView自定义通知视图\n        \tRemoteViews contentView=new RemoteViews(getPackageName(), R.layout.notification);\n        \tcontentView.setImageViewBitmap(R.id.image, icon);\n        \tcontentView.setTextViewText(R.id.text, \"图标上的红色数字表示手机中联系人的数量\");\n        \tnotification.contentView=contentView;\n        \tIntent notificationIntent=new Intent(this, NotificationIconActivity.class);\n        \tPendingIntent contentIntent=PendingIntent.getActivity(this, 0, notificationIntent, 0);\n        \tnotification.contentIntent=contentIntent;\n        \tnm.notify(NOTIFICATION_CONTACT_ID, notification);\n        }\n\n\n注释的都很详细，就不一一解释了\n\n\t\n  6. 最后的就是重写onDestroy，在Android销毁该Activity的时候清除我们的通知。\n\n    \n    @Override\n    \tprotected void onDestroy() {\n    \t\tsuper.onDestroy();\n    \t\tnm.cancel(NOTIFICATION_CONTACT_ID);\n    \t}\n\n\n\n\n\t\n  7. 运行，可以看到如下效果\n![](http://dl.iteye.com/upload/attachment/416492/cf287cda-9c80-3fe1-8fe9-09d06f677b33.png)\n可以看到，效果已经出来了。。\n\n\n\n\n## 四：小结和一点引申\n\n\n这结的主要关键还是对图片的处理，比如这里的加上数字，当时你也可以加上其他的东西，Canvas里有很多相应的函数可以使用。。\n\n这里说的都是应用内、状态通知等一些显示处理后图片的办法，那么有没有方法处理手机主屏幕上的图标的办法，为他们加上数字呢。比如在短信息的应用图标的右上角加上未读短信数目等,答案是有的，不过是迂回实现的，给个思路就是使用AppWidget,这个可以实现，还能动态更新，具体怎么实现，大家可以自己摸索下，这里只提供个思路，整体和这节的例子差不多，只不过呢，要做成AppWidget。。。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvmy004gz1n1ircbpn3o"},{"author":"飞雪无情","comments":1,"date":"2011-01-20T01:41:53.000Z","layout":"post","slug":"android-gridview-tutorial","title":"Android GridView组件的使用","wordpress_id":114,"_content":"\nGridView是一个网络布局的视图，他能让你的元素显示在一个个的格子里。我们的桌面就是一个GridView。。\n\n\n\n\n\n\t\n  1. 新建一个HelloGridView的工程\n\n\t\n  2. 修改main.xml代码如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <GridView\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:id=\"@+id/gridview\"\n      android:layout_width=\"fill_parent\"\n      android:layout_height=\"fill_parent\"\n      android:columnWidth=\"90dp\"\n      android:numColumns=\"auto_fit\"\n      android:horizontalSpacing=\"10dp\"\n      android:verticalSpacing=\"10dp\"\n      android:stretchMode=\"columnWidth\"\n      android:gravity=\"center\">\n    </GridView>\n\n\n很简单，就是一个GridView。设置列宽为90dp,这样当我们的numColumns设置为auto_fit时，Android就会自动计算我们手机屏幕的大小以决定每一行展示几个元素。这是很方便。android:horizontalSpacing定义列之间的间隔，android:verticalSpacing定义行之间的间隔。android:stretchMode设置为columnWidth是意味着根据列宽自动缩放。\n\n\t\n  3. 修改我们Activity HelloGridView如下：\n\n    \n    /**\n     * \n     * @author 飞雪无情\n     * @since 2011-1-20\n     */\n    public class HelloGridView extends Activity {\n        /** Called when the activity is first created. */\n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tsetContentView(R.layout.main);\n    \t\tGridView gridView=(GridView)findViewById(R.id.gridview);\n    \t\tgridView.setAdapter(new ImageAdapter(this));\n    \t\t//单击GridView元素的响应\n    \t\tgridView.setOnItemClickListener(new OnItemClickListener() {\n    \n    \t\t\t@Override\n    \t\t\tpublic void onItemClick(AdapterView<!--?--> parent, View view,\n    \t\t\t\t\tint position, long id) {\n    \t\t\t\t//弹出单击的GridView元素的位置\n    \t\t\t\tToast.makeText(HelloGridView.this,mThumbIds[position], Toast.LENGTH_SHORT).show();\n    \t\t\t}\n    \t\t});\n    \t}\n    \tprivate class ImageAdapter extends BaseAdapter{\n    \t\tprivate Context mContext;\n    \n    \t\tpublic ImageAdapter(Context context) {\n    \t\t\tthis.mContext=context;\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic int getCount() {\n    \t\t\treturn mThumbIds.length;\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic Object getItem(int position) {\n    \t\t\treturn mThumbIds[position];\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic long getItemId(int position) {\n    \t\t\t// TODO Auto-generated method stub\n    \t\t\treturn 0;\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic View getView(int position, View convertView, ViewGroup parent) {\n    \t\t\t//定义一个ImageView,显示在GridView里\n    \t\t\tImageView imageView;\n    \t\t\tif(convertView==null){\n    \t\t\t\timageView=new ImageView(mContext);\n    \t\t\t\timageView.setLayoutParams(new GridView.LayoutParams(85, 85));\n    \t\t\t\timageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n    \t            imageView.setPadding(8, 8, 8, 8);\n    \t\t\t}else{\n    \t\t\t\timageView = (ImageView) convertView;\n    \t\t\t}\n    \t\t\timageView.setImageResource(mThumbIds[position]);\n    \t\t\treturn imageView;\n    \t\t}\n    \n    \t}\n    \t//展示图片\n    \tprivate Integer[] mThumbIds = {\n                R.drawable.sample_2, R.drawable.sample_3,\n                R.drawable.sample_4, R.drawable.sample_5,\n                R.drawable.sample_6, R.drawable.sample_7,\n                R.drawable.sample_0, R.drawable.sample_1,\n                R.drawable.sample_2, R.drawable.sample_3,\n                R.drawable.sample_4, R.drawable.sample_5,\n                R.drawable.sample_6, R.drawable.sample_7,\n                R.drawable.sample_0, R.drawable.sample_1,\n                R.drawable.sample_2, R.drawable.sample_3,\n                R.drawable.sample_4, R.drawable.sample_5,\n                R.drawable.sample_6, R.drawable.sample_7\n        };\n    }\n\n\n这里我们也是采用的自定义Adapter，可以上一节的自定义Adapter讲解。展示了一些图片，然后点击一个图片的时候会显示这个图片所在的位置。\n\n\t\n  4. 运行程序，效果图如下：\n![](http://dl.iteye.com/upload/attachment/401529/01f43426-e794-3215-84c1-9273836917cc.jpg)\n\n\n\n本文附件下载:\n\n","source":"_posts/2011-01-20-android-gridview-tutorial.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-01-20 09:41:53+00:00\nlayout: post\nslug: android-gridview-tutorial\ntitle: Android GridView组件的使用\nwordpress_id: 114\ncategories:\n- Android\ntags:\n- Android\n- Widget\n---\n\nGridView是一个网络布局的视图，他能让你的元素显示在一个个的格子里。我们的桌面就是一个GridView。。\n\n\n\n\n\n\t\n  1. 新建一个HelloGridView的工程\n\n\t\n  2. 修改main.xml代码如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <GridView\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:id=\"@+id/gridview\"\n      android:layout_width=\"fill_parent\"\n      android:layout_height=\"fill_parent\"\n      android:columnWidth=\"90dp\"\n      android:numColumns=\"auto_fit\"\n      android:horizontalSpacing=\"10dp\"\n      android:verticalSpacing=\"10dp\"\n      android:stretchMode=\"columnWidth\"\n      android:gravity=\"center\">\n    </GridView>\n\n\n很简单，就是一个GridView。设置列宽为90dp,这样当我们的numColumns设置为auto_fit时，Android就会自动计算我们手机屏幕的大小以决定每一行展示几个元素。这是很方便。android:horizontalSpacing定义列之间的间隔，android:verticalSpacing定义行之间的间隔。android:stretchMode设置为columnWidth是意味着根据列宽自动缩放。\n\n\t\n  3. 修改我们Activity HelloGridView如下：\n\n    \n    /**\n     * \n     * @author 飞雪无情\n     * @since 2011-1-20\n     */\n    public class HelloGridView extends Activity {\n        /** Called when the activity is first created. */\n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tsetContentView(R.layout.main);\n    \t\tGridView gridView=(GridView)findViewById(R.id.gridview);\n    \t\tgridView.setAdapter(new ImageAdapter(this));\n    \t\t//单击GridView元素的响应\n    \t\tgridView.setOnItemClickListener(new OnItemClickListener() {\n    \n    \t\t\t@Override\n    \t\t\tpublic void onItemClick(AdapterView<!--?--> parent, View view,\n    \t\t\t\t\tint position, long id) {\n    \t\t\t\t//弹出单击的GridView元素的位置\n    \t\t\t\tToast.makeText(HelloGridView.this,mThumbIds[position], Toast.LENGTH_SHORT).show();\n    \t\t\t}\n    \t\t});\n    \t}\n    \tprivate class ImageAdapter extends BaseAdapter{\n    \t\tprivate Context mContext;\n    \n    \t\tpublic ImageAdapter(Context context) {\n    \t\t\tthis.mContext=context;\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic int getCount() {\n    \t\t\treturn mThumbIds.length;\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic Object getItem(int position) {\n    \t\t\treturn mThumbIds[position];\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic long getItemId(int position) {\n    \t\t\t// TODO Auto-generated method stub\n    \t\t\treturn 0;\n    \t\t}\n    \n    \t\t@Override\n    \t\tpublic View getView(int position, View convertView, ViewGroup parent) {\n    \t\t\t//定义一个ImageView,显示在GridView里\n    \t\t\tImageView imageView;\n    \t\t\tif(convertView==null){\n    \t\t\t\timageView=new ImageView(mContext);\n    \t\t\t\timageView.setLayoutParams(new GridView.LayoutParams(85, 85));\n    \t\t\t\timageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n    \t            imageView.setPadding(8, 8, 8, 8);\n    \t\t\t}else{\n    \t\t\t\timageView = (ImageView) convertView;\n    \t\t\t}\n    \t\t\timageView.setImageResource(mThumbIds[position]);\n    \t\t\treturn imageView;\n    \t\t}\n    \n    \t}\n    \t//展示图片\n    \tprivate Integer[] mThumbIds = {\n                R.drawable.sample_2, R.drawable.sample_3,\n                R.drawable.sample_4, R.drawable.sample_5,\n                R.drawable.sample_6, R.drawable.sample_7,\n                R.drawable.sample_0, R.drawable.sample_1,\n                R.drawable.sample_2, R.drawable.sample_3,\n                R.drawable.sample_4, R.drawable.sample_5,\n                R.drawable.sample_6, R.drawable.sample_7,\n                R.drawable.sample_0, R.drawable.sample_1,\n                R.drawable.sample_2, R.drawable.sample_3,\n                R.drawable.sample_4, R.drawable.sample_5,\n                R.drawable.sample_6, R.drawable.sample_7\n        };\n    }\n\n\n这里我们也是采用的自定义Adapter，可以上一节的自定义Adapter讲解。展示了一些图片，然后点击一个图片的时候会显示这个图片所在的位置。\n\n\t\n  4. 运行程序，效果图如下：\n![](http://dl.iteye.com/upload/attachment/401529/01f43426-e794-3215-84c1-9273836917cc.jpg)\n\n\n\n本文附件下载:\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvn0004jz1n1ze4httkc"},{"author":"飞雪无情","comments":1,"date":"2011-01-10T01:11:57.000Z","layout":"post","slug":"android-sources-directory-structure","title":"Android 源码目录结构详解","wordpress_id":115,"_content":"\n\n这是Android2.1的源代码的目录结构，可以帮助我们研究Android的源代码。Android源代码的下载请参考官网\n\nAndroid 2.1\n|-- Makefile\n|-- bionic                        （bionic C库）\n\n|-- bootable                （启动引导相关代码）\n|-- build\n（存放系统编译规则及generic等基础开发包配置）\n|-- cts                        （Android兼容性测试套件标准）\n\n|-- dalvik                        （dalvik JAVA虚拟机）\n|--\ndevelopment        （应用程序开发相关）\n|-- external\n（android使用的一些开源的模组）\n|-- frameworks                （核心框架——java及C++语言）\n|--\nhardware                （部分厂家开源的硬解适配层HAL代码）\n|-- out\n（编译完成后的代码输出与此目录）\n|-- packages                （应用程序包）\n|--\nprebuilt                （x86和arm架构下预编译的一些资源）\n|-- sdk\n（sdk及模拟器）\n|-- system                        （底层文件系统库、应用及组件——C语言）\n`--\nvendor                （厂商定制代码）\n\nbionic 目录\n|--\nlibc                        （C库）\n|   |-- arch-arm        （ARM架构，包含系统调用汇编实现）\n\n|   |-- arch-x86        （x86架构，包含系统调用汇编实现）\n|   |-- bionic\n（由C实现的功能，架构无关）\n|   |-- docs                （文档）\n|   |--\ninclude                （头文件）\n|   |-- inet                （？inet相关，具体作用不明）\n\n|   |-- kernel                （Linux内核中的一些头文件）\n|   |--\nnetbsd                （？nesbsd系统相关，具体作用不明）\n|   |-- private\n（？一些私有的头文件）\n|   |-- stdio                （stdio实现）\n|   |--\nstdlib                （stdlib实现）\n|   |-- string                （string函数实现）\n\n|   |-- tools                （几个工具）\n|   |-- tzcode\n（时区相关代码）\n|   |-- unistd                （unistd实现）\n|   `--\nzoneinfo        （时区信息）\n|-- libdl\n（libdl实现，dl是动态链接，提供访问动态链接库的功能）\n|-- libm                        （libm数学库的实现，）\n\n|   |-- alpha                （apaha架构）\n|   |-- amd64\n（amd64架构）\n|   |-- arm                （arm架构）\n|   |--\nbsdsrc                （？bsd的源码）\n|   |-- i386                （i386架构）\n|\n|-- i387                （i387架构？）\n|   |-- ia64                （ia64架构）\n\n|   |-- include                （头文件）\n|   |-- man\n（数学函数，后缀名为.3，一些为freeBSD的库文件）\n|   |-- powerpc        （powerpc架构）\n|   |--\nsparc64                （sparc64架构）\n|   `-- src                （源代码）\n|--\nlibstdc++                （libstdc++ C++实现库）\n|   |-- include\n（头文件）\n|   `-- src                （源码）\n|-- libthread_db\n（多线程程序的调试器库）\n|   `-- include                （头文件）\n`--\nlinker                        （动态链接器）\n`-- arch\n（支持arm和x86两种架构）\n\nbootable 目录\n.\n|--\nbootloader                                （适合各种bootloader的通用代码）\n|   `--\nlegacy                                （估计不能直接使用，可以参考）\n|       |--\narch_armv6                （V6架构，几个简单的汇编文件）\n|       |--\narch_msm7k                （高通7k处理器架构的几个基本驱动）\n|       |--\ninclude                        （通用头文件和高通7k架构头文件）\n|       |--\nlibboot                        （启动库，都写得很简单）\n|       |--\nlibc                        （一些常用的c函数）\n|       |-- nandwrite\n（nandwirte函数实现）\n|       `-- usbloader                （usbloader实现）\n|--\ndiskinstaller                        （android镜像打包器，x86可生产iso）\n`--\nrecovery                                （系统恢复相关）\n|--\nedify                                （升级脚本使用的edify脚本语言）\n|--\netc                                （init.rc恢复脚本）\n|--\nminui                                （一个简单的UI）\n|--\nminzip                                （一个简单的压缩工具）\n|--\nmtdutils                        （mtd工具）\n|--\nres                                （资源）\n|   `--\nimages                        （一些图片）\n|--\ntools                                （工具）\n|   `--\nota                        （OTA Over The Air Updates升级工具）\n`--\nupdater                        （升级器）\n\nbuild目录\n.\n|--\ncore                                （核心编译规则）\n|--\nhistory                                （历史记录）\n|--\nlibs\n|   `-- host\n（主机端库，有android “cp”功能替换）\n|-- target                                （目标机编译对象）\n\n|   |-- board                        （开发平台）\n|   |   |-- emulator\n（模拟器）\n|   |   |-- generic                （通用）\n|   |   |--\nidea6410        （自己添加的）\n|   |   `-- sim                （最简单）\n|   `--\nproduct                （开发平台对应的编译规则）\n|       `-- security        （密钥相关）\n\n`-- tools                                （编译中主机使用的工具及脚本）\n|--\nacp                        （Android \"acp\" Command）\n|--\napicheck                （api检查工具）\n|-- applypatch                （补丁工具）\n\n|-- apriori                        （预链接工具）\n|--\natree                        （tree工具）\n|-- bin2asm\n（bin转换为asm工具）\n|-- check_prereq        （检查编译时间戳工具）\n|--\ndexpreopt                （模拟器相关工具，具体功能不明）\n|-- droiddoc\n（？作用不明，java语言，网上有人说和JDK5有关）\n|-- fs_config                （This program\ntakes a list of files and directories）\n|-- fs_get_stats\n（获取文件系统状态）\n|-- iself                        （判断是否ELF格式）\n|--\nisprelinked                （判断是否prelinked）\n|--\nkcm                        （按键相关）\n|-- lsd                        （List\nsymbol dependencies）\n|-- releasetools                （生成镜像的工具及脚本）\n\n|-- rgb2565                （rgb转换为565）\n|--\nsignapk                （apk签名工具）\n|-- soslim\n（strip工具）\n`-- zipalign                （zip archive alignment tool）\n\ndalvik目录 dalvik虚拟机\n.\n|-- dalvikvm\n（main.c的目录）\n|-- dexdump                        （dex反汇编）\n|--\ndexlist                                （List all methods in all concrete classes\nin a DEX file.）\n|-- dexopt                                （预验证与优化）\n|--\ndocs                                （文档）\n|--\ndvz                                （和zygote相关的一个命令）\n|--\ndx                                （dx工具，将多个java转换为dex）\n|--\nhit                                （？java语言写成）\n|--\nlibcore                                （核心库）\n|--\nlibcore-disabled                （？禁用的库）\n|--\nlibdex                                （dex的库）\n|--\nlibnativehelper                （Support functions for Android's class libraries）\n\n|-- tests                                （测试代码）\n|--\ntools                                （工具）\n`--\nvm                                （虚拟机实现）\n\ndevelopment 目录\n（开发者需要的一些例程及工具）\n|-- apps                                （一些核心应用程序）\n|\n|-- BluetoothDebug        （蓝牙调试程序）\n|   |-- CustomLocale        （自定义区域设置）\n\n|   |-- Development        （开发）\n|   |-- Fallback\n（和语言相关的一个程序）\n|   |-- FontLab                （字库）\n|   |--\nGestureBuilder        （手势动作）\n|   |-- NinePatchLab        （？）\n|   |--\nOBJViewer                （OBJ查看器）\n|   |-- SdkSetup                （SDK安装器）\n\n|   |-- SpareParts                （高级设置）\n|   |--\nTerm                        （远程登录）\n|   `-- launchperf                （？）\n\n|-- build                                （编译脚本模板）\n|--\ncmds                                （有个monkey工具）\n|--\ndata                                （配置数据）\n|--\ndocs                                （文档）\n|--\nhost                                （主机端USB驱动等）\n|--\nide                                （集成开发环境）\n|--\nndk                                （本地开发套件——c语言开发套件）\n|--\npdk                                （Plug Development Kit）\n|--\nsamples                        （例程）\n|   |-- AliasActivity        （？）\n|\n|-- ApiDemos                （API演示程序）\n|   |-- BluetoothChat        （蓝牙聊天）\n\n|   |-- BrowserPlugin        （浏览器插件）\n|   |-- BusinessCard        （商业卡）\n\n|   |-- Compass                （指南针）\n|   |-- ContactManager\n（联系人管理器）\n|   |-- CubeLiveWallpaper        （动态壁纸的一个简单例程）\n|   |--\nFixedGridLayout        （像是布局）\n|   |-- GlobalTime                （全球时间）\n\n|   |-- HelloActivity        （Hello）\n|   |-- Home\n（Home）\n|   |-- JetBoy                        （jetBoy游戏）\n|   |--\nLunarLander        （貌似又是一个游戏）\n|   |-- MailSync                （邮件同步）\n|\n|-- MultiResolution        （多分辨率）\n|   |-- MySampleRss        （RSS）\n|\n|-- NotePad                （记事本）\n|   |-- RSSReader                （RSS阅读器）\n\n|   |-- SearchableDictionary        （目录搜索）\n|   |--\nSimpleJNI                （JNI例程）\n|   |-- SkeletonApp        （空壳APP）\n|\n|-- Snake                        （snake程序）\n|   |-- SoftKeyboard        （软键盘）\n\n|   |-- Wiktionary                （？维基）\n|   `-- WiktionarySimple（？维基例程）\n\n|-- scripts                                （脚本）\n|--\nsdk                                （sdk配置）\n|--\nsimulator                        （？模拟器）\n|--\ntestrunner                        （？测试用）\n`--\ntools                                （一些工具）\n\nexternal 目录\n.\n|--\naes                        （AES加密）\n|-- apache-http                （网页服务器）\n\n|-- astl                        （ASTL (Android STL) is a slimmed-down\nversion of the regular C++ STL.）\n|-- bison\n（自动生成语法分析器，将无关文法转换成C、C++）\n|-- blktrace                （blktrace is a block\nlayer IO tracing mechanism）\n|-- bluetooth                （蓝牙相关、协议栈）\n|--\nbsdiff                        （diff工具）\n|-- bzip2\n（压缩工具）\n|-- clearsilver                （html模板系统）\n|--\ndbus                        （低延时、低开销、高可用性的IPC机制）\n|-- dhcpcd\n（DHCP服务）\n|-- dosfstools                （DOS文件系统工具）\n|--\ndropbear                （SSH2的server）\n|-- e2fsprogs\n（EXT2文件系统工具）\n|-- elfcopy                （复制ELF的工具）\n|--\nelfutils                        （ELF工具）\n|-- embunit                （Embedded\nUnit Project）\n|-- emma                        （java代码覆盖率统计工具）\n|--\nesd                        （Enlightened Sound Daemon，将多种音频流混合在一个设备上播放）\n|--\nexpat                        （Expat is a stream-oriented XML parser.）\n|--\nfdlibm                        （FDLIBM (Freely Distributable LIBM)）\n|--\nfreetype                （字体）\n|-- fsck_msdos                （dos文件系统检查工具）\n\n|-- gdata                        （google的无线数据相关）\n|--\ngenext2fs                （genext2fs generates an ext2 filesystem as a normal\n(non-root) user）\n|-- giflib                        （gif库）\n|--\ngoogleclient        （google用户库）\n|-- grub                        （This is GNU\nGRUB, the GRand Unified Bootloader.）\n|-- gtest\n（Google C++ Testing Framework）\n|-- icu4c\n（ICU(International Component for Unicode)在C/C++下的版本）\n|--\nipsec-tools                （This package provides a way to use the native IPsec\nfunctionality ）\n|-- iptables                （防火墙）\n|--\njdiff                        （generate a report describing the difference\nbetween two public Java APIs.）\n|-- jhead                        （jpeg头部信息工具）\n\n|-- jpeg                        （jpeg库）\n|-- junit\n（JUnit是一个Java语言的单元测试框架）\n|-- kernel-headers        （内核的一些头文件）\n|--\nlibffi                        （libffi is a foreign function interface library.）\n\n|-- libpcap                （网络数据包捕获函数）\n|-- libpng\n（png库）\n|-- libxml2                （xml解析库）\n|--\nmtpd                        （一个命令）\n|-- netcat                        （simple\nUnix utility which reads and writes dataacross network connections）\n|--\nnetperf                        （网络性能测量工具）\n|-- neven\n（看代码和JNI相关）\n|-- opencore                （多媒体框架）\n|--\nopenssl                （SSL加密相关）\n|-- openvpn                （VPN开源库）\n|--\noprofile                （OProfile是Linux内核支持的一种性能分析机制。）\n|--\nping                        （ping命令）\n|-- ppp\n（pppd拨号命令，好像还没有chat）\n|-- proguard                （Java class file shrinker,\noptimizer, obfuscator, and preverifier）\n|-- protobuf                （a\nflexible, efficient, automated mechanism for serializing structured data）\n\n|-- qemu                        （arm模拟器）\n|-- safe-iop\n（functions for performing safe integer operations ）\n|--\nskia                        （skia图形引擎）\n|-- sonivox                （sole MIDI\nsolution for Google Android Mobile Phone Platform）\n|--\nspeex                        （Speex编/解码API的使用(libspeex)）\n|--\nsqlite                        （数据库）\n|-- srec                        （Nuance\n公司提供的开源连续非特定人语音识别）\n|-- strace                        （trace工具）\n|--\nsvox                        （Embedded Text-to-Speech）\n|--\ntagsoup                （TagSoup是一个Java开发符合SAX的HTML解析器）\n|--\ntcpdump                （抓TCP包的软件）\n|-- tesseract                （Tesseract\nOpen Source OCR Engine.）\n|-- tinyxml                （TinyXml is a simple,\nsmall, C++ XML parser）\n|-- tremor                        （I stream and file\ndecoder provides an embeddable,integer-only library）\n|--\nwebkit                        （浏览器核心）\n|-- wpa_supplicant        （无线网卡管理）\n\n|-- xmlwriter                （XML 编辑工具）\n|--\nyaffs2                        （yaffs文件系统）\n`-- zlib                        （a\ngeneral purpose data compression library）\n\nframeworks 目录\n（核心框架——java及C++语言）\n.\n|-- base                        （基本内容）\n|   |--\napi                  （？都是xml文件，定义了java的api？）\n|   |-- awt\n（AWT库）\n|   |-- build                （空的）\n|   |-- camera\n（摄像头服务程序库）\n|   |-- cmds              （重要命令：am、app_proce等）\n|   |--\ncore                （核心库）\n|   |-- data                （字体和声音等数据文件）\n|\n|-- docs                （文档）\n|   |-- graphics           （图形相关）\n|   |--\ninclude             （头文件）\n|   |-- keystore        （和数据签名证书相关）\n|   |--\nlibs                （库）\n|   |-- location        （地区库）\n|   |--\nmedia                （媒体相关库）\n|   |-- obex                （蓝牙传输库）\n|   |--\nopengl                （2D-3D加速库）\n|   |-- packages        （设置、TTS、VPN程序）\n\n|   |-- sax                （XML解析器）\n|   |-- services        （各种服务程序）\n\n|   |-- telephony        （电话通讯管理）\n|   |-- test-runner        （测试工具相关）\n\n|   |-- tests                （各种测试）\n|   |-- tools\n（一些叫不上名的工具）\n|   |-- vpn                （VPN）\n|   `-- wifi\n（无线网络）\n|-- opt                        （可选部分）\n|   |--\ncom.google.android                                （有个framework.jar）\n|   |--\ncom.google.android.googlelogin                （有个client.jar）\n|   `--\nemoji                （standard message elements）\n`-- policies\n（Product policies are operating system directions aimed at specific uses）\n\n`-- base\n|-- mid        （MID设备）\n\n`-- phone   （手机类设备一般用这个，与锁屏有关的代码）\n\nhardware 目录\n（部分厂家开源的硬解适配层HAL代码）\n|-- broadcom                        （博通公司）\n|   `--\nwlan                        （无线网卡）\n|-- libhardware\n（硬件库）\n|   |-- include                        （头文件）\n|   `--\nmodules                （Default (and possibly architecture dependents) HAL\nmodules）\n|       |-- gralloc                （gralloc显示相关）\n|       `--\noverlay                （Skeleton for the \"overlay\" HAL module.）\n|--\nlibhardware_legacy        （旧的硬件库）\n|   |-- flashlight                （背光）\n\n|   |-- gps                        （GPS）\n|   |--\ninclude                        （头文件）\n|   |-- mount\n（旧的挂载器）\n|   |-- power                        （电源）\n|   |--\nqemu                        （模拟器）\n|   |-- qemu_tracing        （模拟器跟踪）\n\n|   |-- tests                        （测试）\n|   |--\nuevent                        （uevent）\n|   |--\nvibrator                        （震动）\n|   `-- wifi\n（无线）\n|-- msm7k                        （高通7k处理器开源抽象层）\n|   |--\nboot                        （启动）\n|   |-- libaudio                （声音库）\n\n|   |-- libaudio-qsd8k        （qsd8k的声音相关库）\n|   |--\nlibcamera                （摄像头库）\n|   |-- libcopybit                （copybit库）\n\n|   |-- libgralloc                （gralloc库）\n|   |--\nlibgralloc-qsd8k        （qsd8k的gralloc库）\n|   |-- liblights\n（背光库）\n|   `-- librpc                        （RPC库）\n|--\nril                                （无线电抽象层）\n|   |--\ninclude                        （头文件）\n|   |-- libril\n（库）\n|   |-- reference-cdma-sms        （cdma短信参考）\n|   |--\nreference-ril                        （ril参考）\n|   `--\nrild                                （ril后台服务程序）\n`--\nti                                                （ti公司开源HAL）\n|--\nomap3                                （omap3处理器）\n|   |--\ndspbridge                （DSP桥）\n|   |-- libopencorehw\n（opencore硬件库）\n|   |-- liboverlay                （overlay硬件库）\n|\n|-- libstagefrighthw        （stagefright硬件库）\n|   `--\nomx                        （omx组件）\n`--\nwlan                                （无线网卡）\n\npackages 目录\n.\n|--\napps                            （应用程序库）\n|   |-- AlarmClock              （闹钟）\n\n|   |-- Bluetooth                （蓝牙）\n|   |-- Browser\n（浏览器）\n|   |-- Calculator                （计算器）\n|   |--\nCalendar                  （日历）\n|   |-- Camera                   （相机）\n|\n|-- CertInstaller             （在Android中安装数字签名，被调用）\n|   |--\nContacts                 （拨号(调用)、联系人、通话记录）\n|   |-- DeskClock\n（桌面时钟）\n|   |-- Email                       （Email）\n|   |--\nGallery                     （相册，和Camera类似，多了列表）\n|   |--\nGallery3D                 （？3D相册）\n|   |-- GlobalSearch\n（为google搜索服务，提供底层应用）\n|   |-- GoogleSearch           （google搜索）\n|   |--\nHTMLViewer             （浏览器附属界面，被浏览器应用调用，同时提供存储记录功能）\n|   |--\nIM                            （即时通讯，为手机提供信号发送、接收、通信的服务）\n|   |--\nLauncher                  （登陆启动项，显示图片框架等等图形界面）\n|   |--\nLauncher2                （登陆启动项，负责应用的调用）\n|   |-- Mms\n（？彩信业务）\n|   |-- Music                        （音乐播放器）\n|   |--\nPackageInstaller        （安装、卸载程序的响应）\n|   |-- Phone\n（电话拨号程序）\n|   |-- Provision                （预设应用的状态，使能应用）\n|   |--\nSettings                （开机设定，包括电量、蓝牙、设备信息、界面、wifi等）\n|   |--\nSoundRecorder        （录音机，可计算存储所需空间和时间）\n|   |-- Stk\n（接收和发送短信）\n|   |-- Sync                        （空）   -------○1\n|   |--\nUpdater                （空）\n|   `-- VoiceDialer                （语音识别通话）\n\n|-- inputmethods                （输入法）\n|   |-- LatinIME\n（拉丁文输入法）\n|   |-- OpenWnn                （OpenWnn输入法）\n|   `--\nPinyinIME                （拼音输入法）\n|-- providers\n（提供器，提供应用程序、界面所需的数据）\n|   |-- ApplicationsProvider\n（应用程序提供器，提供应用程序启动项、更新等）\n|   |-- CalendarProvider\n（日历提供器）\n|   |-- ContactsProvider                        （联系人提供器）\n|   |--\nDownloadProvider                （下载管理提供器）\n|   |--\nDrmProvider                        （创建和更新数据库时调用）\n|   |--\nGoogleContactsProvider        （联系人提供器的子类，用以同步联系人）\n|   |--\nGoogleSubscribedFeedsProvider（设置信息提供器）\n|   |--\nImProvider                                （空）\n|   |--\nManagementProvider                （空）\n|   |--\nMediaProvider                        （媒体提供器，提供存储数据）\n|   |--\nTelephonyProvider                （彩信提供器）\n|   |--\nUserDictionaryProvider        （用户字典提供器，提供用户常用字字典）\n|   `--\nWebSearchProvider                （空）\n|--\nservices\n|   |--\nEasService                                （空）\n|   `--\nLockAndWipe                        （空）\n`--\nwallpapers                                        （墙纸）\n|--\nBasic                                        （基本墙纸，系统内置墙纸）\n|--\nLivePicker                                （选择动态壁纸）\n|--\nMagicSmoke                        （壁纸特殊效果）\n`--\nMusicVisualization                （音乐可视化，图形随音乐而变化）\n\n○1里面有一个隐藏的.git文件夹，内容都是一样的，没有有意义的代码，config看似乎是一个下载程序，因此认为这些文件夹下没有实质东西。\n\nprebuilt 目录                        （x86和arm架构下预编译的一些资源）\n.\n|--\nandroid-arm                （arm-android相关）\n|   |-- gdbserver\n（gdb调试器）\n|   `-- kernel                        （模拟的arm内核）\n|--\nandroid-x86                （x86-android相关）\n|   `--\nkernel                        （空的）\n|-- common\n（通用编译好的代码，应该是java的）\n|-- darwin-x86                        （drawin x86平台）\n\n|   `-- toolchain                （工具链）\n|       |-- arm-eabi-4.2.1\n\n|       |-- arm-eabi-4.3.1\n|       `-- arm-eabi-4.4.0\n\n|-- darwin-x86_64                （drawin x86 64bit平台）\n|--\nlinux-x86                        （linux x86平台）\n|   `--\ntoolchain                （工具链，我们应该主要用这个）\n|       |-- arm-eabi-4.2.1\n\n|       |-- arm-eabi-4.3.1\n|       |-- arm-eabi-4.4.0\n\n|       `-- i686-unknown-linux-gnu-4.2.1        （x86版编译器）\n|--\nlinux-x86_64                （linux x86 64bit平台）\n|--\nwindows                        （windows平台）\n`-- windows-x86_64        （64bit\nwindows平台）\nsystem 目录                （底层文件系统库、应用及组件——C语言）\n.\n|--\nBluetooth                （蓝牙相关）\n|-- core                        （系统核心工具盒接口）\n\n|   |-- adb                （adb调试工具）\n|   |-- cpio\n（cpio工具，创建img）\n|   |-- debuggerd        （调试工具）\n|   |-- fastboot\n（快速启动相关）\n|   |-- include                （系统接口头文件）\n|   |--\ninit                （init程序源代码）\n|   |-- libacc                （轻量级C编译器）\n\n|   |-- libctest                （libc测试相关）\n|   |-- libcutils\n（libc工具）\n|   |-- liblog                （log库）\n|   |-- libmincrypt\n（加密库）\n|   |-- libnetutils        （网络工具库）\n|   |-- libpixelflinger\n（图形处理库）\n|   |-- libsysutils        （系统工具库）\n|   |-- libzipfile\n（zip库）\n|   |-- logcat                （查看log工具）\n|   |-- logwrapper\n（log封装工具）\n|   |-- mkbootimg        （制作启动boot.img的工具盒脚本）\n|   |--\nnetcfg                （网络配置netcfg源码）\n|   |-- nexus\n（google最新手机的代码）\n|   |-- rootdir                （rootfs，包含一些etc下的脚本和配置）\n\n|   |-- sh                        （shell代码）\n|   |--\ntoolbox                （toolbox，类似busybox的工具集）\n|   `-- vold\n（SD卡管理器）\n|-- extras                        （额外工具）\n|   |--\nlatencytop        （a tool for software developers ，identifying system latency\nhappen）\n|   |-- libpagemap        （pagemap库）\n|   |--\nlibrank                （Java Library Ranking System库）\n|   |-- procmem\n（pagemap相关）\n|   |-- procrank        （Java Library Ranking System相关）\n|\n|-- showmap        （showmap工具）\n|   |-- showslab        （showslab工具）\n|\n|-- sound                （声音相关）\n|   |-- su                        （su命令源码）\n\n|   |-- tests                （一些测试工具）\n|   `-- timeinfo        （时区相关）\n\n`-- wlan                        （无线相关）\n`-- ti\n（ti网卡相关工具及库）\n\nvendor 目录                        （厂家定制内容）\n\n|--\naosp                             （android open source project）\n|   `--\nproducts                  （一些板级规则）\n|-- htc\n（HTC公司）\n|   |-- common-open         （通用部分）\n|   |   `--\nakmd                 （解压img用的工具）\n|   |-- dream-open            （G1开放部分）\n\n|   |-- prebuilt-open           （预编译开放部分）\n|   `-- sapphire-open\n（sapphire这款型号开放内容）\n|-- pv-open                       （没东西）\n|--\nqcom                           （里面基本是空的）\n`-- sample\n（google提供的样例）\n|-- apps                        （应用）\n|   |--\nclient                   （用户）\n|   `-- upgrade              （升级）\n\n|-- frameworks             （框架）\n|   `-- PlatformLibrary   （平台库）\n\n|-- products                  （产品）\n|-- sdk_addon              （sdk添加部分）\n\n`-- skins                       （皮肤）\n\n`-- WVGAMedDpi      （WVGA适用的图片）\n\n","source":"_posts/2011-01-10-android-sources-directory-structure.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-01-10 09:11:57+00:00\nlayout: post\nslug: android-sources-directory-structure\ntitle: Android 源码目录结构详解\nwordpress_id: 115\ncategories:\n- Android\ntags:\n- Android\n- Linux\n---\n\n\n这是Android2.1的源代码的目录结构，可以帮助我们研究Android的源代码。Android源代码的下载请参考官网\n\nAndroid 2.1\n|-- Makefile\n|-- bionic                        （bionic C库）\n\n|-- bootable                （启动引导相关代码）\n|-- build\n（存放系统编译规则及generic等基础开发包配置）\n|-- cts                        （Android兼容性测试套件标准）\n\n|-- dalvik                        （dalvik JAVA虚拟机）\n|--\ndevelopment        （应用程序开发相关）\n|-- external\n（android使用的一些开源的模组）\n|-- frameworks                （核心框架——java及C++语言）\n|--\nhardware                （部分厂家开源的硬解适配层HAL代码）\n|-- out\n（编译完成后的代码输出与此目录）\n|-- packages                （应用程序包）\n|--\nprebuilt                （x86和arm架构下预编译的一些资源）\n|-- sdk\n（sdk及模拟器）\n|-- system                        （底层文件系统库、应用及组件——C语言）\n`--\nvendor                （厂商定制代码）\n\nbionic 目录\n|--\nlibc                        （C库）\n|   |-- arch-arm        （ARM架构，包含系统调用汇编实现）\n\n|   |-- arch-x86        （x86架构，包含系统调用汇编实现）\n|   |-- bionic\n（由C实现的功能，架构无关）\n|   |-- docs                （文档）\n|   |--\ninclude                （头文件）\n|   |-- inet                （？inet相关，具体作用不明）\n\n|   |-- kernel                （Linux内核中的一些头文件）\n|   |--\nnetbsd                （？nesbsd系统相关，具体作用不明）\n|   |-- private\n（？一些私有的头文件）\n|   |-- stdio                （stdio实现）\n|   |--\nstdlib                （stdlib实现）\n|   |-- string                （string函数实现）\n\n|   |-- tools                （几个工具）\n|   |-- tzcode\n（时区相关代码）\n|   |-- unistd                （unistd实现）\n|   `--\nzoneinfo        （时区信息）\n|-- libdl\n（libdl实现，dl是动态链接，提供访问动态链接库的功能）\n|-- libm                        （libm数学库的实现，）\n\n|   |-- alpha                （apaha架构）\n|   |-- amd64\n（amd64架构）\n|   |-- arm                （arm架构）\n|   |--\nbsdsrc                （？bsd的源码）\n|   |-- i386                （i386架构）\n|\n|-- i387                （i387架构？）\n|   |-- ia64                （ia64架构）\n\n|   |-- include                （头文件）\n|   |-- man\n（数学函数，后缀名为.3，一些为freeBSD的库文件）\n|   |-- powerpc        （powerpc架构）\n|   |--\nsparc64                （sparc64架构）\n|   `-- src                （源代码）\n|--\nlibstdc++                （libstdc++ C++实现库）\n|   |-- include\n（头文件）\n|   `-- src                （源码）\n|-- libthread_db\n（多线程程序的调试器库）\n|   `-- include                （头文件）\n`--\nlinker                        （动态链接器）\n`-- arch\n（支持arm和x86两种架构）\n\nbootable 目录\n.\n|--\nbootloader                                （适合各种bootloader的通用代码）\n|   `--\nlegacy                                （估计不能直接使用，可以参考）\n|       |--\narch_armv6                （V6架构，几个简单的汇编文件）\n|       |--\narch_msm7k                （高通7k处理器架构的几个基本驱动）\n|       |--\ninclude                        （通用头文件和高通7k架构头文件）\n|       |--\nlibboot                        （启动库，都写得很简单）\n|       |--\nlibc                        （一些常用的c函数）\n|       |-- nandwrite\n（nandwirte函数实现）\n|       `-- usbloader                （usbloader实现）\n|--\ndiskinstaller                        （android镜像打包器，x86可生产iso）\n`--\nrecovery                                （系统恢复相关）\n|--\nedify                                （升级脚本使用的edify脚本语言）\n|--\netc                                （init.rc恢复脚本）\n|--\nminui                                （一个简单的UI）\n|--\nminzip                                （一个简单的压缩工具）\n|--\nmtdutils                        （mtd工具）\n|--\nres                                （资源）\n|   `--\nimages                        （一些图片）\n|--\ntools                                （工具）\n|   `--\nota                        （OTA Over The Air Updates升级工具）\n`--\nupdater                        （升级器）\n\nbuild目录\n.\n|--\ncore                                （核心编译规则）\n|--\nhistory                                （历史记录）\n|--\nlibs\n|   `-- host\n（主机端库，有android “cp”功能替换）\n|-- target                                （目标机编译对象）\n\n|   |-- board                        （开发平台）\n|   |   |-- emulator\n（模拟器）\n|   |   |-- generic                （通用）\n|   |   |--\nidea6410        （自己添加的）\n|   |   `-- sim                （最简单）\n|   `--\nproduct                （开发平台对应的编译规则）\n|       `-- security        （密钥相关）\n\n`-- tools                                （编译中主机使用的工具及脚本）\n|--\nacp                        （Android \"acp\" Command）\n|--\napicheck                （api检查工具）\n|-- applypatch                （补丁工具）\n\n|-- apriori                        （预链接工具）\n|--\natree                        （tree工具）\n|-- bin2asm\n（bin转换为asm工具）\n|-- check_prereq        （检查编译时间戳工具）\n|--\ndexpreopt                （模拟器相关工具，具体功能不明）\n|-- droiddoc\n（？作用不明，java语言，网上有人说和JDK5有关）\n|-- fs_config                （This program\ntakes a list of files and directories）\n|-- fs_get_stats\n（获取文件系统状态）\n|-- iself                        （判断是否ELF格式）\n|--\nisprelinked                （判断是否prelinked）\n|--\nkcm                        （按键相关）\n|-- lsd                        （List\nsymbol dependencies）\n|-- releasetools                （生成镜像的工具及脚本）\n\n|-- rgb2565                （rgb转换为565）\n|--\nsignapk                （apk签名工具）\n|-- soslim\n（strip工具）\n`-- zipalign                （zip archive alignment tool）\n\ndalvik目录 dalvik虚拟机\n.\n|-- dalvikvm\n（main.c的目录）\n|-- dexdump                        （dex反汇编）\n|--\ndexlist                                （List all methods in all concrete classes\nin a DEX file.）\n|-- dexopt                                （预验证与优化）\n|--\ndocs                                （文档）\n|--\ndvz                                （和zygote相关的一个命令）\n|--\ndx                                （dx工具，将多个java转换为dex）\n|--\nhit                                （？java语言写成）\n|--\nlibcore                                （核心库）\n|--\nlibcore-disabled                （？禁用的库）\n|--\nlibdex                                （dex的库）\n|--\nlibnativehelper                （Support functions for Android's class libraries）\n\n|-- tests                                （测试代码）\n|--\ntools                                （工具）\n`--\nvm                                （虚拟机实现）\n\ndevelopment 目录\n（开发者需要的一些例程及工具）\n|-- apps                                （一些核心应用程序）\n|\n|-- BluetoothDebug        （蓝牙调试程序）\n|   |-- CustomLocale        （自定义区域设置）\n\n|   |-- Development        （开发）\n|   |-- Fallback\n（和语言相关的一个程序）\n|   |-- FontLab                （字库）\n|   |--\nGestureBuilder        （手势动作）\n|   |-- NinePatchLab        （？）\n|   |--\nOBJViewer                （OBJ查看器）\n|   |-- SdkSetup                （SDK安装器）\n\n|   |-- SpareParts                （高级设置）\n|   |--\nTerm                        （远程登录）\n|   `-- launchperf                （？）\n\n|-- build                                （编译脚本模板）\n|--\ncmds                                （有个monkey工具）\n|--\ndata                                （配置数据）\n|--\ndocs                                （文档）\n|--\nhost                                （主机端USB驱动等）\n|--\nide                                （集成开发环境）\n|--\nndk                                （本地开发套件——c语言开发套件）\n|--\npdk                                （Plug Development Kit）\n|--\nsamples                        （例程）\n|   |-- AliasActivity        （？）\n|\n|-- ApiDemos                （API演示程序）\n|   |-- BluetoothChat        （蓝牙聊天）\n\n|   |-- BrowserPlugin        （浏览器插件）\n|   |-- BusinessCard        （商业卡）\n\n|   |-- Compass                （指南针）\n|   |-- ContactManager\n（联系人管理器）\n|   |-- CubeLiveWallpaper        （动态壁纸的一个简单例程）\n|   |--\nFixedGridLayout        （像是布局）\n|   |-- GlobalTime                （全球时间）\n\n|   |-- HelloActivity        （Hello）\n|   |-- Home\n（Home）\n|   |-- JetBoy                        （jetBoy游戏）\n|   |--\nLunarLander        （貌似又是一个游戏）\n|   |-- MailSync                （邮件同步）\n|\n|-- MultiResolution        （多分辨率）\n|   |-- MySampleRss        （RSS）\n|\n|-- NotePad                （记事本）\n|   |-- RSSReader                （RSS阅读器）\n\n|   |-- SearchableDictionary        （目录搜索）\n|   |--\nSimpleJNI                （JNI例程）\n|   |-- SkeletonApp        （空壳APP）\n|\n|-- Snake                        （snake程序）\n|   |-- SoftKeyboard        （软键盘）\n\n|   |-- Wiktionary                （？维基）\n|   `-- WiktionarySimple（？维基例程）\n\n|-- scripts                                （脚本）\n|--\nsdk                                （sdk配置）\n|--\nsimulator                        （？模拟器）\n|--\ntestrunner                        （？测试用）\n`--\ntools                                （一些工具）\n\nexternal 目录\n.\n|--\naes                        （AES加密）\n|-- apache-http                （网页服务器）\n\n|-- astl                        （ASTL (Android STL) is a slimmed-down\nversion of the regular C++ STL.）\n|-- bison\n（自动生成语法分析器，将无关文法转换成C、C++）\n|-- blktrace                （blktrace is a block\nlayer IO tracing mechanism）\n|-- bluetooth                （蓝牙相关、协议栈）\n|--\nbsdiff                        （diff工具）\n|-- bzip2\n（压缩工具）\n|-- clearsilver                （html模板系统）\n|--\ndbus                        （低延时、低开销、高可用性的IPC机制）\n|-- dhcpcd\n（DHCP服务）\n|-- dosfstools                （DOS文件系统工具）\n|--\ndropbear                （SSH2的server）\n|-- e2fsprogs\n（EXT2文件系统工具）\n|-- elfcopy                （复制ELF的工具）\n|--\nelfutils                        （ELF工具）\n|-- embunit                （Embedded\nUnit Project）\n|-- emma                        （java代码覆盖率统计工具）\n|--\nesd                        （Enlightened Sound Daemon，将多种音频流混合在一个设备上播放）\n|--\nexpat                        （Expat is a stream-oriented XML parser.）\n|--\nfdlibm                        （FDLIBM (Freely Distributable LIBM)）\n|--\nfreetype                （字体）\n|-- fsck_msdos                （dos文件系统检查工具）\n\n|-- gdata                        （google的无线数据相关）\n|--\ngenext2fs                （genext2fs generates an ext2 filesystem as a normal\n(non-root) user）\n|-- giflib                        （gif库）\n|--\ngoogleclient        （google用户库）\n|-- grub                        （This is GNU\nGRUB, the GRand Unified Bootloader.）\n|-- gtest\n（Google C++ Testing Framework）\n|-- icu4c\n（ICU(International Component for Unicode)在C/C++下的版本）\n|--\nipsec-tools                （This package provides a way to use the native IPsec\nfunctionality ）\n|-- iptables                （防火墙）\n|--\njdiff                        （generate a report describing the difference\nbetween two public Java APIs.）\n|-- jhead                        （jpeg头部信息工具）\n\n|-- jpeg                        （jpeg库）\n|-- junit\n（JUnit是一个Java语言的单元测试框架）\n|-- kernel-headers        （内核的一些头文件）\n|--\nlibffi                        （libffi is a foreign function interface library.）\n\n|-- libpcap                （网络数据包捕获函数）\n|-- libpng\n（png库）\n|-- libxml2                （xml解析库）\n|--\nmtpd                        （一个命令）\n|-- netcat                        （simple\nUnix utility which reads and writes dataacross network connections）\n|--\nnetperf                        （网络性能测量工具）\n|-- neven\n（看代码和JNI相关）\n|-- opencore                （多媒体框架）\n|--\nopenssl                （SSL加密相关）\n|-- openvpn                （VPN开源库）\n|--\noprofile                （OProfile是Linux内核支持的一种性能分析机制。）\n|--\nping                        （ping命令）\n|-- ppp\n（pppd拨号命令，好像还没有chat）\n|-- proguard                （Java class file shrinker,\noptimizer, obfuscator, and preverifier）\n|-- protobuf                （a\nflexible, efficient, automated mechanism for serializing structured data）\n\n|-- qemu                        （arm模拟器）\n|-- safe-iop\n（functions for performing safe integer operations ）\n|--\nskia                        （skia图形引擎）\n|-- sonivox                （sole MIDI\nsolution for Google Android Mobile Phone Platform）\n|--\nspeex                        （Speex编/解码API的使用(libspeex)）\n|--\nsqlite                        （数据库）\n|-- srec                        （Nuance\n公司提供的开源连续非特定人语音识别）\n|-- strace                        （trace工具）\n|--\nsvox                        （Embedded Text-to-Speech）\n|--\ntagsoup                （TagSoup是一个Java开发符合SAX的HTML解析器）\n|--\ntcpdump                （抓TCP包的软件）\n|-- tesseract                （Tesseract\nOpen Source OCR Engine.）\n|-- tinyxml                （TinyXml is a simple,\nsmall, C++ XML parser）\n|-- tremor                        （I stream and file\ndecoder provides an embeddable,integer-only library）\n|--\nwebkit                        （浏览器核心）\n|-- wpa_supplicant        （无线网卡管理）\n\n|-- xmlwriter                （XML 编辑工具）\n|--\nyaffs2                        （yaffs文件系统）\n`-- zlib                        （a\ngeneral purpose data compression library）\n\nframeworks 目录\n（核心框架——java及C++语言）\n.\n|-- base                        （基本内容）\n|   |--\napi                  （？都是xml文件，定义了java的api？）\n|   |-- awt\n（AWT库）\n|   |-- build                （空的）\n|   |-- camera\n（摄像头服务程序库）\n|   |-- cmds              （重要命令：am、app_proce等）\n|   |--\ncore                （核心库）\n|   |-- data                （字体和声音等数据文件）\n|\n|-- docs                （文档）\n|   |-- graphics           （图形相关）\n|   |--\ninclude             （头文件）\n|   |-- keystore        （和数据签名证书相关）\n|   |--\nlibs                （库）\n|   |-- location        （地区库）\n|   |--\nmedia                （媒体相关库）\n|   |-- obex                （蓝牙传输库）\n|   |--\nopengl                （2D-3D加速库）\n|   |-- packages        （设置、TTS、VPN程序）\n\n|   |-- sax                （XML解析器）\n|   |-- services        （各种服务程序）\n\n|   |-- telephony        （电话通讯管理）\n|   |-- test-runner        （测试工具相关）\n\n|   |-- tests                （各种测试）\n|   |-- tools\n（一些叫不上名的工具）\n|   |-- vpn                （VPN）\n|   `-- wifi\n（无线网络）\n|-- opt                        （可选部分）\n|   |--\ncom.google.android                                （有个framework.jar）\n|   |--\ncom.google.android.googlelogin                （有个client.jar）\n|   `--\nemoji                （standard message elements）\n`-- policies\n（Product policies are operating system directions aimed at specific uses）\n\n`-- base\n|-- mid        （MID设备）\n\n`-- phone   （手机类设备一般用这个，与锁屏有关的代码）\n\nhardware 目录\n（部分厂家开源的硬解适配层HAL代码）\n|-- broadcom                        （博通公司）\n|   `--\nwlan                        （无线网卡）\n|-- libhardware\n（硬件库）\n|   |-- include                        （头文件）\n|   `--\nmodules                （Default (and possibly architecture dependents) HAL\nmodules）\n|       |-- gralloc                （gralloc显示相关）\n|       `--\noverlay                （Skeleton for the \"overlay\" HAL module.）\n|--\nlibhardware_legacy        （旧的硬件库）\n|   |-- flashlight                （背光）\n\n|   |-- gps                        （GPS）\n|   |--\ninclude                        （头文件）\n|   |-- mount\n（旧的挂载器）\n|   |-- power                        （电源）\n|   |--\nqemu                        （模拟器）\n|   |-- qemu_tracing        （模拟器跟踪）\n\n|   |-- tests                        （测试）\n|   |--\nuevent                        （uevent）\n|   |--\nvibrator                        （震动）\n|   `-- wifi\n（无线）\n|-- msm7k                        （高通7k处理器开源抽象层）\n|   |--\nboot                        （启动）\n|   |-- libaudio                （声音库）\n\n|   |-- libaudio-qsd8k        （qsd8k的声音相关库）\n|   |--\nlibcamera                （摄像头库）\n|   |-- libcopybit                （copybit库）\n\n|   |-- libgralloc                （gralloc库）\n|   |--\nlibgralloc-qsd8k        （qsd8k的gralloc库）\n|   |-- liblights\n（背光库）\n|   `-- librpc                        （RPC库）\n|--\nril                                （无线电抽象层）\n|   |--\ninclude                        （头文件）\n|   |-- libril\n（库）\n|   |-- reference-cdma-sms        （cdma短信参考）\n|   |--\nreference-ril                        （ril参考）\n|   `--\nrild                                （ril后台服务程序）\n`--\nti                                                （ti公司开源HAL）\n|--\nomap3                                （omap3处理器）\n|   |--\ndspbridge                （DSP桥）\n|   |-- libopencorehw\n（opencore硬件库）\n|   |-- liboverlay                （overlay硬件库）\n|\n|-- libstagefrighthw        （stagefright硬件库）\n|   `--\nomx                        （omx组件）\n`--\nwlan                                （无线网卡）\n\npackages 目录\n.\n|--\napps                            （应用程序库）\n|   |-- AlarmClock              （闹钟）\n\n|   |-- Bluetooth                （蓝牙）\n|   |-- Browser\n（浏览器）\n|   |-- Calculator                （计算器）\n|   |--\nCalendar                  （日历）\n|   |-- Camera                   （相机）\n|\n|-- CertInstaller             （在Android中安装数字签名，被调用）\n|   |--\nContacts                 （拨号(调用)、联系人、通话记录）\n|   |-- DeskClock\n（桌面时钟）\n|   |-- Email                       （Email）\n|   |--\nGallery                     （相册，和Camera类似，多了列表）\n|   |--\nGallery3D                 （？3D相册）\n|   |-- GlobalSearch\n（为google搜索服务，提供底层应用）\n|   |-- GoogleSearch           （google搜索）\n|   |--\nHTMLViewer             （浏览器附属界面，被浏览器应用调用，同时提供存储记录功能）\n|   |--\nIM                            （即时通讯，为手机提供信号发送、接收、通信的服务）\n|   |--\nLauncher                  （登陆启动项，显示图片框架等等图形界面）\n|   |--\nLauncher2                （登陆启动项，负责应用的调用）\n|   |-- Mms\n（？彩信业务）\n|   |-- Music                        （音乐播放器）\n|   |--\nPackageInstaller        （安装、卸载程序的响应）\n|   |-- Phone\n（电话拨号程序）\n|   |-- Provision                （预设应用的状态，使能应用）\n|   |--\nSettings                （开机设定，包括电量、蓝牙、设备信息、界面、wifi等）\n|   |--\nSoundRecorder        （录音机，可计算存储所需空间和时间）\n|   |-- Stk\n（接收和发送短信）\n|   |-- Sync                        （空）   -------○1\n|   |--\nUpdater                （空）\n|   `-- VoiceDialer                （语音识别通话）\n\n|-- inputmethods                （输入法）\n|   |-- LatinIME\n（拉丁文输入法）\n|   |-- OpenWnn                （OpenWnn输入法）\n|   `--\nPinyinIME                （拼音输入法）\n|-- providers\n（提供器，提供应用程序、界面所需的数据）\n|   |-- ApplicationsProvider\n（应用程序提供器，提供应用程序启动项、更新等）\n|   |-- CalendarProvider\n（日历提供器）\n|   |-- ContactsProvider                        （联系人提供器）\n|   |--\nDownloadProvider                （下载管理提供器）\n|   |--\nDrmProvider                        （创建和更新数据库时调用）\n|   |--\nGoogleContactsProvider        （联系人提供器的子类，用以同步联系人）\n|   |--\nGoogleSubscribedFeedsProvider（设置信息提供器）\n|   |--\nImProvider                                （空）\n|   |--\nManagementProvider                （空）\n|   |--\nMediaProvider                        （媒体提供器，提供存储数据）\n|   |--\nTelephonyProvider                （彩信提供器）\n|   |--\nUserDictionaryProvider        （用户字典提供器，提供用户常用字字典）\n|   `--\nWebSearchProvider                （空）\n|--\nservices\n|   |--\nEasService                                （空）\n|   `--\nLockAndWipe                        （空）\n`--\nwallpapers                                        （墙纸）\n|--\nBasic                                        （基本墙纸，系统内置墙纸）\n|--\nLivePicker                                （选择动态壁纸）\n|--\nMagicSmoke                        （壁纸特殊效果）\n`--\nMusicVisualization                （音乐可视化，图形随音乐而变化）\n\n○1里面有一个隐藏的.git文件夹，内容都是一样的，没有有意义的代码，config看似乎是一个下载程序，因此认为这些文件夹下没有实质东西。\n\nprebuilt 目录                        （x86和arm架构下预编译的一些资源）\n.\n|--\nandroid-arm                （arm-android相关）\n|   |-- gdbserver\n（gdb调试器）\n|   `-- kernel                        （模拟的arm内核）\n|--\nandroid-x86                （x86-android相关）\n|   `--\nkernel                        （空的）\n|-- common\n（通用编译好的代码，应该是java的）\n|-- darwin-x86                        （drawin x86平台）\n\n|   `-- toolchain                （工具链）\n|       |-- arm-eabi-4.2.1\n\n|       |-- arm-eabi-4.3.1\n|       `-- arm-eabi-4.4.0\n\n|-- darwin-x86_64                （drawin x86 64bit平台）\n|--\nlinux-x86                        （linux x86平台）\n|   `--\ntoolchain                （工具链，我们应该主要用这个）\n|       |-- arm-eabi-4.2.1\n\n|       |-- arm-eabi-4.3.1\n|       |-- arm-eabi-4.4.0\n\n|       `-- i686-unknown-linux-gnu-4.2.1        （x86版编译器）\n|--\nlinux-x86_64                （linux x86 64bit平台）\n|--\nwindows                        （windows平台）\n`-- windows-x86_64        （64bit\nwindows平台）\nsystem 目录                （底层文件系统库、应用及组件——C语言）\n.\n|--\nBluetooth                （蓝牙相关）\n|-- core                        （系统核心工具盒接口）\n\n|   |-- adb                （adb调试工具）\n|   |-- cpio\n（cpio工具，创建img）\n|   |-- debuggerd        （调试工具）\n|   |-- fastboot\n（快速启动相关）\n|   |-- include                （系统接口头文件）\n|   |--\ninit                （init程序源代码）\n|   |-- libacc                （轻量级C编译器）\n\n|   |-- libctest                （libc测试相关）\n|   |-- libcutils\n（libc工具）\n|   |-- liblog                （log库）\n|   |-- libmincrypt\n（加密库）\n|   |-- libnetutils        （网络工具库）\n|   |-- libpixelflinger\n（图形处理库）\n|   |-- libsysutils        （系统工具库）\n|   |-- libzipfile\n（zip库）\n|   |-- logcat                （查看log工具）\n|   |-- logwrapper\n（log封装工具）\n|   |-- mkbootimg        （制作启动boot.img的工具盒脚本）\n|   |--\nnetcfg                （网络配置netcfg源码）\n|   |-- nexus\n（google最新手机的代码）\n|   |-- rootdir                （rootfs，包含一些etc下的脚本和配置）\n\n|   |-- sh                        （shell代码）\n|   |--\ntoolbox                （toolbox，类似busybox的工具集）\n|   `-- vold\n（SD卡管理器）\n|-- extras                        （额外工具）\n|   |--\nlatencytop        （a tool for software developers ，identifying system latency\nhappen）\n|   |-- libpagemap        （pagemap库）\n|   |--\nlibrank                （Java Library Ranking System库）\n|   |-- procmem\n（pagemap相关）\n|   |-- procrank        （Java Library Ranking System相关）\n|\n|-- showmap        （showmap工具）\n|   |-- showslab        （showslab工具）\n|\n|-- sound                （声音相关）\n|   |-- su                        （su命令源码）\n\n|   |-- tests                （一些测试工具）\n|   `-- timeinfo        （时区相关）\n\n`-- wlan                        （无线相关）\n`-- ti\n（ti网卡相关工具及库）\n\nvendor 目录                        （厂家定制内容）\n\n|--\naosp                             （android open source project）\n|   `--\nproducts                  （一些板级规则）\n|-- htc\n（HTC公司）\n|   |-- common-open         （通用部分）\n|   |   `--\nakmd                 （解压img用的工具）\n|   |-- dream-open            （G1开放部分）\n\n|   |-- prebuilt-open           （预编译开放部分）\n|   `-- sapphire-open\n（sapphire这款型号开放内容）\n|-- pv-open                       （没东西）\n|--\nqcom                           （里面基本是空的）\n`-- sample\n（google提供的样例）\n|-- apps                        （应用）\n|   |--\nclient                   （用户）\n|   `-- upgrade              （升级）\n\n|-- frameworks             （框架）\n|   `-- PlatformLibrary   （平台库）\n\n|-- products                  （产品）\n|-- sdk_addon              （sdk添加部分）\n\n`-- skins                       （皮肤）\n\n`-- WVGAMedDpi      （WVGA适用的图片）\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvn2004nz1n1a11ydu6f"},{"author":"飞雪无情","comments":1,"date":"2011-01-08T00:59:56.000Z","layout":"post","slug":"android-listview-tutorials","title":"Android ListView组件的使用","wordpress_id":116,"_content":"\nListView是Android开发中非常常用的组件，ListView可以用来显示一个列表，我们可以对这个列表操作，比如点击列表要做什么等等。这篇文章主要通过一个示例来展示ListView的用法。\n\n\n请加入，大家一块学习。\n\n\n## 一、不使用xml布局文件创建一个ListView\n\n\n\n\n\n\t\n  1. 创建一个名称为HelloListView的Android工程，可以参见\n[Android 第一个Android应用，HelloWorld](/admin/blog/810785)\n\n\t\n  2. 要使用ListView，需要让你的Activity继承于ListActivity，这个和以前的有区别，以前的都是继承Activity，该ListActivity继承Activity，扩展了很多常用的用于操作ListView的方法，使用很方便。\n\n\t\n  3. 现修改HelloListView类如下\n\n    \n    public class HelloListView extends ListActivity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            //setContentView(R.layout.main);\n            //设置一个Adapter\n            setListAdapter(new ArrayAdapter(this,android.R.layout.simple_list_item_1,COUNTRIES));\n        }\n        //数据数据\n        private  static final String[] COUNTRIES=new String[]{\"中国\",\"俄罗斯\",\"英国\",\"法国\"};\n    }\n\n\n\n\n\t\n  4. 运行程序效果如下：![](http://dl.iteye.com/upload/attachment/385759/1864e29c-2014-3275-80d2-760c9de2fa23.jpg)\n看到了吧，我们的数据已经通过列表的形式显示了出来！！！\n\n这里主要的是使用了一个Adapter—适配器，你可以把他看成是ListView的数据源，ListView要展示的数据都是已Adapter的形势传递给ListView的。这个Adapter很重要，Android的用于传给集合控件（ListView,Spinner,GridView等）的数据都是以Adapter的形势，这样的好处就是只要掌握了Adapter，就可以很随意的给这些集合控制传递数据，因为他们使用的都是Adapter。适配器适配器关键就是适配，只需公布一个Adapter，就全搞定了。Android已经给我们实现了一些常用的适配器，如刚刚使用的数组器，还有简单适配器等,如果这些不能满足，我们还可以通过自定义适配器来实现自己的适配器。其实一种适配器就对应了一个集合控件中的一个元素的布局展示。\n\n\n\n\n## 二:使用xml来自定义ListView\n\n\n\n\n\n\t\n  1. 上个例子我们并没有使用在main.xml中定义一个ListView的形势来布局ListView，而是使用的ListActivity中默认的ListView来演示的。\n\n\t\n  2. 下面就使用我们在main.xml中自定义的ListView,这样我们可以很方便的控制ListView展示的布局，大小，背景色等属性。当然上个例子中我们一样可以通过getListView获取ListView后使用它的方法来改变布局、大小和背景色等。\n\n\t\n  3. 修改main.xml为：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <ListView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \tandroid:id=\"@android:id/list\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:background=\"#FF0000FF\"\n        >\n    </ListView>\n\n\n这里要注意的是我们设置ListView的id为”@android:id/list”,意思是我们引用Android已经为我们定义好的一个id，名字是list，如果你不定义成这样，这个ListView是不能被ListActivity识别的。然后就是添加了一个蓝色的背景，看看我们这个自定义的ListView是否起了作用。\n\n\t\n  4. 修改HelloListView类为：\n\n    \n    public class HelloListView extends ListActivity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            //设置一个Adapter\n            setListAdapter(new ArrayAdapter(this,android.R.layout.simple_list_item_1,COUNTRIES));\n        }\n        //数据数据\n        private  static final String[] COUNTRIES=new String[]{\"中国\",\"俄罗斯\",\"英国\",\"法国\"};\n    }\n\n\n比上个例子只是多了setContentView(R.layout.main);是为了让Android识别我们定义的ListView。\n\n\t\n  5. 运行效果图：![](http://dl.iteye.com/upload/attachment/385771/602d0716-3fea-315b-a846-a61c9a78c793.jpg)\n背景已经变成了蓝色，说明我们在xml中定义的ListView起作用了。\n\n\n\n\n## 三：自定义要展示的元素\n\n\n\n\n\n\t\n  1. 前面的两个例子都是展示一行文字，如果我们想图文混排怎么做呢，比如前面是文字，后面是图片。要实现这种功能就需要我们自定义Adapter啦。\n\n\t\n  2. 新建布局文件item.xml,内容如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <RelativeLayout\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:layout_width=\"fill_parent\"\n      android:layout_height=\"wrap_content\">\n      <TextView\t\n      \tandroid:id=\"@+id/text\"\n      \tandroid:layout_alignParentLeft=\"true\"\n      \tandroid:layout_width=\"wrap_content\"\n      \tandroid:layout_height=\"wrap_content\"/>\n      <ImageView \n      \tandroid:id=\"@+id/image\"\n      \tandroid:layout_alignParentRight=\"true\"\n      \tandroid:layout_width=\"wrap_content\"\n      \tandroid:layout_height=\"wrap_content\"/>\n    </RelativeLayout>\n\n\n这里主要定义一个TextView和一个ImageView，用于显示列表每一行的文本和图片\n\n\t\n  3. 修改HelloListView类如下：\n\n    \n    public class HelloListView extends ListActivity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            //设置一个Adapter,使用自定义的Adapter\n            setListAdapter(new TextImageAdapter(this));\n        }\n        /**\n         * 自定义视图\n         * @author 飞雪无情\n         *\n         */\n        private class TextImageAdapter extends BaseAdapter{\n            private Context mContext;\n        \tpublic TextImageAdapter(Context context) {\n    \t\t\tthis.mContext=context;\n    \t\t}\n            /**\n             * 元素的个数\n             */\n    \t\tpublic int getCount() {\n    \t\t\treturn texts.length;\n    \t\t}\n    \n    \t\tpublic Object getItem(int position) {\n    \t\t\treturn null;\n    \t\t}\n    \n    \t\tpublic long getItemId(int position) {\n    \t\t\treturn 0;\n    \t\t}\n    \t\t//用以生成在ListView中展示的一个个元素View\n    \t\tpublic View getView(int position, View convertView, ViewGroup parent) {\n    \t\t\t//优化ListView\n    \t\t\tif(convertView==null){\n    \t\t\t\tconvertView=LayoutInflater.from(mContext).inflate(R.layout.item, null);\n    \t\t\t\tItemViewCache viewCache=new ItemViewCache();\n    \t\t\t\tviewCache.mTextView=(TextView)convertView.findViewById(R.id.text);\n    \t\t\t\tviewCache.mImageView=(ImageView)convertView.findViewById(R.id.image);\n    \t\t\t\tconvertView.setTag(viewCache);\n    \t\t\t}\n    \t\t\tItemViewCache cache=(ItemViewCache)convertView.getTag();\n    \t\t\t//设置文本和图片，然后返回这个View，用于ListView的Item的展示\n    \t\t\tcache.mTextView.setText(texts[position]);\n    \t\t\tcache.mImageView.setImageResource(images[position]);\n    \t\t\treturn convertView;\n    \t\t}\n        }\n        //元素的缓冲类,用于优化ListView\n        private static class ItemViewCache{\n    \t\tpublic TextView mTextView;\n    \t\tpublic ImageView mImageView;\n    \t}\n      //展示的文字\n        private  String[] texts=new String[]{\"天气\",\"我团\",\"背景\"};\n        //展示的图片\n        private int[] images=new int[]{R.drawable.img1,R.drawable.img2,R.drawable.img3};\n    }\n\n\n这里的主要地方是自定义了一个Adapter，我们只需要继承BaseAdapter即可，BaseAdapter已经实现了Adapter的大部分方法，我们继承后只需要实现部分的方法即可。必须实现的就是getCount和getView方法，前一个是返回ListView中有多少个元素，后一个是生成要展示的View。ListView在每添加一个View是就会调用Adapter的getView方法，所以我们有必要对这个方法做优化，例子中就做了部分的优化，一般面试的时候会被问到ListView优化，回答例子中的这些代码就差不多了。\n\n\t\n  4. 运行，我们会看到效果如图：![](http://dl.iteye.com/upload/attachment/385773/07462b29-e24f-387b-9649-842cfbfb0359.jpg)\n\n\n\n\n## 四、ListView列表中的元素的单击事件响应\n\n\n\n\n\n\t\n  1. 如果我们要想单击一个ListView的元素使其作出相应的响应怎么办呢？比如弹出什么，打开什么，展示什么等等，那么我们只需要实现单击事件的函数既可。\n\n\t\n  2. 要实现ListView的单击事件有两种方法，一个是使用getListView().setOnClickListener(l);设置，这个和平时我们用的控件设置是一样的，不做介绍，下面介绍第二个，就是重写ListActivity的onListItemClick方法，其实这个的最后处理也是ListView的setOnClickListener进行监听调用的。\n\n\t\n  3. 在HelloListView类中增加如下代码：\n\n    \n    @Override\n    protected void onListItemClick(ListView l, View v, int position, long id) {\n    \t\tToast.makeText(this, \"你单击了\"+texts[position], Toast.LENGTH_SHORT).show();\n\n\n\n\n\t\n  4. 运行单击其中的一行效果如下图：\n![](http://dl.iteye.com/upload/attachment/385776/b52954ad-12b5-34dd-8c8c-b2bb03312427.jpg)\n\n\n\n\n## 五、小结\n\n\n到这里ListView应该算是会使用了，起码常用的功能会的，当然还有很多没有说到的，比如ListView的分割部分，headView和footView以及ListView的分页等等，这些就需要我们自己下去好好摸索了。\n","source":"_posts/2011-01-08-android-listview-tutorials.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2011-01-08 08:59:56+00:00\nlayout: post\nslug: android-listview-tutorials\ntitle: Android ListView组件的使用\nwordpress_id: 116\ncategories:\n- Android\ntags:\n- Android\n- Widget\n---\n\nListView是Android开发中非常常用的组件，ListView可以用来显示一个列表，我们可以对这个列表操作，比如点击列表要做什么等等。这篇文章主要通过一个示例来展示ListView的用法。\n\n\n请加入，大家一块学习。\n\n\n## 一、不使用xml布局文件创建一个ListView\n\n\n\n\n\n\t\n  1. 创建一个名称为HelloListView的Android工程，可以参见\n[Android 第一个Android应用，HelloWorld](/admin/blog/810785)\n\n\t\n  2. 要使用ListView，需要让你的Activity继承于ListActivity，这个和以前的有区别，以前的都是继承Activity，该ListActivity继承Activity，扩展了很多常用的用于操作ListView的方法，使用很方便。\n\n\t\n  3. 现修改HelloListView类如下\n\n    \n    public class HelloListView extends ListActivity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            //setContentView(R.layout.main);\n            //设置一个Adapter\n            setListAdapter(new ArrayAdapter(this,android.R.layout.simple_list_item_1,COUNTRIES));\n        }\n        //数据数据\n        private  static final String[] COUNTRIES=new String[]{\"中国\",\"俄罗斯\",\"英国\",\"法国\"};\n    }\n\n\n\n\n\t\n  4. 运行程序效果如下：![](http://dl.iteye.com/upload/attachment/385759/1864e29c-2014-3275-80d2-760c9de2fa23.jpg)\n看到了吧，我们的数据已经通过列表的形式显示了出来！！！\n\n这里主要的是使用了一个Adapter—适配器，你可以把他看成是ListView的数据源，ListView要展示的数据都是已Adapter的形势传递给ListView的。这个Adapter很重要，Android的用于传给集合控件（ListView,Spinner,GridView等）的数据都是以Adapter的形势，这样的好处就是只要掌握了Adapter，就可以很随意的给这些集合控制传递数据，因为他们使用的都是Adapter。适配器适配器关键就是适配，只需公布一个Adapter，就全搞定了。Android已经给我们实现了一些常用的适配器，如刚刚使用的数组器，还有简单适配器等,如果这些不能满足，我们还可以通过自定义适配器来实现自己的适配器。其实一种适配器就对应了一个集合控件中的一个元素的布局展示。\n\n\n\n\n## 二:使用xml来自定义ListView\n\n\n\n\n\n\t\n  1. 上个例子我们并没有使用在main.xml中定义一个ListView的形势来布局ListView，而是使用的ListActivity中默认的ListView来演示的。\n\n\t\n  2. 下面就使用我们在main.xml中自定义的ListView,这样我们可以很方便的控制ListView展示的布局，大小，背景色等属性。当然上个例子中我们一样可以通过getListView获取ListView后使用它的方法来改变布局、大小和背景色等。\n\n\t\n  3. 修改main.xml为：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <ListView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \tandroid:id=\"@android:id/list\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:background=\"#FF0000FF\"\n        >\n    </ListView>\n\n\n这里要注意的是我们设置ListView的id为”@android:id/list”,意思是我们引用Android已经为我们定义好的一个id，名字是list，如果你不定义成这样，这个ListView是不能被ListActivity识别的。然后就是添加了一个蓝色的背景，看看我们这个自定义的ListView是否起了作用。\n\n\t\n  4. 修改HelloListView类为：\n\n    \n    public class HelloListView extends ListActivity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            //设置一个Adapter\n            setListAdapter(new ArrayAdapter(this,android.R.layout.simple_list_item_1,COUNTRIES));\n        }\n        //数据数据\n        private  static final String[] COUNTRIES=new String[]{\"中国\",\"俄罗斯\",\"英国\",\"法国\"};\n    }\n\n\n比上个例子只是多了setContentView(R.layout.main);是为了让Android识别我们定义的ListView。\n\n\t\n  5. 运行效果图：![](http://dl.iteye.com/upload/attachment/385771/602d0716-3fea-315b-a846-a61c9a78c793.jpg)\n背景已经变成了蓝色，说明我们在xml中定义的ListView起作用了。\n\n\n\n\n## 三：自定义要展示的元素\n\n\n\n\n\n\t\n  1. 前面的两个例子都是展示一行文字，如果我们想图文混排怎么做呢，比如前面是文字，后面是图片。要实现这种功能就需要我们自定义Adapter啦。\n\n\t\n  2. 新建布局文件item.xml,内容如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <RelativeLayout\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:layout_width=\"fill_parent\"\n      android:layout_height=\"wrap_content\">\n      <TextView\t\n      \tandroid:id=\"@+id/text\"\n      \tandroid:layout_alignParentLeft=\"true\"\n      \tandroid:layout_width=\"wrap_content\"\n      \tandroid:layout_height=\"wrap_content\"/>\n      <ImageView \n      \tandroid:id=\"@+id/image\"\n      \tandroid:layout_alignParentRight=\"true\"\n      \tandroid:layout_width=\"wrap_content\"\n      \tandroid:layout_height=\"wrap_content\"/>\n    </RelativeLayout>\n\n\n这里主要定义一个TextView和一个ImageView，用于显示列表每一行的文本和图片\n\n\t\n  3. 修改HelloListView类如下：\n\n    \n    public class HelloListView extends ListActivity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            //设置一个Adapter,使用自定义的Adapter\n            setListAdapter(new TextImageAdapter(this));\n        }\n        /**\n         * 自定义视图\n         * @author 飞雪无情\n         *\n         */\n        private class TextImageAdapter extends BaseAdapter{\n            private Context mContext;\n        \tpublic TextImageAdapter(Context context) {\n    \t\t\tthis.mContext=context;\n    \t\t}\n            /**\n             * 元素的个数\n             */\n    \t\tpublic int getCount() {\n    \t\t\treturn texts.length;\n    \t\t}\n    \n    \t\tpublic Object getItem(int position) {\n    \t\t\treturn null;\n    \t\t}\n    \n    \t\tpublic long getItemId(int position) {\n    \t\t\treturn 0;\n    \t\t}\n    \t\t//用以生成在ListView中展示的一个个元素View\n    \t\tpublic View getView(int position, View convertView, ViewGroup parent) {\n    \t\t\t//优化ListView\n    \t\t\tif(convertView==null){\n    \t\t\t\tconvertView=LayoutInflater.from(mContext).inflate(R.layout.item, null);\n    \t\t\t\tItemViewCache viewCache=new ItemViewCache();\n    \t\t\t\tviewCache.mTextView=(TextView)convertView.findViewById(R.id.text);\n    \t\t\t\tviewCache.mImageView=(ImageView)convertView.findViewById(R.id.image);\n    \t\t\t\tconvertView.setTag(viewCache);\n    \t\t\t}\n    \t\t\tItemViewCache cache=(ItemViewCache)convertView.getTag();\n    \t\t\t//设置文本和图片，然后返回这个View，用于ListView的Item的展示\n    \t\t\tcache.mTextView.setText(texts[position]);\n    \t\t\tcache.mImageView.setImageResource(images[position]);\n    \t\t\treturn convertView;\n    \t\t}\n        }\n        //元素的缓冲类,用于优化ListView\n        private static class ItemViewCache{\n    \t\tpublic TextView mTextView;\n    \t\tpublic ImageView mImageView;\n    \t}\n      //展示的文字\n        private  String[] texts=new String[]{\"天气\",\"我团\",\"背景\"};\n        //展示的图片\n        private int[] images=new int[]{R.drawable.img1,R.drawable.img2,R.drawable.img3};\n    }\n\n\n这里的主要地方是自定义了一个Adapter，我们只需要继承BaseAdapter即可，BaseAdapter已经实现了Adapter的大部分方法，我们继承后只需要实现部分的方法即可。必须实现的就是getCount和getView方法，前一个是返回ListView中有多少个元素，后一个是生成要展示的View。ListView在每添加一个View是就会调用Adapter的getView方法，所以我们有必要对这个方法做优化，例子中就做了部分的优化，一般面试的时候会被问到ListView优化，回答例子中的这些代码就差不多了。\n\n\t\n  4. 运行，我们会看到效果如图：![](http://dl.iteye.com/upload/attachment/385773/07462b29-e24f-387b-9649-842cfbfb0359.jpg)\n\n\n\n\n## 四、ListView列表中的元素的单击事件响应\n\n\n\n\n\n\t\n  1. 如果我们要想单击一个ListView的元素使其作出相应的响应怎么办呢？比如弹出什么，打开什么，展示什么等等，那么我们只需要实现单击事件的函数既可。\n\n\t\n  2. 要实现ListView的单击事件有两种方法，一个是使用getListView().setOnClickListener(l);设置，这个和平时我们用的控件设置是一样的，不做介绍，下面介绍第二个，就是重写ListActivity的onListItemClick方法，其实这个的最后处理也是ListView的setOnClickListener进行监听调用的。\n\n\t\n  3. 在HelloListView类中增加如下代码：\n\n    \n    @Override\n    protected void onListItemClick(ListView l, View v, int position, long id) {\n    \t\tToast.makeText(this, \"你单击了\"+texts[position], Toast.LENGTH_SHORT).show();\n\n\n\n\n\t\n  4. 运行单击其中的一行效果如下图：\n![](http://dl.iteye.com/upload/attachment/385776/b52954ad-12b5-34dd-8c8c-b2bb03312427.jpg)\n\n\n\n\n## 五、小结\n\n\n到这里ListView应该算是会使用了，起码常用的功能会的，当然还有很多没有说到的，比如ListView的分割部分，headView和footView以及ListView的分页等等，这些就需要我们自己下去好好摸索了。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvn3004rz1n1hx7zwv1w"},{"author":"飞雪无情","comments":1,"date":"2010-11-29T00:51:00.000Z","layout":"post","slug":"android-edittext-tutorials","title":"Android EditText使用详解-包含很多教程上看不到的功能演示","wordpress_id":118,"_content":"\n标题有点大，说是详解，其实就是对EditText的一些常用功能的介绍，包括密码框，电话框，空白提示文字等等的讲解，尽量的介绍详细一点，也就是所谓的详解了。。呵呵\n\n## 一：新建HelloEditText工程\n\n新建一个Hello world详细步骤可以参见\n\n[Android 第一个Android应用，HelloWorld](/2010/11/13/android-helloworld.html)\n\n创建设置如下：\n\n1.  Project name:HelloEditText\n2.  Build Target :android 2.2\n3.  Application name:HelloEditText\n4.  Package name:com.flysnow\n5.  create Activity:HelloEditText\n6.  min SDK 8\n\n这时候运行还看不到EditText，因为我们还没有加上,修改main.xml如下：\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t\t\tandroid:orientation=\"vertical\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"fill_parent\"\n\t\t\t>\n\t\t<EditText\n\t\t\tandroid:id=\"@+id/edit_text\"  \n\t\t\tandroid:layout_width=\"fill_parent\" \n\t\t\tandroid:layout_height=\"wrap_content\" \n\t\t\tandroid:text=\"这是一个EditText\"/>\n\t</LinearLayout>\n \n 这里添加了一个id为\"edit_text\"的EditText，设置默认显示为本为“这是一个EditText”。。运行效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355666/8abc632a-3e6c-3c5f-9dc1-90aac6470f96.png)\n\n\n## 二：EditText简介\n\n\nEditText是一个非常重要的组件，可以说它是用户和Android应用进行数据传输窗户，有了它就等于有了一扇和Android应用传输的门，通过它用户可以把数据传给Android应用，然后得到我们想要的数据。\n\nEditText是TextView的子类，所以TextView的方法和特性同样存在于EditText中，具体的TextView的介绍可以参考上一节[Android TextView小组件的使用--附带超链接和跑马灯效果 ](/2010/11/25/android-textview-tutorials.html)\n\n\n##  三：长度和空白提示文字,提示文字颜色,是否可编辑等\n\n\nEditText有一些属性可以设置EditText的特性，比如最大长度，空白提示文字等。\n\n\n\n\t\n  1. 有时候我们有一些特属的需要，要求只能在EditText中输入特定个数的字符，比如身份证号、手机号吗等。这时候就可以通过android:maxLength属性来设置最大输入字符个数，比如android:maxLength=“4”就表示最多能输入4个字符，再多了就输入不进去了。\n\n\t\n  2. 空白提示文字。有时候我们需要说明你定义的这个EditText是做什么用的，比如让输入“用户名”，或者输入“电话号码”等，但是你又不想在EditText前面加一个TextView来说明这是输入“用户名”的，因为这会使用一个TextView，那么怎么办呢？EditText为我们提供了android:hint来设置当EditText内容为空时显示的文本，这个文本只在EditText为空时显示，你输入字符的时候就消失了，不影响你的EditText的文本。。修改main.xml如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:maxLength=\"40\"\n        android:hint=\"请输入用户名...\"/>\n    </LinearLayout>\n\n\n运行应用就会看到如下的效果：\n\n![](http://dl.iteye.com/upload/attachment/355690/1fe441fe-e9fc-32f2-8fcf-53e0445d654c.png)\n看看吧，简洁明了还不用新增一个TextView说明，也不影响用户操作。\n\n\t\n  3. 上面列出了空白时的提示文字，有的人说了，我不想要这个灰色的提示文字，和我的应用整体风格不协调，那也行啊，我们可以换颜色，怎么换呢，就是通过android:textColorHint属性设置你想要的颜色。修改main.xml如下:\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:maxLength=\"40\"\n        android:hint=\"请输入用户名...\"\n        android:textColorHint=\"#238745\"/>\n    </LinearLayout>\n\n\n运行程序效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355702/7751967e-633b-3c69-bdc0-f135b1a25a25.png)\n看到了吧，颜色已经变了。。\n\n\t\n  4. 还有一个比较实用的功能，就是设置EditText的不可编辑。设置android:enabled=\"false\"可以实现不可编辑，可以获得焦点。这时候我们看到EditText和一个TextView差不多：![](http://dl.iteye.com/upload/attachment/355705/dccc8638-134c-3532-9d44-03fbb394669b.png)\n\n\t\n  5. 实现类似html中Textarea的文本域。在Android中没有专门的文本域组件，但是可以通过设置EditText的高来实现同样的文本域功能。修改main.xml如下:\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"200dip\"/>\n    </LinearLayout>\n\n\n运行程序效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355707/a1e61bd2-1162-3b7a-8a5c-3dfe880e3866.png)\n\n\n\n\n## 四：输入特殊格式的字符\n\n\n在我们开发程序的时候不免会输入一些特属个数的字符，比如密码（输入框的字符要加密显示），电话号码（比如数字和-）,数字等，这些都算是一些特属格式的字符，强大的EditText同样为我们提供了输入这些特属格式字符的设置。\n\n\n\n\t\n  1. 密码文本框。密码输入也是Android应用常用的功能，通过配置EditText的android:password=\"true\"就可以实现这一密码输入功能，修改main.xml如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:password=\"true\"/>\n    </LinearLayout>\n\n\n运行效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355709/b4831d6e-2f6a-3b1e-a8ae-982083b1e596.png)\n可以看到我们输入的字符已经被“.”这样的掩码所代替。\n\n\t\n  2. 手机中发短信打电话是必不可少的，所以用于专门输入电话号码的文本框也是大有用途，有了他我们对是否是电话号码的校验就容易的多了(因为字符是正确的，只要校验格式\n).通过设置android:phoneNumber=\"true\"就可以把EditText变成只接受电话号码输入的文本框，连软键盘都已经变成拨号专用软键盘了，所以不用再担心输入其他字符了。修改main.xml如下： \n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:phoneNumber=\"true\"/>\n    </LinearLayout>\n\n\n运行程序效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355713/525c31d6-adbe-39e2-8edb-afb6431d657f.png)\n注意看软键盘，已经变成拨号专用的啦.\n\n\t\n  3. 有时候我们只想输入数字，不想输入字母，EditText为我们提供了android:numeric来控制输入的数字类型，一共有三种分别为integer（正整数）、signed（带符号整数）和decimal(浮点数)。这里以signed类型的为例，修改main.xml如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:numeric=\"signed\"/>\n    </LinearLayout>\n\n\n运行效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355719/88cc320b-3d8f-3cd7-9dc0-19c8da6df9dd.png)\n注意这里的软键盘变成“数字键盘”的变化.\n\n\n\n\n## 五：为文本指定特定的软键盘类型\n\n\n前面我们通过指定为电话号码特定格式，然后键盘类型变成了拨号专用的键盘，这个是自动变的，其实我们也可以通\n过android:inputType来设置文本的类型，让输入法选择合适的软键盘的。。android:inputType有很多类型，这里使用date类型来演示,修改main.xml如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:inputType=\"date\"/>\n    </LinearLayout>\n\n\n运行效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355729/bbfe54c6-a87a-3ab6-908d-32644cda7d31.png)\n\n\n## 六：Enter键图标的设置\n\n\n软键盘的Enter键默认显示的是“完成”文本，我们知道按Enter建表示前置工作已经准备完毕了，要去什么什么啦。比如，在一个搜索中，我们输入要搜索的文本，然后按Enter表示要去搜索了，但是默认的Enter键显示的是“完成”文本，看着不太合适，不符合搜索的语义，如果能显示“搜索”两个字或者显示一个表示搜索的图标多好。事实证明我们的想法是合理的，Android也为我们提供的这样的功能。通过设置android:imeOptions来改变默认的“完成”文本。这里举几个常用的常量值：\n\n\n\n\t\n  1. actionUnspecified  未指定，对应常量EditorInfo.IME_ACTION_UNSPECIFIED.效果：![](http://dl.iteye.com/upload/attachment/355737/bd9d7b7c-2a93-37b3-afd9-cda2f3593058.png)\n\n\t\n  2. actionNone 没有动作,对应常量EditorInfo.IME_ACTION_NONE 效果：![](http://dl.iteye.com/upload/attachment/355737/bd9d7b7c-2a93-37b3-afd9-cda2f3593058.png)\n\n\t\n  3. actionGo 去往，对应常量EditorInfo.IME_ACTION_GO 效果：![](http://dl.iteye.com/upload/attachment/355757/a8db4447-ec91-39aa-a546-c117db16cf55.png)\n\n\t\n  4. actionSearch 搜索，对应常量EditorInfo.IME_ACTION_SEARCH 效果： ![](http://dl.iteye.com/upload/attachment/355769/c35d6b78-d5b9-314a-9698-144bc12d0af3.png)\n\n\t\n  5. actionSend 发送，对应常量EditorInfo.IME_ACTION_SEND 效果：![](http://dl.iteye.com/upload/attachment/355788/c168252f-bb3d-3831-8e3c-8bced16b12a1.png)\n\n\t\n  6. actionNext 下一个，对应常量EditorInfo.IME_ACTION_NEXT 效果：![](http://dl.iteye.com/upload/attachment/355798/aa6bd8b1-8ab3-38d9-b162-01ce10f4f998.png)\n\n\t\n  7. actionDone 完成，对应常量EditorInfo.IME_ACTION_DONE 效果：![](http://dl.iteye.com/upload/attachment/355804/79979746-7373-3377-bb7e-3dd4bdede464.png)\n\n\n下面已搜索为例，演示一个实例，修改main.xml如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:imeOptions=\"actionSearch\"/>\n    </LinearLayout>\n\n\n修改HelloEditText如下：\n\n    \n    package com.flysnow;\n    \n    import android.app.Activity;\n    import android.os.Bundle;\n    import android.view.KeyEvent;\n    import android.widget.EditText;\n    import android.widget.TextView;\n    import android.widget.Toast;\n    import android.widget.TextView.OnEditorActionListener;\n    \n    public class HelloEditText extends Activity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            EditText editText=(EditText)findViewById(R.id.edit_text);\n            editText.setOnEditorActionListener(new OnEditorActionListener() {\n    \t\t\t@Override\n    \t\t\tpublic boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n    \t\t\t\tToast.makeText(HelloEditText.this, String.valueOf(actionId), Toast.LENGTH_SHORT).show();\n    \t\t\t\treturn false;\n    \t\t\t}\n    \t\t});\n        }\n    }\n\n\n运行程序，点击回车（也就是搜索图标软键盘按钮）会显示该actionId.我们上面的每一个设置都会对应一个常量，这里的actionId就是那个常量值。\n\n![](http://dl.iteye.com/upload/attachment/355851/c9f95967-fe2f-3850-a96a-17bc220fcc32.png)\n\n\n## 七：EditText的取值、全选、部分选择、获取选中文本\n\n\n下面通过一个例子来演示EditText的取值、全选、部分选择和获取选中文本.main.xml修改如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:imeOptions=\"actionSearch\"/>\n    <Button \n    \tandroid:id=\"@+id/btn_get_value\"\n    \tandroid:text=\"取值\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"/>\n    <Button \n    \tandroid:id=\"@+id/btn_all\"\n    \tandroid:text=\"全选\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"/>\n    <Button \n    \tandroid:id=\"@+id/btn_select\"\n    \tandroid:text=\"从第2个字符开始选择\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"/>\n    <Button \n    \tandroid:id=\"@+id/btn_get_select\"\n    \tandroid:text=\"获取选中文本\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"/>\n    </LinearLayout>\n\n\nHelloEditText修改如下：\n\n    \n    package com.flysnow;\n    \n    import android.app.Activity;\n    import android.os.Bundle;\n    import android.text.Editable;\n    import android.text.Selection;\n    import android.view.KeyEvent;\n    import android.view.View;\n    import android.view.View.OnClickListener;\n    import android.widget.Button;\n    import android.widget.EditText;\n    import android.widget.TextView;\n    import android.widget.Toast;\n    import android.widget.TextView.OnEditorActionListener;\n    /**\n     * EditText演示\n     * @author 飞雪无情\n     * @since 2010-11-29\n     */\n    public class HelloEditText extends Activity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            final EditText editText=(EditText)findViewById(R.id.edit_text);\n            //监听回车键\n            editText.setOnEditorActionListener(new OnEditorActionListener() {\n    \t\t\t@Override\n    \t\t\tpublic boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n    \t\t\t\tToast.makeText(HelloEditText.this, String.valueOf(actionId), Toast.LENGTH_SHORT).show();\n    \t\t\t\treturn false;\n    \t\t\t}\n    \t\t});\n            //获取EditText文本\n            Button getValue=(Button)findViewById(R.id.btn_get_value);\n            getValue.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tToast.makeText(HelloEditText.this, editText.getText().toString(), Toast.LENGTH_SHORT).show();\n    \t\t\t}\n    \t\t});\n            //让EditText全选\n            Button all=(Button)findViewById(R.id.btn_all);\n            all.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\teditText.selectAll();\n    \t\t\t}\n    \t\t});\n            //从第2个字符开始选择EditText文本\n            Button select=(Button)findViewById(R.id.btn_select);\n            select.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tEditable editable=editText.getText();\n    \t\t\t\tSelection.setSelection(editable, 1,editable.length());\n    \t\t\t}\n    \t\t});\n          //获取选中的文本\n            Button getSelect=(Button)findViewById(R.id.btn_get_select);\n            getSelect.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tint start=editText.getSelectionStart();\n    \t\t\t\tint end=editText.getSelectionEnd();\n    \t\t\t\tCharSequence selectText=editText.getText().subSequence(start, end);\n    \t\t\t\tToast.makeText(HelloEditText.this, selectText, Toast.LENGTH_SHORT).show();\n    \t\t\t}\n    \t\t});\n        }\n        /**\n         * 交换两个索引\n         * @param start 开始索引\n         * @param end 结束索引\n         */\n    \tprotected void switchIndex(int start, int end) {\n    \t\tint temp=start;\n    \t\tstart=end;\n    \t\tend=temp;\n    \t}\n    }\n\n\n运行效果如下：\n\n![](http://dl.iteye.com/upload/attachment/356058/4926c2d1-36a0-3cb6-b02f-e743e2313045.png)\n可以通过输入文字和点击下面的按钮测试。\n\n\n## 八：小结\n\n\n这结详细介绍了EditText的大部分特性和常用功能，如常用的密码框，获取值等等。这几天忙的没更新，这次更新个长的。可以够消化一阵子的。\n","source":"_posts/2010-11-29-android-edittext-tutorials.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2010-11-29 08:51:00+00:00\nlayout: post\nslug: android-edittext-tutorials\ntitle: Android EditText使用详解-包含很多教程上看不到的功能演示\nwordpress_id: 118\ncategories:\n- Android\ntags:\n- Android\n- Widget\n---\n\n标题有点大，说是详解，其实就是对EditText的一些常用功能的介绍，包括密码框，电话框，空白提示文字等等的讲解，尽量的介绍详细一点，也就是所谓的详解了。。呵呵\n\n## 一：新建HelloEditText工程\n\n新建一个Hello world详细步骤可以参见\n\n[Android 第一个Android应用，HelloWorld](/2010/11/13/android-helloworld.html)\n\n创建设置如下：\n\n1.  Project name:HelloEditText\n2.  Build Target :android 2.2\n3.  Application name:HelloEditText\n4.  Package name:com.flysnow\n5.  create Activity:HelloEditText\n6.  min SDK 8\n\n这时候运行还看不到EditText，因为我们还没有加上,修改main.xml如下：\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t\t\tandroid:orientation=\"vertical\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"fill_parent\"\n\t\t\t>\n\t\t<EditText\n\t\t\tandroid:id=\"@+id/edit_text\"  \n\t\t\tandroid:layout_width=\"fill_parent\" \n\t\t\tandroid:layout_height=\"wrap_content\" \n\t\t\tandroid:text=\"这是一个EditText\"/>\n\t</LinearLayout>\n \n 这里添加了一个id为\"edit_text\"的EditText，设置默认显示为本为“这是一个EditText”。。运行效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355666/8abc632a-3e6c-3c5f-9dc1-90aac6470f96.png)\n\n\n## 二：EditText简介\n\n\nEditText是一个非常重要的组件，可以说它是用户和Android应用进行数据传输窗户，有了它就等于有了一扇和Android应用传输的门，通过它用户可以把数据传给Android应用，然后得到我们想要的数据。\n\nEditText是TextView的子类，所以TextView的方法和特性同样存在于EditText中，具体的TextView的介绍可以参考上一节[Android TextView小组件的使用--附带超链接和跑马灯效果 ](/2010/11/25/android-textview-tutorials.html)\n\n\n##  三：长度和空白提示文字,提示文字颜色,是否可编辑等\n\n\nEditText有一些属性可以设置EditText的特性，比如最大长度，空白提示文字等。\n\n\n\n\t\n  1. 有时候我们有一些特属的需要，要求只能在EditText中输入特定个数的字符，比如身份证号、手机号吗等。这时候就可以通过android:maxLength属性来设置最大输入字符个数，比如android:maxLength=“4”就表示最多能输入4个字符，再多了就输入不进去了。\n\n\t\n  2. 空白提示文字。有时候我们需要说明你定义的这个EditText是做什么用的，比如让输入“用户名”，或者输入“电话号码”等，但是你又不想在EditText前面加一个TextView来说明这是输入“用户名”的，因为这会使用一个TextView，那么怎么办呢？EditText为我们提供了android:hint来设置当EditText内容为空时显示的文本，这个文本只在EditText为空时显示，你输入字符的时候就消失了，不影响你的EditText的文本。。修改main.xml如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:maxLength=\"40\"\n        android:hint=\"请输入用户名...\"/>\n    </LinearLayout>\n\n\n运行应用就会看到如下的效果：\n\n![](http://dl.iteye.com/upload/attachment/355690/1fe441fe-e9fc-32f2-8fcf-53e0445d654c.png)\n看看吧，简洁明了还不用新增一个TextView说明，也不影响用户操作。\n\n\t\n  3. 上面列出了空白时的提示文字，有的人说了，我不想要这个灰色的提示文字，和我的应用整体风格不协调，那也行啊，我们可以换颜色，怎么换呢，就是通过android:textColorHint属性设置你想要的颜色。修改main.xml如下:\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:maxLength=\"40\"\n        android:hint=\"请输入用户名...\"\n        android:textColorHint=\"#238745\"/>\n    </LinearLayout>\n\n\n运行程序效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355702/7751967e-633b-3c69-bdc0-f135b1a25a25.png)\n看到了吧，颜色已经变了。。\n\n\t\n  4. 还有一个比较实用的功能，就是设置EditText的不可编辑。设置android:enabled=\"false\"可以实现不可编辑，可以获得焦点。这时候我们看到EditText和一个TextView差不多：![](http://dl.iteye.com/upload/attachment/355705/dccc8638-134c-3532-9d44-03fbb394669b.png)\n\n\t\n  5. 实现类似html中Textarea的文本域。在Android中没有专门的文本域组件，但是可以通过设置EditText的高来实现同样的文本域功能。修改main.xml如下:\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"200dip\"/>\n    </LinearLayout>\n\n\n运行程序效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355707/a1e61bd2-1162-3b7a-8a5c-3dfe880e3866.png)\n\n\n\n\n## 四：输入特殊格式的字符\n\n\n在我们开发程序的时候不免会输入一些特属个数的字符，比如密码（输入框的字符要加密显示），电话号码（比如数字和-）,数字等，这些都算是一些特属格式的字符，强大的EditText同样为我们提供了输入这些特属格式字符的设置。\n\n\n\n\t\n  1. 密码文本框。密码输入也是Android应用常用的功能，通过配置EditText的android:password=\"true\"就可以实现这一密码输入功能，修改main.xml如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:password=\"true\"/>\n    </LinearLayout>\n\n\n运行效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355709/b4831d6e-2f6a-3b1e-a8ae-982083b1e596.png)\n可以看到我们输入的字符已经被“.”这样的掩码所代替。\n\n\t\n  2. 手机中发短信打电话是必不可少的，所以用于专门输入电话号码的文本框也是大有用途，有了他我们对是否是电话号码的校验就容易的多了(因为字符是正确的，只要校验格式\n).通过设置android:phoneNumber=\"true\"就可以把EditText变成只接受电话号码输入的文本框，连软键盘都已经变成拨号专用软键盘了，所以不用再担心输入其他字符了。修改main.xml如下： \n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:phoneNumber=\"true\"/>\n    </LinearLayout>\n\n\n运行程序效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355713/525c31d6-adbe-39e2-8edb-afb6431d657f.png)\n注意看软键盘，已经变成拨号专用的啦.\n\n\t\n  3. 有时候我们只想输入数字，不想输入字母，EditText为我们提供了android:numeric来控制输入的数字类型，一共有三种分别为integer（正整数）、signed（带符号整数）和decimal(浮点数)。这里以signed类型的为例，修改main.xml如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:numeric=\"signed\"/>\n    </LinearLayout>\n\n\n运行效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355719/88cc320b-3d8f-3cd7-9dc0-19c8da6df9dd.png)\n注意这里的软键盘变成“数字键盘”的变化.\n\n\n\n\n## 五：为文本指定特定的软键盘类型\n\n\n前面我们通过指定为电话号码特定格式，然后键盘类型变成了拨号专用的键盘，这个是自动变的，其实我们也可以通\n过android:inputType来设置文本的类型，让输入法选择合适的软键盘的。。android:inputType有很多类型，这里使用date类型来演示,修改main.xml如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:inputType=\"date\"/>\n    </LinearLayout>\n\n\n运行效果如下：\n\n![](http://dl.iteye.com/upload/attachment/355729/bbfe54c6-a87a-3ab6-908d-32644cda7d31.png)\n\n\n## 六：Enter键图标的设置\n\n\n软键盘的Enter键默认显示的是“完成”文本，我们知道按Enter建表示前置工作已经准备完毕了，要去什么什么啦。比如，在一个搜索中，我们输入要搜索的文本，然后按Enter表示要去搜索了，但是默认的Enter键显示的是“完成”文本，看着不太合适，不符合搜索的语义，如果能显示“搜索”两个字或者显示一个表示搜索的图标多好。事实证明我们的想法是合理的，Android也为我们提供的这样的功能。通过设置android:imeOptions来改变默认的“完成”文本。这里举几个常用的常量值：\n\n\n\n\t\n  1. actionUnspecified  未指定，对应常量EditorInfo.IME_ACTION_UNSPECIFIED.效果：![](http://dl.iteye.com/upload/attachment/355737/bd9d7b7c-2a93-37b3-afd9-cda2f3593058.png)\n\n\t\n  2. actionNone 没有动作,对应常量EditorInfo.IME_ACTION_NONE 效果：![](http://dl.iteye.com/upload/attachment/355737/bd9d7b7c-2a93-37b3-afd9-cda2f3593058.png)\n\n\t\n  3. actionGo 去往，对应常量EditorInfo.IME_ACTION_GO 效果：![](http://dl.iteye.com/upload/attachment/355757/a8db4447-ec91-39aa-a546-c117db16cf55.png)\n\n\t\n  4. actionSearch 搜索，对应常量EditorInfo.IME_ACTION_SEARCH 效果： ![](http://dl.iteye.com/upload/attachment/355769/c35d6b78-d5b9-314a-9698-144bc12d0af3.png)\n\n\t\n  5. actionSend 发送，对应常量EditorInfo.IME_ACTION_SEND 效果：![](http://dl.iteye.com/upload/attachment/355788/c168252f-bb3d-3831-8e3c-8bced16b12a1.png)\n\n\t\n  6. actionNext 下一个，对应常量EditorInfo.IME_ACTION_NEXT 效果：![](http://dl.iteye.com/upload/attachment/355798/aa6bd8b1-8ab3-38d9-b162-01ce10f4f998.png)\n\n\t\n  7. actionDone 完成，对应常量EditorInfo.IME_ACTION_DONE 效果：![](http://dl.iteye.com/upload/attachment/355804/79979746-7373-3377-bb7e-3dd4bdede464.png)\n\n\n下面已搜索为例，演示一个实例，修改main.xml如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:imeOptions=\"actionSearch\"/>\n    </LinearLayout>\n\n\n修改HelloEditText如下：\n\n    \n    package com.flysnow;\n    \n    import android.app.Activity;\n    import android.os.Bundle;\n    import android.view.KeyEvent;\n    import android.widget.EditText;\n    import android.widget.TextView;\n    import android.widget.Toast;\n    import android.widget.TextView.OnEditorActionListener;\n    \n    public class HelloEditText extends Activity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            EditText editText=(EditText)findViewById(R.id.edit_text);\n            editText.setOnEditorActionListener(new OnEditorActionListener() {\n    \t\t\t@Override\n    \t\t\tpublic boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n    \t\t\t\tToast.makeText(HelloEditText.this, String.valueOf(actionId), Toast.LENGTH_SHORT).show();\n    \t\t\t\treturn false;\n    \t\t\t}\n    \t\t});\n        }\n    }\n\n\n运行程序，点击回车（也就是搜索图标软键盘按钮）会显示该actionId.我们上面的每一个设置都会对应一个常量，这里的actionId就是那个常量值。\n\n![](http://dl.iteye.com/upload/attachment/355851/c9f95967-fe2f-3850-a96a-17bc220fcc32.png)\n\n\n## 七：EditText的取值、全选、部分选择、获取选中文本\n\n\n下面通过一个例子来演示EditText的取值、全选、部分选择和获取选中文本.main.xml修改如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <EditText\n    \tandroid:id=\"@+id/edit_text\"  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:imeOptions=\"actionSearch\"/>\n    <Button \n    \tandroid:id=\"@+id/btn_get_value\"\n    \tandroid:text=\"取值\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"/>\n    <Button \n    \tandroid:id=\"@+id/btn_all\"\n    \tandroid:text=\"全选\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"/>\n    <Button \n    \tandroid:id=\"@+id/btn_select\"\n    \tandroid:text=\"从第2个字符开始选择\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"/>\n    <Button \n    \tandroid:id=\"@+id/btn_get_select\"\n    \tandroid:text=\"获取选中文本\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"/>\n    </LinearLayout>\n\n\nHelloEditText修改如下：\n\n    \n    package com.flysnow;\n    \n    import android.app.Activity;\n    import android.os.Bundle;\n    import android.text.Editable;\n    import android.text.Selection;\n    import android.view.KeyEvent;\n    import android.view.View;\n    import android.view.View.OnClickListener;\n    import android.widget.Button;\n    import android.widget.EditText;\n    import android.widget.TextView;\n    import android.widget.Toast;\n    import android.widget.TextView.OnEditorActionListener;\n    /**\n     * EditText演示\n     * @author 飞雪无情\n     * @since 2010-11-29\n     */\n    public class HelloEditText extends Activity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n            final EditText editText=(EditText)findViewById(R.id.edit_text);\n            //监听回车键\n            editText.setOnEditorActionListener(new OnEditorActionListener() {\n    \t\t\t@Override\n    \t\t\tpublic boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n    \t\t\t\tToast.makeText(HelloEditText.this, String.valueOf(actionId), Toast.LENGTH_SHORT).show();\n    \t\t\t\treturn false;\n    \t\t\t}\n    \t\t});\n            //获取EditText文本\n            Button getValue=(Button)findViewById(R.id.btn_get_value);\n            getValue.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tToast.makeText(HelloEditText.this, editText.getText().toString(), Toast.LENGTH_SHORT).show();\n    \t\t\t}\n    \t\t});\n            //让EditText全选\n            Button all=(Button)findViewById(R.id.btn_all);\n            all.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\teditText.selectAll();\n    \t\t\t}\n    \t\t});\n            //从第2个字符开始选择EditText文本\n            Button select=(Button)findViewById(R.id.btn_select);\n            select.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tEditable editable=editText.getText();\n    \t\t\t\tSelection.setSelection(editable, 1,editable.length());\n    \t\t\t}\n    \t\t});\n          //获取选中的文本\n            Button getSelect=(Button)findViewById(R.id.btn_get_select);\n            getSelect.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tint start=editText.getSelectionStart();\n    \t\t\t\tint end=editText.getSelectionEnd();\n    \t\t\t\tCharSequence selectText=editText.getText().subSequence(start, end);\n    \t\t\t\tToast.makeText(HelloEditText.this, selectText, Toast.LENGTH_SHORT).show();\n    \t\t\t}\n    \t\t});\n        }\n        /**\n         * 交换两个索引\n         * @param start 开始索引\n         * @param end 结束索引\n         */\n    \tprotected void switchIndex(int start, int end) {\n    \t\tint temp=start;\n    \t\tstart=end;\n    \t\tend=temp;\n    \t}\n    }\n\n\n运行效果如下：\n\n![](http://dl.iteye.com/upload/attachment/356058/4926c2d1-36a0-3cb6-b02f-e743e2313045.png)\n可以通过输入文字和点击下面的按钮测试。\n\n\n## 八：小结\n\n\n这结详细介绍了EditText的大部分特性和常用功能，如常用的密码框，获取值等等。这几天忙的没更新，这次更新个长的。可以够消化一阵子的。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvn5004vz1n1u88c6db9"},{"author":"飞雪无情","comments":1,"date":"2010-11-24T08:19:03.000Z","layout":"post","slug":"android-textview-tutorials","title":"Android TextView小组件的使用--附带超链接和跑马灯效果","wordpress_id":119,"_content":"\n\n\n\n这节主要介绍一下TextView的简单用法，以及超链接文本、跑马灯等实例。\n\n\n\n\n##  一：新建HelloTextView 工程\n\n\n新建一个Hello world详细步骤可以参见\n\n\n### [Android第一个Android应用，HelloWorld](/2010/11/13/android-helloworld.html)\n\n\n创建设置如下：\n\n\n\n\t\n  1. Project name:HelloTextView\n\n\t\n  2. Build Target :android 2.2\n\n\t\n  3. Application name:HelloTextView\n\n\t\n  4. Package name:com.flysnow\n\n\t\n  5. create Activity:HelloTextView\n\n\t\n  6. min SDK 8\n\n\n然后运行该应用就可以看到TextView的效果，是显示一行字：“Hello World, HelloTextView!”，这是因为新建的Hello项目自带的一个TextView。\n\n\n## 二：分析TextView组件\n\n\nTextView是Android中常用的组件之一，可以用他来显示文字，就像一个标签一样，或者你可以认为是html中的span。对于TextView我们最关心的应该是怎么设置显示的文本，怎样设置字体的大小，字体的颜色，字体的样式，\n\n其实很简单，TextView中提供了大量的属性帮我们配置TextView。\n\n\n\n\t\n  1. 修改xml配置文件实现。我们修改main.xml如下:\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <TextView  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:textColor=\"#ff0000\"\n        android:textSize=\"24sp\"\n        android:textStyle=\"bold\"\n        android:text=\"@string/hello\"\n        />\n    </LinearLayout>\n\n\n这里增加了三个属性的设置，分别是android:textColor=\"#ff0000\"设置字体为红色，android:textSize=\"24sp\"设置字体为24sp, android:textStyle=\"bold\"设置字体加粗，预览效果如下图：\n![](http://dl.iteye.com/upload/attachment/353237/12c1bbb8-419b-3dbd-b53a-501f73088c50.png)看到我们的TextView的内容已经变成红色，24sp大，加粗。。\n\n\t\n  2. 2.修改java代码实现。同样我们不修改xml文件，而是通过java编码来实现上面的图示效果，首先我们先给这个TextView分配一个id，也就是这个TextView的标记记号，方便我们找到他。在main.xml的TextView中加入android:id=\"@+id/text_view\"就可以为该TextView分配一个id。。这里@+id/是表示在R类的id类下新增常量字段，这里的常量字段是text_view。下面修改HelloTextView类如下：\n\n    \n    package com.flysnow;\n    \n    import android.app.Activity;\n    import android.graphics.Color;\n    import android.graphics.Typeface;\n    import android.os.Bundle;\n    import android.util.TypedValue;\n    import android.widget.TextView;\n    \n    public class HelloTextView extends Activity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);//设置内容显示的xml布局文件\n            TextView textView=(TextView)findViewById(R.id.text_view);//取得我们的TextView组件\n            textView.setTextColor(Color.RED);//设置成红色\n            textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 24f);//设置成24sp\n            textView.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));//加粗\n        }\n    }\n\n\n最终结果和上图一样的，这说明通过代码和xml配置都可以定制TextView，但是推荐使用xml进行定制，使用java代码控制逻辑，这符合mvc模式，也符合Android的设计思想。\n\n\n\n\n这里说一下度量单位。度量单位有很多，如px,pt,dip,sp等等。不过建议应该使用sp作为字体大小的单位，使用dip作为其他元素的单位。。因为sp是刻度无关的像素，更重要的是他可以根据用户的字体大小的首选项进行缩放，这才是重要的，这样当你调整了整体的字体大小时不至于使得个别字体的大小不一致而影响美观。\n\n\n\n\n##  三：TextView的一些有用的实例\n\n\n\n\n\n\t\n  1. TextView的超链接形势。我们应该都见过html中的超链接，加一个a标记就可以让一段文字变成超链接的形式，可以点击到连接的地址。那么TextView可以实现吗？作为强大的TextView当然不会忘记这一点。TextView为我们提供了android:autoLink属性，只要把他设置成“web”,那么该TextView中的是网址形势的文件就会自动变成超链接的形式。好了，耳听为虚，眼见为实，看下面的例子。修改strings.xml为：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n        <string name=\"hello\">我的博客地址是：http://www.flysnow.org    \\n我的电话是：400-34534-500\\n我的email是12235@163.com</string>\n        <string name=\"app_name\">HelloTextView</string>\n    </resources>\n\n\n修改main.xml为：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <TextView \n    \tandroid:id=\"@+id/text_view\"\n    \tandroid:autoLink=\"web\"\n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/hello\"\n        />\n    </LinearLayout>\n\n\n然后把HelloTextView类中的那一段设置文本颜色、大小和样式的代码注释掉，运行程序就会看到如下图的效果:\n![](http://dl.iteye.com/upload/attachment/353258/c4c40145-5e31-3541-8fbd-bfb734a8b3cd.png)\n当我们点击蓝色的我的博客的网址的时候，Android系统就会调用默认的web浏览器打开我的博客。\n有的朋友已经注意到了，文本里我还写了我的电话和email，难道TextView也支持电话和email超链接吗？没错，的确支持，当我们设置android:autoLink=\"phone\"的时候，文本里的电话就会变成蓝色超链接形式，点击就会打开拨号界面等待你按通话键拨号，email也是同理。。\n\n当我们把 android:autoLink换成phone的时候发现网址不超连接了，换成email也是一样。难道我们不能一下子让网址，电话，email都超链接吗？答案是肯定的，这时候我们可以把 android:autoLink设置成all，这样里面的网址、电话和email就都可以超链接了。\n![](http://dl.iteye.com/upload/attachment/353264/3de8c6b3-263b-3c8b-86b8-951de945bce6.png)\n\n\t\n  2. 跑马丁效果。有时候我们要显示的文本较长，TextView不能完全显示，这时候可以通过这中跑马灯的方式让文本移动展示，达到了既不占用地方又能完全看到文本的目的。这里直接复用农民伯伯的跑马灯代码：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <TextView \n    \tandroid:id=\"@+id/text_view\"\n    \tandroid:autoLink=\"all\"\n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/hello\"\n        android:ellipsize=\"marquee\" \n        android:focusable=\"true\" \n        android:marqueeRepeatLimit=\"marquee_forever\" \n        android:focusableInTouchMode=\"true\" \n        android:scrollHorizontally=\"true\"/>\n    </LinearLayout>\n\n\n然后为TextView设置一个很长的字符串。运行就可以看到横向移动的效果。\n\n![](http://dl.iteye.com/upload/attachment/353267/fab3be3a-0850-32d1-8b74-893ac8dcb816.png)\n设置的属性说明可以参考TextView的文档，这里也有中文版本：[TextView中文API文档](http://www.cnblogs.com/over140/archive/2010/08/27/1809745.html)\n\n这里要进行说明的是：以上设置在大部分情况下都会成功的展示跑马灯样式，但是在一些复杂的布局中就会看不到任何文字。比如我开发的Android应用“我团”，在展示团购详细信息页面，我自定义了一个标题栏让其显示团购的信息，想让其跑马灯的方式显示，但是使用了上述代码后看不到文字，其实是文字被撑下来的，这时候我们设置android:singleLine=\"true\"以单行的方式展示就好了。所以请以后实现跑马灯效果的时候最好加上android:singleLine=\"true\"单行展示。。\n\n\n\n\n## 四：小结\n\n\n好了，一个TextView也啰嗦了那么多，希望大家能听明白，最后两个实用的例子能帮助大家更好的学习和使用TextView。。这两天JE挂了，没来得及更新，对不起大家了。最近忙于升级“我团”应用，也只能网上10点后才能上网写。可能更新会很慢，请见谅，谢谢各位的支持。\n\n\n\n\n\n","source":"_posts/2010-11-24-android-textview-tutorials.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2010-11-24 16:19:03+00:00\nlayout: post\nslug: android-textview-tutorials\ntitle: Android TextView小组件的使用--附带超链接和跑马灯效果\nwordpress_id: 119\ncategories:\n- Android\ntags:\n- Android\n- Widget\n---\n\n\n\n\n这节主要介绍一下TextView的简单用法，以及超链接文本、跑马灯等实例。\n\n\n\n\n##  一：新建HelloTextView 工程\n\n\n新建一个Hello world详细步骤可以参见\n\n\n### [Android第一个Android应用，HelloWorld](/2010/11/13/android-helloworld.html)\n\n\n创建设置如下：\n\n\n\n\t\n  1. Project name:HelloTextView\n\n\t\n  2. Build Target :android 2.2\n\n\t\n  3. Application name:HelloTextView\n\n\t\n  4. Package name:com.flysnow\n\n\t\n  5. create Activity:HelloTextView\n\n\t\n  6. min SDK 8\n\n\n然后运行该应用就可以看到TextView的效果，是显示一行字：“Hello World, HelloTextView!”，这是因为新建的Hello项目自带的一个TextView。\n\n\n## 二：分析TextView组件\n\n\nTextView是Android中常用的组件之一，可以用他来显示文字，就像一个标签一样，或者你可以认为是html中的span。对于TextView我们最关心的应该是怎么设置显示的文本，怎样设置字体的大小，字体的颜色，字体的样式，\n\n其实很简单，TextView中提供了大量的属性帮我们配置TextView。\n\n\n\n\t\n  1. 修改xml配置文件实现。我们修改main.xml如下:\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <TextView  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:textColor=\"#ff0000\"\n        android:textSize=\"24sp\"\n        android:textStyle=\"bold\"\n        android:text=\"@string/hello\"\n        />\n    </LinearLayout>\n\n\n这里增加了三个属性的设置，分别是android:textColor=\"#ff0000\"设置字体为红色，android:textSize=\"24sp\"设置字体为24sp, android:textStyle=\"bold\"设置字体加粗，预览效果如下图：\n![](http://dl.iteye.com/upload/attachment/353237/12c1bbb8-419b-3dbd-b53a-501f73088c50.png)看到我们的TextView的内容已经变成红色，24sp大，加粗。。\n\n\t\n  2. 2.修改java代码实现。同样我们不修改xml文件，而是通过java编码来实现上面的图示效果，首先我们先给这个TextView分配一个id，也就是这个TextView的标记记号，方便我们找到他。在main.xml的TextView中加入android:id=\"@+id/text_view\"就可以为该TextView分配一个id。。这里@+id/是表示在R类的id类下新增常量字段，这里的常量字段是text_view。下面修改HelloTextView类如下：\n\n    \n    package com.flysnow;\n    \n    import android.app.Activity;\n    import android.graphics.Color;\n    import android.graphics.Typeface;\n    import android.os.Bundle;\n    import android.util.TypedValue;\n    import android.widget.TextView;\n    \n    public class HelloTextView extends Activity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);//设置内容显示的xml布局文件\n            TextView textView=(TextView)findViewById(R.id.text_view);//取得我们的TextView组件\n            textView.setTextColor(Color.RED);//设置成红色\n            textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 24f);//设置成24sp\n            textView.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));//加粗\n        }\n    }\n\n\n最终结果和上图一样的，这说明通过代码和xml配置都可以定制TextView，但是推荐使用xml进行定制，使用java代码控制逻辑，这符合mvc模式，也符合Android的设计思想。\n\n\n\n\n这里说一下度量单位。度量单位有很多，如px,pt,dip,sp等等。不过建议应该使用sp作为字体大小的单位，使用dip作为其他元素的单位。。因为sp是刻度无关的像素，更重要的是他可以根据用户的字体大小的首选项进行缩放，这才是重要的，这样当你调整了整体的字体大小时不至于使得个别字体的大小不一致而影响美观。\n\n\n\n\n##  三：TextView的一些有用的实例\n\n\n\n\n\n\t\n  1. TextView的超链接形势。我们应该都见过html中的超链接，加一个a标记就可以让一段文字变成超链接的形式，可以点击到连接的地址。那么TextView可以实现吗？作为强大的TextView当然不会忘记这一点。TextView为我们提供了android:autoLink属性，只要把他设置成“web”,那么该TextView中的是网址形势的文件就会自动变成超链接的形式。好了，耳听为虚，眼见为实，看下面的例子。修改strings.xml为：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n        <string name=\"hello\">我的博客地址是：http://www.flysnow.org    \\n我的电话是：400-34534-500\\n我的email是12235@163.com</string>\n        <string name=\"app_name\">HelloTextView</string>\n    </resources>\n\n\n修改main.xml为：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <TextView \n    \tandroid:id=\"@+id/text_view\"\n    \tandroid:autoLink=\"web\"\n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/hello\"\n        />\n    </LinearLayout>\n\n\n然后把HelloTextView类中的那一段设置文本颜色、大小和样式的代码注释掉，运行程序就会看到如下图的效果:\n![](http://dl.iteye.com/upload/attachment/353258/c4c40145-5e31-3541-8fbd-bfb734a8b3cd.png)\n当我们点击蓝色的我的博客的网址的时候，Android系统就会调用默认的web浏览器打开我的博客。\n有的朋友已经注意到了，文本里我还写了我的电话和email，难道TextView也支持电话和email超链接吗？没错，的确支持，当我们设置android:autoLink=\"phone\"的时候，文本里的电话就会变成蓝色超链接形式，点击就会打开拨号界面等待你按通话键拨号，email也是同理。。\n\n当我们把 android:autoLink换成phone的时候发现网址不超连接了，换成email也是一样。难道我们不能一下子让网址，电话，email都超链接吗？答案是肯定的，这时候我们可以把 android:autoLink设置成all，这样里面的网址、电话和email就都可以超链接了。\n![](http://dl.iteye.com/upload/attachment/353264/3de8c6b3-263b-3c8b-86b8-951de945bce6.png)\n\n\t\n  2. 跑马丁效果。有时候我们要显示的文本较长，TextView不能完全显示，这时候可以通过这中跑马灯的方式让文本移动展示，达到了既不占用地方又能完全看到文本的目的。这里直接复用农民伯伯的跑马灯代码：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <TextView \n    \tandroid:id=\"@+id/text_view\"\n    \tandroid:autoLink=\"all\"\n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/hello\"\n        android:ellipsize=\"marquee\" \n        android:focusable=\"true\" \n        android:marqueeRepeatLimit=\"marquee_forever\" \n        android:focusableInTouchMode=\"true\" \n        android:scrollHorizontally=\"true\"/>\n    </LinearLayout>\n\n\n然后为TextView设置一个很长的字符串。运行就可以看到横向移动的效果。\n\n![](http://dl.iteye.com/upload/attachment/353267/fab3be3a-0850-32d1-8b74-893ac8dcb816.png)\n设置的属性说明可以参考TextView的文档，这里也有中文版本：[TextView中文API文档](http://www.cnblogs.com/over140/archive/2010/08/27/1809745.html)\n\n这里要进行说明的是：以上设置在大部分情况下都会成功的展示跑马灯样式，但是在一些复杂的布局中就会看不到任何文字。比如我开发的Android应用“我团”，在展示团购详细信息页面，我自定义了一个标题栏让其显示团购的信息，想让其跑马灯的方式显示，但是使用了上述代码后看不到文字，其实是文字被撑下来的，这时候我们设置android:singleLine=\"true\"以单行的方式展示就好了。所以请以后实现跑马灯效果的时候最好加上android:singleLine=\"true\"单行展示。。\n\n\n\n\n## 四：小结\n\n\n好了，一个TextView也啰嗦了那么多，希望大家能听明白，最后两个实用的例子能帮助大家更好的学习和使用TextView。。这两天JE挂了，没来得及更新，对不起大家了。最近忙于升级“我团”应用，也只能网上10点后才能上网写。可能更新会很慢，请见谅，谢谢各位的支持。\n\n\n\n\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvn8004zz1n1tnyjet3h"},{"author":"飞雪无情","comments":1,"date":"2010-11-16T17:02:20.000Z","layout":"post","slug":"android-activity-statement-cycle-tutorials","title":"Android Activity的生命周期","wordpress_id":120,"_content":"\n通过上一节“Android系列之四：Android项目的目录结构”我们已经知道了什么是Activity，那么为什么我们创建一个Activity的导出类的时候为什么都要覆盖Activity的onCreate方法呢，为什么会在onPause()方法中保存一些当前Activity中的变化，要弄明白这些就要先了解Activity的生命周期，也就是一个Activity才开始到结束都要经过那些状态，下面通过一个例子了解Activity的\n声明周期.\n\n\n\n\n\n## 一：Activity的生命周期方法\n\n\nAndroid提供了很多Activity的生命周期方法，比如我们常用的onCreate、onPause、onResume等。这里主要介绍粗粒度的周期方法，诸如onPostCreate、onPostResume等这些细粒度的周期方法可以参考Android的API文档，在你需要更细层次的控制的时候可以使用这些细粒度的方法。粗粒度的周期方法有以下几个：onCreate()、onStart()、onResume()、onPause()、onStop()、onDestroy()，从名字上就可以看出来这些方法在什么时候执行。\n\n\n## 二：测试Activity的生命周期方法的执行顺序\n\n\n为了能更明白上这几个周期放的执行顺序，我们新建一个HelloWorld项目，在Activity中覆盖这几个方法，打印出日志就可以看出来执行顺序了\n\n\n\n\t\n  1. 新建HelloWorld项目，详细步骤可以参见：\n[Android第一个Android应用，HelloWorld](/2010/11/13/android-helloworld.html)\n\n\t\n  2. 修改main.xml内容为：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <TextView  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:text=\"第一个Activity\"\n        />\n    <Button \n    \tandroid:id=\"@+id/second\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"\n    \tandroid:text=\"打开第二个Activity\"/>\n    </LinearLayout>\n\n\n这里主要是为增加一个文本显示和一个按钮用于显示信息和操作。\n\n\t\n  3. 新建布局文件second.xml，内容如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:orientation=\"vertical\"\n      android:layout_width=\"fill_parent\"\n      android:layout_height=\"fill_parent\">\n      <TextView  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:text=\"第二个Activity\"\n        />\n    <Button \n    \tandroid:id=\"@+id/exit\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"\n    \tandroid:text=\"退出\"/>\n    </LinearLayout>\n\n\n这里主要是为增加一个文本显示和一个退出按钮用于退出当前Activity。\n\n\t\n  4. 新建一个Activity，名字为SecondActivity，内容如下:\n\n    \n    public class SecondActivity extends Activity {\n    \tprivate final static String TAG=\"SecondActivity\";\n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tLog.v(TAG, \"onCreate\");\n    \t\tsetContentView(R.layout.second);\n    \t\t//退出按钮\n    \t\tButton btnExit=(Button)findViewById(R.id.exit);\n    \t\t//为退出按钮设置单击事件\n    \t\tbtnExit.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tfinish();//关闭当前Activity，也就是退出\n    \t\t\t}\n    \t\t});\n    \t}\n    \t@Override\n    \tprotected void onStart() {\n    \t\tsuper.onStart();\n    \t\tLog.v(TAG, \"onStart\");\n    \t}\n    \t@Override\n    \tprotected void onResume() {\n    \t\tsuper.onResume();\n    \t\tLog.v(TAG, \"onResume\");\n    \t}\n    \t@Override\n    \tprotected void onPause() {\n    \t\tsuper.onPause();\n    \t\tLog.v(TAG, \"onPause\");\n    \t}\n    \t@Override\n    \tprotected void onStop() {\n    \t\tsuper.onStop();\n    \t\tLog.v(TAG, \"onStop\");\n    \t}\n    \t@Override\n    \tprotected void onDestroy() {\n    \t\tsuper.onDestroy();\n    \t\tLog.v(TAG, \"onDestroy\");\n    \t}\n    \n    }\n\n\n我在各个周期方法了都加了日志信息，便于跟踪Activity的运行过程\n\n\t\n  5. 修改HelloWorld类，内容如下：\n\n    \n    public class HelloWorld extends Activity {\n    \tprivate final static String TAG=\"HelloWorld\";\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            Log.v(TAG, \"onCreate\");\n            setContentView(R.layout.main);\n            //打开第二个Activity的按钮\n            Button btnSecond=(Button)findViewById(R.id.second);\n            //设置单击事件\n            btnSecond.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tstartActivity(new Intent(HelloWorld.this,SecondActivity.class));\n    \t\t\t\tfinish();//关闭当前Activity\n    \t\t\t}\n    \t\t});\n        }\n    \t@Override\n    \tprotected void onStart() {\n    \t\tsuper.onStart();\n    \t\tLog.v(TAG, \"onStart\");\n    \t}\n    \t@Override\n    \tprotected void onResume() {\n    \t\tsuper.onResume();\n    \t\tLog.v(TAG, \"onResume\");\n    \t}\n    \t@Override\n    \tprotected void onPause() {\n    \t\tsuper.onPause();\n    \t\tLog.v(TAG, \"onPause\");\n    \t}\n    \t@Override\n    \tprotected void onStop() {\n    \t\tsuper.onStop();\n    \t\tLog.v(TAG, \"onStop\");\n    \t}\n    \t@Override\n    \tprotected void onDestroy() {\n    \t\tsuper.onDestroy();\n    \t\tLog.v(TAG, \"onDestroy\");\n    \t}\n    }\n\n\n\n\n\t\n  6. 运行程序，分析结果，发现当程序启动的时候，日志信息为下图:![](http://dl.iteye.com/upload/attachment/349655/baddee2d-f46b-347d-b1f4-10b902def717.png)\n由此可见当打开一个Activity的时候，其周期方法执行顺序为：onCreate()->onStart()->onResume(),现在点击“打开第二个Activity”按钮，看日志的输出如下图:\n\n![](http://dl.iteye.com/upload/attachment/349660/2fcfc919-cae3-36a5-9536-0bae63cc0636.png)\n当应用从Helloworld这个Activity启动SecondActivity的时候，Android会先执行HelloWorld的onPause方法，然后依次执行SecondActivity的onCreate()->onStart()->onResume()方法\n当SecondActivity呈现到屏幕上的时候再一次执行Helloworld的onStop()->onDestroy(),把HelloWorld从Activity栈中移除销毁。这里值得提的就是HelloWorld 中finish方法，因为执行了他所以\nHelloWorld才会从Activity栈中移除销毁，这样当你按“返回”键返回的时候就回不到HelloWorld 这个Activity的界面了，而是直接回到的Android的应用程序列表\n。\n\n\n\n\n## 三：分析结果\n\n\n根据上面例子可见一个Activity在启动的时候会执行onCreate()->onStart()->onResume()，在结束（或离开）的时候会执行onPause()->onStop()->onDestroy(),这就是一个Activity的生命周期。\n因此我们要在onCreate方法里把Activity的需要的东西准备好，也就是初始化；在onResume里对Activity里的东西做一些调整；在onPause做一些清理和保存工作(保存持久状态),因为这是最后的\n机会，因为onPause完成之前Android不会结束托管Activity类的进程，而之后进程可能被结束。总结一下这几个周期方法的作用：\n\n\n\n\t\n  1. onCreate():创建Activity调用，用于Activity的初始化，还有个Bundle类型的参数，可以访问以前存储的状态。\n\n\t\n  2. onStart():Activity在屏幕上对用户可见时调用\n\n\t\n  3. onResume():Activity开始和用户交互的时候调用，这时该Activity是在Activity栈的顶部。\n\n\t\n  4. onPause():Activity被暂停时调用，也就是你要对你能看到的这个Activity说byebye的时候调用,这里可以做一些清理和保存工作\n\n\t\n  5. onStop():Activity被停止或者Activity变成不可见时调用\n\n\t\n  6. onDestroy():Activity被从内存中移除，一般发生在执行finish方法时或者Android回收内存的时候\n\n\n好了，最后让我们看一个API提供的Activity的状态图吧，看了他相信你对Activity的生命周期会更了解，如下图：\n\n![](http://dl.iteye.com/upload/attachment/349672/df78b0d1-8998-38ce-a5b7-95632d1192ac.png)\n\n\n## 四：小结\n\n\n这节主要是通过一个例子分析Activity声明周期，并对常用生命周期方法做了一些说明，应该什么时候使用他们。到这里Android的很基础的东西已经说完了，\n下面就直接Android的UI组件介绍了。。\n\n下期预告：TextView的介绍--包含跑马灯效果\n","source":"_posts/2010-11-17-android-activity-statement-cycle-tutorials.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2010-11-17 01:02:20+00:00\nlayout: post\nlayout: post\nslug: android-activity-statement-cycle-tutorials\ntitle: Android Activity的生命周期\nwordpress_id: 120\ncategories:\n- Android\ntags:\n- Android\n---\n\n通过上一节“Android系列之四：Android项目的目录结构”我们已经知道了什么是Activity，那么为什么我们创建一个Activity的导出类的时候为什么都要覆盖Activity的onCreate方法呢，为什么会在onPause()方法中保存一些当前Activity中的变化，要弄明白这些就要先了解Activity的生命周期，也就是一个Activity才开始到结束都要经过那些状态，下面通过一个例子了解Activity的\n声明周期.\n\n\n\n\n\n## 一：Activity的生命周期方法\n\n\nAndroid提供了很多Activity的生命周期方法，比如我们常用的onCreate、onPause、onResume等。这里主要介绍粗粒度的周期方法，诸如onPostCreate、onPostResume等这些细粒度的周期方法可以参考Android的API文档，在你需要更细层次的控制的时候可以使用这些细粒度的方法。粗粒度的周期方法有以下几个：onCreate()、onStart()、onResume()、onPause()、onStop()、onDestroy()，从名字上就可以看出来这些方法在什么时候执行。\n\n\n## 二：测试Activity的生命周期方法的执行顺序\n\n\n为了能更明白上这几个周期放的执行顺序，我们新建一个HelloWorld项目，在Activity中覆盖这几个方法，打印出日志就可以看出来执行顺序了\n\n\n\n\t\n  1. 新建HelloWorld项目，详细步骤可以参见：\n[Android第一个Android应用，HelloWorld](/2010/11/13/android-helloworld.html)\n\n\t\n  2. 修改main.xml内容为：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <TextView  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:text=\"第一个Activity\"\n        />\n    <Button \n    \tandroid:id=\"@+id/second\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"\n    \tandroid:text=\"打开第二个Activity\"/>\n    </LinearLayout>\n\n\n这里主要是为增加一个文本显示和一个按钮用于显示信息和操作。\n\n\t\n  3. 新建布局文件second.xml，内容如下：\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:orientation=\"vertical\"\n      android:layout_width=\"fill_parent\"\n      android:layout_height=\"fill_parent\">\n      <TextView  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:text=\"第二个Activity\"\n        />\n    <Button \n    \tandroid:id=\"@+id/exit\"\n    \tandroid:layout_width=\"wrap_content\"\n    \tandroid:layout_height=\"wrap_content\"\n    \tandroid:text=\"退出\"/>\n    </LinearLayout>\n\n\n这里主要是为增加一个文本显示和一个退出按钮用于退出当前Activity。\n\n\t\n  4. 新建一个Activity，名字为SecondActivity，内容如下:\n\n    \n    public class SecondActivity extends Activity {\n    \tprivate final static String TAG=\"SecondActivity\";\n    \t@Override\n    \tprotected void onCreate(Bundle savedInstanceState) {\n    \t\tsuper.onCreate(savedInstanceState);\n    \t\tLog.v(TAG, \"onCreate\");\n    \t\tsetContentView(R.layout.second);\n    \t\t//退出按钮\n    \t\tButton btnExit=(Button)findViewById(R.id.exit);\n    \t\t//为退出按钮设置单击事件\n    \t\tbtnExit.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tfinish();//关闭当前Activity，也就是退出\n    \t\t\t}\n    \t\t});\n    \t}\n    \t@Override\n    \tprotected void onStart() {\n    \t\tsuper.onStart();\n    \t\tLog.v(TAG, \"onStart\");\n    \t}\n    \t@Override\n    \tprotected void onResume() {\n    \t\tsuper.onResume();\n    \t\tLog.v(TAG, \"onResume\");\n    \t}\n    \t@Override\n    \tprotected void onPause() {\n    \t\tsuper.onPause();\n    \t\tLog.v(TAG, \"onPause\");\n    \t}\n    \t@Override\n    \tprotected void onStop() {\n    \t\tsuper.onStop();\n    \t\tLog.v(TAG, \"onStop\");\n    \t}\n    \t@Override\n    \tprotected void onDestroy() {\n    \t\tsuper.onDestroy();\n    \t\tLog.v(TAG, \"onDestroy\");\n    \t}\n    \n    }\n\n\n我在各个周期方法了都加了日志信息，便于跟踪Activity的运行过程\n\n\t\n  5. 修改HelloWorld类，内容如下：\n\n    \n    public class HelloWorld extends Activity {\n    \tprivate final static String TAG=\"HelloWorld\";\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            Log.v(TAG, \"onCreate\");\n            setContentView(R.layout.main);\n            //打开第二个Activity的按钮\n            Button btnSecond=(Button)findViewById(R.id.second);\n            //设置单击事件\n            btnSecond.setOnClickListener(new OnClickListener() {\n    \t\t\t@Override\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tstartActivity(new Intent(HelloWorld.this,SecondActivity.class));\n    \t\t\t\tfinish();//关闭当前Activity\n    \t\t\t}\n    \t\t});\n        }\n    \t@Override\n    \tprotected void onStart() {\n    \t\tsuper.onStart();\n    \t\tLog.v(TAG, \"onStart\");\n    \t}\n    \t@Override\n    \tprotected void onResume() {\n    \t\tsuper.onResume();\n    \t\tLog.v(TAG, \"onResume\");\n    \t}\n    \t@Override\n    \tprotected void onPause() {\n    \t\tsuper.onPause();\n    \t\tLog.v(TAG, \"onPause\");\n    \t}\n    \t@Override\n    \tprotected void onStop() {\n    \t\tsuper.onStop();\n    \t\tLog.v(TAG, \"onStop\");\n    \t}\n    \t@Override\n    \tprotected void onDestroy() {\n    \t\tsuper.onDestroy();\n    \t\tLog.v(TAG, \"onDestroy\");\n    \t}\n    }\n\n\n\n\n\t\n  6. 运行程序，分析结果，发现当程序启动的时候，日志信息为下图:![](http://dl.iteye.com/upload/attachment/349655/baddee2d-f46b-347d-b1f4-10b902def717.png)\n由此可见当打开一个Activity的时候，其周期方法执行顺序为：onCreate()->onStart()->onResume(),现在点击“打开第二个Activity”按钮，看日志的输出如下图:\n\n![](http://dl.iteye.com/upload/attachment/349660/2fcfc919-cae3-36a5-9536-0bae63cc0636.png)\n当应用从Helloworld这个Activity启动SecondActivity的时候，Android会先执行HelloWorld的onPause方法，然后依次执行SecondActivity的onCreate()->onStart()->onResume()方法\n当SecondActivity呈现到屏幕上的时候再一次执行Helloworld的onStop()->onDestroy(),把HelloWorld从Activity栈中移除销毁。这里值得提的就是HelloWorld 中finish方法，因为执行了他所以\nHelloWorld才会从Activity栈中移除销毁，这样当你按“返回”键返回的时候就回不到HelloWorld 这个Activity的界面了，而是直接回到的Android的应用程序列表\n。\n\n\n\n\n## 三：分析结果\n\n\n根据上面例子可见一个Activity在启动的时候会执行onCreate()->onStart()->onResume()，在结束（或离开）的时候会执行onPause()->onStop()->onDestroy(),这就是一个Activity的生命周期。\n因此我们要在onCreate方法里把Activity的需要的东西准备好，也就是初始化；在onResume里对Activity里的东西做一些调整；在onPause做一些清理和保存工作(保存持久状态),因为这是最后的\n机会，因为onPause完成之前Android不会结束托管Activity类的进程，而之后进程可能被结束。总结一下这几个周期方法的作用：\n\n\n\n\t\n  1. onCreate():创建Activity调用，用于Activity的初始化，还有个Bundle类型的参数，可以访问以前存储的状态。\n\n\t\n  2. onStart():Activity在屏幕上对用户可见时调用\n\n\t\n  3. onResume():Activity开始和用户交互的时候调用，这时该Activity是在Activity栈的顶部。\n\n\t\n  4. onPause():Activity被暂停时调用，也就是你要对你能看到的这个Activity说byebye的时候调用,这里可以做一些清理和保存工作\n\n\t\n  5. onStop():Activity被停止或者Activity变成不可见时调用\n\n\t\n  6. onDestroy():Activity被从内存中移除，一般发生在执行finish方法时或者Android回收内存的时候\n\n\n好了，最后让我们看一个API提供的Activity的状态图吧，看了他相信你对Activity的生命周期会更了解，如下图：\n\n![](http://dl.iteye.com/upload/attachment/349672/df78b0d1-8998-38ce-a5b7-95632d1192ac.png)\n\n\n## 四：小结\n\n\n这节主要是通过一个例子分析Activity声明周期，并对常用生命周期方法做了一些说明，应该什么时候使用他们。到这里Android的很基础的东西已经说完了，\n下面就直接Android的UI组件介绍了。。\n\n下期预告：TextView的介绍--包含跑马灯效果\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvna0053z1n1xqjtufsr"},{"author":"飞雪无情","comments":1,"date":"2010-11-15T17:12:19.000Z","layout":"post","slug":"android-project-directory-structure","title":"Android项目的目录结构","wordpress_id":121,"_content":"\n这两天家里晚上断网，不能晚上写了，请各位读官见谅。上一次我们使用ADT创建了一个Android的HelloWorld项目，并且介绍了模拟器以及模拟器的配置，这节就重点讲讲Android项目的目录结构，看看和我们常见的Java项目的目录结构有什么不同。\n\n\n\n\n## 一：Android项目的目录结构\n\n\n\n\n\n\t\n  1. Android项目结构概览。其实Android项目的目录结构和Java的差不多，没有太大变化，如下图：\n![](http://dl.iteye.com/upload/attachment/348966/4a17123a-21bf-335f-8d0a-3e81b69531b1.png)\n\n\t\n  2. 可以看到src文件夹里的是源文件，Android2.2是引用的类库，这些和java的都一样，那么下面的这个gen是什么呢？这个里面的类就是ADT自动生成的啦，一般只有一个R.java文件，是不能修改的，那么他是怎么生成的呢，看到下面的res文件夹了吗？R.java就是根据资源文件夹res\n生成的,R.java里放的就是res中资源文件索引，用一个常量标记res中的一个资源文件，便于我们在代码中引用。\n\n\t\n  3. 现在让我们看看res文件夹，这下面又有几种类别，其中drawable是放图片的，有drawable-hdpi,drawable-ldpi,drawable-mdpi\n之分，对应的是高密度图片，低密度图片，和中等密度的图片，如果你要使用一个图片，你根据密度的不同做了三种相同的图片分别放到这三个文件夹里，那么你的应用运行在不同分辨率机器上的时候，就会根据该机器的分辨率自动选择合适的图片，怎么样智能吧！下图是密度和手机尺寸对应关系表。\n![](http://dl.iteye.com/upload/attachment/348968/7e81aab5-3172-310d-a41f-8c68742225c0.png)\nLayout中放的就是布局文件了，Android支持通过xml生成视图，这样视图就和逻辑控制的代码分离了便于管理。\nValues中放的就是我们常用的字符串，颜色值，数组等\n其实资源文件还有多种，这里生成的HelloWorld结构中没有，比如动画,菜单等。\n接下来的这个AndroidManifest.xml很重要，每个Android项目都有一个，这是Android的配置文件，我们可以在这里配置应用的属性，定义\nActivity，声明使用的权限等等，这里就不具体介绍，后面的章节会讲到default.properties也是一个配置文件。\n\n\n\n\n## 二：Android项目文件的具体讲解\n\n\n\n\n\n\t\n  1. 首先看这个HelloWorld类。\n\n    \n    public class HelloWorld extends Activity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n        }\n    }\n\n\n他继承了Activity，前面讲了，一个Activity可以想象成一个手机的屏幕，用于展示一屏的内容，所以所有要展示内容的屏幕都要继承Activity才能实现，接着覆盖了onCreate()方法对该Activity进行初始化setContentView(R.layout.main);\n设置了使用main.xml这个布局文件作为当前Activity的内容展示.main.xml就是放在res下，layout下面的文件xml布局文件,\n我们可以直接使用R.layout.main进行直接的引用他，这也是Android亮点的地方，省得我们为了引用一个xml文件再使用File类去读取，我们要做的只是把这个xml文件的索引给Android，他会自动的帮我们找到它并使用.\n\n\t\n  2. main.xml布局文件\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <TextView  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:text=\"@string/hello\"\n        />\n    </LinearLayout>\n\n\n布局文件的内容不多,开始就是一个LinearLayout组件的定义，然后在这个LinearLayout放了一个用于显示文字的TextView。现在来看一下几个参数:\n\n\t\n    * LinearLayout一个线性布局面板，只能垂直和水平布局，android:orientation=\"vertical\"代表里面的子元素只能垂直排列，而使用android:orientation=\"horizontal\"就标识里面的子元素水平排列..\n\n\t\n    * android:layout_width定义当前视图占的宽度，这里是fill_parent即为充满整个屏幕。而设置成wrap_content会根据当前视图的大小只能的改变宽度\n\n\t\n    * android:layout_height是定义视图的高度，这里也是填充整个屏幕。而设置成wrap_content会根据当前视图的大小只能的改变高度。\n\n\t\n    * android:text是这是TextView要显示的文本，可以是字符串，也可以是一个字符串的引用，这里是一个引用，引用的是strings.xml定义好的名字为hello的字符串\n\n\n\n\n\t\n  3. string.xml介绍。\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n        <string name=\"hello\">Hello World, HelloWorld!</string>\n        <string name=\"app_name\">HelloWorld</string>\n    </resources>\n\n\n这里我们看看就明白了，只要是定义一个个的K-V的键值对，供其他地方使用。比如上面的main中对hello的引用。这对字符的统一管理和国际化有很大的意义。\n\n\t\n  4. AndroidManifest.xml的介绍\n\n    \n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.flysnow\"\n          android:versionCode=\"1\"\n          android:versionName=\"1.0\">\n        <application android:icon=\"@drawable/icon\" android:label=\"@string/app_name\">\n            <activity android:name=\".HelloWorld\"\n                      android:label=\"@string/app_name\">\n                <intent-filter>\n                    <action android:name=\"android.intent.action.MAIN\" />\n                    <category android:name=\"android.intent.category.LAUNCHER\" />\n                </intent-filter>\n            </activity>\n    \n        </application>\n        <uses-sdk android:minSdkVersion=\"8\" />\n    \n    </manifest>\n\n\n这是项目的重要配置文件，诸如Activity，权限，Intent等都在这里配置\n\n\t\n    * Package:定义了该应用的包。\n\n\t\n    * android:versioCode定义了应用的版本号\n\n\t\n    * android:versionName定义了应用的版本名字\n\n\t\n    * application标签定义了一个应用，一个项目最多有一个Application标签。\n\n\t\n    * android:icon=\"@drawable/icon\"定义了应用的图标引用资源文件中的icon图片\n\n\t\n    * android:label=\"@string/app_name\"定义了应用的名称\n\n\t\n    * activity标签定义了一个Activity，你的每一个Activity必须在这里定义，否则不能运行.\n\n\t\n    * Android:name定义了Activity的类名,这里的.HelloWorld是以上面的Package定义为基础的，也就是Package(com.flysnow)加上这个android:name(.HelloWorld)要能定位到这个Activity(com.flysnow.HelloWorld)，否则就是找不到.\n\n\t\n    * android:label定义了该Activity的标题\n\n\t\n    * intent-filter定义一个Intent过滤器，用于标记对应的Activity，以便Android系统能找到该Activity，定义的是隐性的Intent，主要使用两个子标签action和category来区分每个Intent.\n\n\n最后的 <uses-sdk android:minSdkVersion=_\"8\"_ /> 就是定义应用的最低 SDK 的级别\n\n\n三：小结\n\n为了把Android项目的各个部分说清楚，啰嗦的多了一点，希望个为看官耐心看完.\n","source":"_posts/2010-11-16-android-project-directory-structure.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2010-11-16 01:12:19+00:00\nlayout: post\nslug: android-project-directory-structure\ntitle: Android项目的目录结构\nwordpress_id: 121\ncategories:\n- Android\ntags:\n- Android\n---\n\n这两天家里晚上断网，不能晚上写了，请各位读官见谅。上一次我们使用ADT创建了一个Android的HelloWorld项目，并且介绍了模拟器以及模拟器的配置，这节就重点讲讲Android项目的目录结构，看看和我们常见的Java项目的目录结构有什么不同。\n\n\n\n\n## 一：Android项目的目录结构\n\n\n\n\n\n\t\n  1. Android项目结构概览。其实Android项目的目录结构和Java的差不多，没有太大变化，如下图：\n![](http://dl.iteye.com/upload/attachment/348966/4a17123a-21bf-335f-8d0a-3e81b69531b1.png)\n\n\t\n  2. 可以看到src文件夹里的是源文件，Android2.2是引用的类库，这些和java的都一样，那么下面的这个gen是什么呢？这个里面的类就是ADT自动生成的啦，一般只有一个R.java文件，是不能修改的，那么他是怎么生成的呢，看到下面的res文件夹了吗？R.java就是根据资源文件夹res\n生成的,R.java里放的就是res中资源文件索引，用一个常量标记res中的一个资源文件，便于我们在代码中引用。\n\n\t\n  3. 现在让我们看看res文件夹，这下面又有几种类别，其中drawable是放图片的，有drawable-hdpi,drawable-ldpi,drawable-mdpi\n之分，对应的是高密度图片，低密度图片，和中等密度的图片，如果你要使用一个图片，你根据密度的不同做了三种相同的图片分别放到这三个文件夹里，那么你的应用运行在不同分辨率机器上的时候，就会根据该机器的分辨率自动选择合适的图片，怎么样智能吧！下图是密度和手机尺寸对应关系表。\n![](http://dl.iteye.com/upload/attachment/348968/7e81aab5-3172-310d-a41f-8c68742225c0.png)\nLayout中放的就是布局文件了，Android支持通过xml生成视图，这样视图就和逻辑控制的代码分离了便于管理。\nValues中放的就是我们常用的字符串，颜色值，数组等\n其实资源文件还有多种，这里生成的HelloWorld结构中没有，比如动画,菜单等。\n接下来的这个AndroidManifest.xml很重要，每个Android项目都有一个，这是Android的配置文件，我们可以在这里配置应用的属性，定义\nActivity，声明使用的权限等等，这里就不具体介绍，后面的章节会讲到default.properties也是一个配置文件。\n\n\n\n\n## 二：Android项目文件的具体讲解\n\n\n\n\n\n\t\n  1. 首先看这个HelloWorld类。\n\n    \n    public class HelloWorld extends Activity {\n        /** Called when the activity is first created. */\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.main);\n        }\n    }\n\n\n他继承了Activity，前面讲了，一个Activity可以想象成一个手机的屏幕，用于展示一屏的内容，所以所有要展示内容的屏幕都要继承Activity才能实现，接着覆盖了onCreate()方法对该Activity进行初始化setContentView(R.layout.main);\n设置了使用main.xml这个布局文件作为当前Activity的内容展示.main.xml就是放在res下，layout下面的文件xml布局文件,\n我们可以直接使用R.layout.main进行直接的引用他，这也是Android亮点的地方，省得我们为了引用一个xml文件再使用File类去读取，我们要做的只是把这个xml文件的索引给Android，他会自动的帮我们找到它并使用.\n\n\t\n  2. main.xml布局文件\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        >\n    <TextView  \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:text=\"@string/hello\"\n        />\n    </LinearLayout>\n\n\n布局文件的内容不多,开始就是一个LinearLayout组件的定义，然后在这个LinearLayout放了一个用于显示文字的TextView。现在来看一下几个参数:\n\n\t\n    * LinearLayout一个线性布局面板，只能垂直和水平布局，android:orientation=\"vertical\"代表里面的子元素只能垂直排列，而使用android:orientation=\"horizontal\"就标识里面的子元素水平排列..\n\n\t\n    * android:layout_width定义当前视图占的宽度，这里是fill_parent即为充满整个屏幕。而设置成wrap_content会根据当前视图的大小只能的改变宽度\n\n\t\n    * android:layout_height是定义视图的高度，这里也是填充整个屏幕。而设置成wrap_content会根据当前视图的大小只能的改变高度。\n\n\t\n    * android:text是这是TextView要显示的文本，可以是字符串，也可以是一个字符串的引用，这里是一个引用，引用的是strings.xml定义好的名字为hello的字符串\n\n\n\n\n\t\n  3. string.xml介绍。\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n        <string name=\"hello\">Hello World, HelloWorld!</string>\n        <string name=\"app_name\">HelloWorld</string>\n    </resources>\n\n\n这里我们看看就明白了，只要是定义一个个的K-V的键值对，供其他地方使用。比如上面的main中对hello的引用。这对字符的统一管理和国际化有很大的意义。\n\n\t\n  4. AndroidManifest.xml的介绍\n\n    \n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.flysnow\"\n          android:versionCode=\"1\"\n          android:versionName=\"1.0\">\n        <application android:icon=\"@drawable/icon\" android:label=\"@string/app_name\">\n            <activity android:name=\".HelloWorld\"\n                      android:label=\"@string/app_name\">\n                <intent-filter>\n                    <action android:name=\"android.intent.action.MAIN\" />\n                    <category android:name=\"android.intent.category.LAUNCHER\" />\n                </intent-filter>\n            </activity>\n    \n        </application>\n        <uses-sdk android:minSdkVersion=\"8\" />\n    \n    </manifest>\n\n\n这是项目的重要配置文件，诸如Activity，权限，Intent等都在这里配置\n\n\t\n    * Package:定义了该应用的包。\n\n\t\n    * android:versioCode定义了应用的版本号\n\n\t\n    * android:versionName定义了应用的版本名字\n\n\t\n    * application标签定义了一个应用，一个项目最多有一个Application标签。\n\n\t\n    * android:icon=\"@drawable/icon\"定义了应用的图标引用资源文件中的icon图片\n\n\t\n    * android:label=\"@string/app_name\"定义了应用的名称\n\n\t\n    * activity标签定义了一个Activity，你的每一个Activity必须在这里定义，否则不能运行.\n\n\t\n    * Android:name定义了Activity的类名,这里的.HelloWorld是以上面的Package定义为基础的，也就是Package(com.flysnow)加上这个android:name(.HelloWorld)要能定位到这个Activity(com.flysnow.HelloWorld)，否则就是找不到.\n\n\t\n    * android:label定义了该Activity的标题\n\n\t\n    * intent-filter定义一个Intent过滤器，用于标记对应的Activity，以便Android系统能找到该Activity，定义的是隐性的Intent，主要使用两个子标签action和category来区分每个Intent.\n\n\n最后的 <uses-sdk android:minSdkVersion=_\"8\"_ /> 就是定义应用的最低 SDK 的级别\n\n\n三：小结\n\n为了把Android项目的各个部分说清楚，啰嗦的多了一点，希望个为看官耐心看完.\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvnc0056z1n1ltj3m6zs"},{"author":"飞雪无情","comments":1,"date":"2010-11-13T06:01:04.000Z","layout":"post","slug":"android-helloworld","title":"第一个Android应用，HelloWorld","wordpress_id":139,"_content":"\n这节主要内容是使用ADT创建一个Helloword实例，并进行概要分析，中间会有AVD的创建。\n\n\n\n\n## 一：使用ADT创建Helloword应用\n\n\n\n\n使用ADT我们能很方便的创建一个Android的Helloworld应用，关于ADT的配置请看[\n](/2010/11/11/setup-android-for-window.html)\n\n\n\n\n[Window下搭建开发平台](/2010/11/11/setup-android-for-window.html)\n\n\n\n\n这里只讲ADT创建Android应用，关于CMD下的ant方式请看Android开发手册。\n\n\n\n\n\n\n\t\n  1. 打开Eclipse工具，新建一个项目->Others->Android->Android Project然后点击Next进入下一步.\n![](http://dl.iteye.com/upload/attachment/347774/45909298-5921-3eb6-a1dd-71012dd3408b.png)\n\n\n\n\t\n  2. 在Project name中输入Helloword，Build Target的列表里选择Android2.2，在Application name输入应用的名字Helloworld ，然后在Package name输入你的应用的包名com.flysnow.helloworld,Create Activity里输入HelloWorld，min SDK输入8.这里我们不创建测试工程，点击finsh就完成了项目的创建。\n![](http://dl.iteye.com/upload/attachment/347776/e4946ab1-4525-37fe-b86a-92e9fdb96ac8.png)\n\n![](http://dl.iteye.com/upload/attachment/347778/d7b19fac-77e5-37d4-8774-709cdbde2f6d.png)\n\n\t\n  3. ![](http://dl.iteye.com/upload/attachment/347780/703b6595-7366-35a5-89ac-46253c495361.png)\nActivity是Android的主要元素，你可以把Activity理解为一个手机屏幕界面，一个Android应用是有多个Activity组成的，也就是多个界面。min SDK Version就是你的应用最低运行在什么API等级的手机上。Android的API有7个等级。下面是API等级和Android版本对应列表\n![](http://dl.iteye.com/upload/attachment/347782/dcac6a13-c363-3aef-b729-01a03c1b256f.png)\n\n\n\n\n## 二：创建AVD\n\n\n\n\n一个Android要想运行起来必须要有一个环境，这个环境就是模拟器。使用 AVD manager可以轻松的创建一个AVD（配置好的模拟器）。\n\n\n\n\n\n\n\t\n  1. 单击Eclipse工具栏上的AVD Manager图标打开AVD Manager\n\n\n![](http://dl.iteye.com/upload/attachment/347786/22416f00-c704-34e5-ace0-98a5402f381b.png)\n\n\n\n\t\n  2. 点击右侧的“New”按钮打开创建AVD界面。在Name输入一个AVD的名字，这里使用Android2.2以注明是使用的是2.2版本的SDK，好的命名容易区分。Target出选择Android 2.2-API 8接着创建一个100M的SD卡，用于以后装一些注入音乐视频之类的文件。，最后就是在Skin选择皮肤了，就是你打算让你的模拟器长社么样，这里使用默认的就好，然后点击Create AVD就创建了一个AVD，这会有一段时间（特别是SD卡大的时候），之间最好别有任何操作，等会就好。\n![](http://dl.iteye.com/upload/attachment/347793/0c9c139a-29fe-37dd-ac98-d1d57142489b.png)\n\n\n\n\n## 三：运行Helloword应用\n\n\n\n\n有个AVD我们就可以运行Android应用了。找到我们的Helloword的项目，右击选择“Run”，选择Android Application 就可以运行Helloword应用了，这个过程有点长，稍等一下就可以看到模拟器的界面了。。好了让我们看看多么漂亮。\n![](http://dl.iteye.com/upload/attachment/347795/1a3fcead-cd37-3058-89b0-4204de13f585.png)\n\n\n\n\n有的读官说了怎么还看不到我们自己的Helloword应用运行的效果啊，这是应为我们的模拟器还处于锁定状态，我们都知道手机都可以加键盘锁的，有的是按通话键打开，有的是按星号打开，但是我们的Android模拟器是滑动打开的，让我们用鼠标左键按住屏幕上的“锁”图标，然后向右滑动，然后松开鼠标，ok，打开了，很绚丽吧，等一会就看到我们的Helloword应用的效果了。\n![](http://dl.iteye.com/upload/attachment/347799/291df35a-46b6-3909-ab4b-c0a2f1bbe353.png)\n\n\n\n\n\n## 四：Android 模拟器的一些设置和小技巧\n\n\n\n\n\n\t\n  1. 更改模拟器语言为中文。模拟器默认是英文的，我们需要设置成中文，这样看着才方便。我们可以通过Android的语言设置达到这个目的。在模拟器的菜单中找到Setting，然后向下滚动找到Language&keyboard单击。\n![](http://dl.iteye.com/upload/attachment/347801/15c5b93e-d8ca-3df3-9040-ae41af1c3a47.png)\n然后在打开的界面的最上面的找到Select Language单击，然后打开一个语言选择列表，找到中文(简体)选择就ok了。。你的模拟器就变成中文的啦。。\n![](http://dl.iteye.com/upload/attachment/347803/a30de346-b74a-3b45-92e7-365039647e74.png)\n\n\n\t\n  2. 有人说我设置成中文后，在输入文字的地方怎么不能输入中文啊。其实这是因为模拟器默认的输入法是Android 键盘。模拟器自带的有谷歌输入法，我们只要选择谷歌输入法就可以输入中文了。在你输入文字的文本框处长按鼠标，会弹出一个“编辑文字”的弹出框，\n![](http://dl.iteye.com/upload/attachment/347805/0e7db327-c2c0-3cee-87b6-b902b18add26.png)\n选择输入法，就可以看到输入法列表了，有“Android 键盘，谷歌输入法”，还有一个日本的输入法。\n![](http://dl.iteye.com/upload/attachment/347808/6bbe06c4-6b5d-34df-a1a6-7cf69b6a5d57.png)\n我们选择“谷歌输入法”即可。。这时候可以输入中文啦。。\n\n\t\n  3. 由于模拟器每次启动都比较慢，我们可以在打开模拟器之后不要再关闭，这样每次运行Android应用 ADT就会自动使用这个模拟器，这样就不用每次都启动了。。\n\n\t\n  4. Min SDK Version和模拟器。还记得我们创建Helloworld应用时最后输入的Min SDK Version吗？我们输入的是8，这个数字代表我们这个应用只能运行在Android SDk版本为2.2的机器上。这个Min SDK Version和模拟器也有关系的，如果你的机器上有多个模拟器，且每个Android SDK版本的模拟器都有，那么当你运行应用的时候，ADT就会根据Min SDK Version的值选择相应版本的模拟器。加入你的Min SDK Version是3，而且你已经创建了Android1.5的模拟器，那么你运行应用的时候，ADT就会打开Android版本的那个模拟器。。方便我们测试，智能吧。。\n\n\n\n\n## 五：小结\n\n\n\n\n这一节主要讲的就是怎么创建一个最简单的Android应用，并且对模拟器的创建和一些设置、常用的技巧做了一些介绍，目的就是尽量的熟悉ADT的创建和模拟器的使用。\n","source":"_posts/2010-11-13-android-helloworld.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2010-11-13 14:01:04+00:00\nlayout: post\nslug: android-helloworld\ntitle: 第一个Android应用，HelloWorld\nwordpress_id: 139\ncategories:\n- Android\ntags:\n- Android\n---\n\n这节主要内容是使用ADT创建一个Helloword实例，并进行概要分析，中间会有AVD的创建。\n\n\n\n\n## 一：使用ADT创建Helloword应用\n\n\n\n\n使用ADT我们能很方便的创建一个Android的Helloworld应用，关于ADT的配置请看[\n](/2010/11/11/setup-android-for-window.html)\n\n\n\n\n[Window下搭建开发平台](/2010/11/11/setup-android-for-window.html)\n\n\n\n\n这里只讲ADT创建Android应用，关于CMD下的ant方式请看Android开发手册。\n\n\n\n\n\n\n\t\n  1. 打开Eclipse工具，新建一个项目->Others->Android->Android Project然后点击Next进入下一步.\n![](http://dl.iteye.com/upload/attachment/347774/45909298-5921-3eb6-a1dd-71012dd3408b.png)\n\n\n\n\t\n  2. 在Project name中输入Helloword，Build Target的列表里选择Android2.2，在Application name输入应用的名字Helloworld ，然后在Package name输入你的应用的包名com.flysnow.helloworld,Create Activity里输入HelloWorld，min SDK输入8.这里我们不创建测试工程，点击finsh就完成了项目的创建。\n![](http://dl.iteye.com/upload/attachment/347776/e4946ab1-4525-37fe-b86a-92e9fdb96ac8.png)\n\n![](http://dl.iteye.com/upload/attachment/347778/d7b19fac-77e5-37d4-8774-709cdbde2f6d.png)\n\n\t\n  3. ![](http://dl.iteye.com/upload/attachment/347780/703b6595-7366-35a5-89ac-46253c495361.png)\nActivity是Android的主要元素，你可以把Activity理解为一个手机屏幕界面，一个Android应用是有多个Activity组成的，也就是多个界面。min SDK Version就是你的应用最低运行在什么API等级的手机上。Android的API有7个等级。下面是API等级和Android版本对应列表\n![](http://dl.iteye.com/upload/attachment/347782/dcac6a13-c363-3aef-b729-01a03c1b256f.png)\n\n\n\n\n## 二：创建AVD\n\n\n\n\n一个Android要想运行起来必须要有一个环境，这个环境就是模拟器。使用 AVD manager可以轻松的创建一个AVD（配置好的模拟器）。\n\n\n\n\n\n\n\t\n  1. 单击Eclipse工具栏上的AVD Manager图标打开AVD Manager\n\n\n![](http://dl.iteye.com/upload/attachment/347786/22416f00-c704-34e5-ace0-98a5402f381b.png)\n\n\n\n\t\n  2. 点击右侧的“New”按钮打开创建AVD界面。在Name输入一个AVD的名字，这里使用Android2.2以注明是使用的是2.2版本的SDK，好的命名容易区分。Target出选择Android 2.2-API 8接着创建一个100M的SD卡，用于以后装一些注入音乐视频之类的文件。，最后就是在Skin选择皮肤了，就是你打算让你的模拟器长社么样，这里使用默认的就好，然后点击Create AVD就创建了一个AVD，这会有一段时间（特别是SD卡大的时候），之间最好别有任何操作，等会就好。\n![](http://dl.iteye.com/upload/attachment/347793/0c9c139a-29fe-37dd-ac98-d1d57142489b.png)\n\n\n\n\n## 三：运行Helloword应用\n\n\n\n\n有个AVD我们就可以运行Android应用了。找到我们的Helloword的项目，右击选择“Run”，选择Android Application 就可以运行Helloword应用了，这个过程有点长，稍等一下就可以看到模拟器的界面了。。好了让我们看看多么漂亮。\n![](http://dl.iteye.com/upload/attachment/347795/1a3fcead-cd37-3058-89b0-4204de13f585.png)\n\n\n\n\n有的读官说了怎么还看不到我们自己的Helloword应用运行的效果啊，这是应为我们的模拟器还处于锁定状态，我们都知道手机都可以加键盘锁的，有的是按通话键打开，有的是按星号打开，但是我们的Android模拟器是滑动打开的，让我们用鼠标左键按住屏幕上的“锁”图标，然后向右滑动，然后松开鼠标，ok，打开了，很绚丽吧，等一会就看到我们的Helloword应用的效果了。\n![](http://dl.iteye.com/upload/attachment/347799/291df35a-46b6-3909-ab4b-c0a2f1bbe353.png)\n\n\n\n\n\n## 四：Android 模拟器的一些设置和小技巧\n\n\n\n\n\n\t\n  1. 更改模拟器语言为中文。模拟器默认是英文的，我们需要设置成中文，这样看着才方便。我们可以通过Android的语言设置达到这个目的。在模拟器的菜单中找到Setting，然后向下滚动找到Language&keyboard单击。\n![](http://dl.iteye.com/upload/attachment/347801/15c5b93e-d8ca-3df3-9040-ae41af1c3a47.png)\n然后在打开的界面的最上面的找到Select Language单击，然后打开一个语言选择列表，找到中文(简体)选择就ok了。。你的模拟器就变成中文的啦。。\n![](http://dl.iteye.com/upload/attachment/347803/a30de346-b74a-3b45-92e7-365039647e74.png)\n\n\n\t\n  2. 有人说我设置成中文后，在输入文字的地方怎么不能输入中文啊。其实这是因为模拟器默认的输入法是Android 键盘。模拟器自带的有谷歌输入法，我们只要选择谷歌输入法就可以输入中文了。在你输入文字的文本框处长按鼠标，会弹出一个“编辑文字”的弹出框，\n![](http://dl.iteye.com/upload/attachment/347805/0e7db327-c2c0-3cee-87b6-b902b18add26.png)\n选择输入法，就可以看到输入法列表了，有“Android 键盘，谷歌输入法”，还有一个日本的输入法。\n![](http://dl.iteye.com/upload/attachment/347808/6bbe06c4-6b5d-34df-a1a6-7cf69b6a5d57.png)\n我们选择“谷歌输入法”即可。。这时候可以输入中文啦。。\n\n\t\n  3. 由于模拟器每次启动都比较慢，我们可以在打开模拟器之后不要再关闭，这样每次运行Android应用 ADT就会自动使用这个模拟器，这样就不用每次都启动了。。\n\n\t\n  4. Min SDK Version和模拟器。还记得我们创建Helloworld应用时最后输入的Min SDK Version吗？我们输入的是8，这个数字代表我们这个应用只能运行在Android SDk版本为2.2的机器上。这个Min SDK Version和模拟器也有关系的，如果你的机器上有多个模拟器，且每个Android SDK版本的模拟器都有，那么当你运行应用的时候，ADT就会根据Min SDK Version的值选择相应版本的模拟器。加入你的Min SDK Version是3，而且你已经创建了Android1.5的模拟器，那么你运行应用的时候，ADT就会打开Android版本的那个模拟器。。方便我们测试，智能吧。。\n\n\n\n\n## 五：小结\n\n\n\n\n这一节主要讲的就是怎么创建一个最简单的Android应用，并且对模拟器的创建和一些设置、常用的技巧做了一些介绍，目的就是尽量的熟悉ADT的创建和模拟器的使用。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvnd0059z1n144ynoy8i"},{"author":"飞雪无情","comments":1,"date":"2010-11-12T01:26:54.000Z","layout":"post","slug":"android-setup-config-for-linux","title":"Linux下搭建Android开发环境","wordpress_id":140,"_content":"\n上一次说到在window下搭建Android开发环境，总体比较简单。这一次就说说在Linux搭建Android开发环境，这里主要以很流行的Ubuntu 操作系统为例，其他的大同小异。\n\n\n\n\n## 一：准备工作\n\n\n\n\n        其实准备工作和上一篇的window下搭建的差不多，这里不再进行说明，请参见[Window下搭建Android开发环境](/2010/11/11/setup-android-for-window.html)\n需要注意的是JDK以及Eclipse要下载Linux版本的.\n\n\n\n\n\n## 二：JDK配置\n\n\n\n\nJDK的配置网上说的很多了，但是还是有些人配置了之后不起作用，这里我再详细说一下，这里以我的JDK再/usr/locallib/目下下为例，如果你想把你的JDK也放到该目录下，那么使用 sudo cp\n命令拷贝即可。\n\n\n\n\n\n\n\t\n  1. 首先要修改权限。在shell下执行 sudo chmod +x jdk-6u20-linux-i586.bin\n,修改完权限后使用ls查看会发现JDK变成绿色的拉，这就ok了，见下图：\n![](http://dl.iteye.com/upload/attachment/347394/19f38961-b4b7-3727-a526-1f3aae01e107.jpg)\n\n\n\t\n  2. 然后就可以安装了，执行sudo ./jdk-6u20-linux-i586.bin\n就开始安装JDK了，遇到协议和同意协议的时候回车或者输入Y回车即可。\n\n\t\n  3. 安装好后我们就可以开始配置环境变量了。执行 sudo gedit /etc/profile 打开配置文件在文件尾部加入以下文本：\n\n    \n    JAVA_HOME=/usr/local/lib/jdk1.6.0_20\n    JRE_HOME=/usr/local/lib/jdk1.6.0_20/jre\n    CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib\n    PATH=$PATH:$JAVA_HOME/bin:/home/flysnow/bin\n    export PATH JAVA_HOME  JRE_HOME CLASSPATH\n\n\n\n\n\n\n\n保存关闭。。但是这个时候我们输入javac还是会报错的，因为这个配置必须重启才能生效。重启后输入java -version就可以看到版本信息了。\n\n\n\n\n![](http://dl.iteye.com/upload/attachment/347404/f74708b5-b16b-34e9-b9b7-d818bc82bf8a.jpg)\n\n\n\n\n\n\n\t\n  4. JDK安装的最后以下补充。有的时候我们输入java -version 显示并不是Java HotSpot（TM）Client VM，而是其他的诸如Open JDK 什么的,这是因为你机器里默认安装的有其他的JDK，那么我们怎么才能让我们自己的JDK设置成默认的呢。其实很简单，只需要执行以下命令即可。\n\n    \n    update-alternatives --install /usr/bin/java java /usr/local/lib/jdk1.6.0_20/bin/java 500\n    update-alternatives --install /usr/bin/javac javac /usr/local/lib/jdk1.6.0_20/bin/javac 500\n\n\n上面的命令是将我们安装的jdk加入java选单。然后接着执行\n\n    \n    update-alternatives --config java\n\n\n这是为系统选择默认的JDK，也就是我们的。这时候你再执行Java -version就会看到使用的是你自己的JDK了。 注：以及均基于JDK目录在/usr/local/lib下，读官们可以根据自己的实际情况而定.\n\n\n\n\n## 三：Android SDK配置\n\n\n\n\nSDK 的配置和JDK大同小异，比JDK的配置更加简单。这里以SDK目录在~/Dev/Frame/Android下为例进行配置。\n\n\n\n\n\n\n\t\n  1. 首先你已经解压了sdk 目录。然后使用\nsudo gedit /etc/profile\n打开配置文件，加入android后的配置文件应该是如下这样的： \n\n    \n     JAVA_HOME=/usr/local/lib/jdk1.6.0_20\n    ANDROID_HOME=/home/flysnow/Dev/Frame/Android/android-sdk\n    JRE_HOME=/usr/local/lib/jdk1.6.0_20/jre\n    CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib\n    PATH=$PATH:$JAVA_HOME/bin:/home/flysnow/bin:$ANDROID_HOME/tools\n    export PATH JAVA_HOME ANDROID_HOME JRE_HOME CLASSPATH\n\n\n\n\n\n\n\n读官们可以参考的修改自己的。然后保存重启，sdk就配置好了。\n\n\n\n\n\n## 四：Eclipse的安装 ADT的安装 SDK的API，DOC的下载\n\n\n\n\n这些和Window下一样，可以参考\n[Window下搭建Android开发环境](/2010/11/11/setup-android-for-window.html)\n\n\n\n\n\n\n## 五：小结\n\n\n\n\nlinux下和window的配置步骤基本上一样，都是下载软件，配置环境变量等，linux下的难点还是对于shell命令的掌握以及对于环境变量的配置，说白了还是对于linux系统掌握的程度，是否能熟练使用？也就是linux的基本功。\n","source":"_posts/2010-11-12-android-setup-config-for-linux.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2010-11-12 09:26:54+00:00\nlayout: post\nslug: android-setup-config-for0linux\ntitle: Linux下搭建Android开发环境\nwordpress_id: 140\ncategories:\n- Android\ntags:\n- Android\n---\n\n上一次说到在window下搭建Android开发环境，总体比较简单。这一次就说说在Linux搭建Android开发环境，这里主要以很流行的Ubuntu 操作系统为例，其他的大同小异。\n\n\n\n\n## 一：准备工作\n\n\n\n\n        其实准备工作和上一篇的window下搭建的差不多，这里不再进行说明，请参见[Window下搭建Android开发环境](/2010/11/11/setup-android-for-window.html)\n需要注意的是JDK以及Eclipse要下载Linux版本的.\n\n\n\n\n\n## 二：JDK配置\n\n\n\n\nJDK的配置网上说的很多了，但是还是有些人配置了之后不起作用，这里我再详细说一下，这里以我的JDK再/usr/locallib/目下下为例，如果你想把你的JDK也放到该目录下，那么使用 sudo cp\n命令拷贝即可。\n\n\n\n\n\n\n\t\n  1. 首先要修改权限。在shell下执行 sudo chmod +x jdk-6u20-linux-i586.bin\n,修改完权限后使用ls查看会发现JDK变成绿色的拉，这就ok了，见下图：\n![](http://dl.iteye.com/upload/attachment/347394/19f38961-b4b7-3727-a526-1f3aae01e107.jpg)\n\n\n\t\n  2. 然后就可以安装了，执行sudo ./jdk-6u20-linux-i586.bin\n就开始安装JDK了，遇到协议和同意协议的时候回车或者输入Y回车即可。\n\n\t\n  3. 安装好后我们就可以开始配置环境变量了。执行 sudo gedit /etc/profile 打开配置文件在文件尾部加入以下文本：\n\n    \n    JAVA_HOME=/usr/local/lib/jdk1.6.0_20\n    JRE_HOME=/usr/local/lib/jdk1.6.0_20/jre\n    CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib\n    PATH=$PATH:$JAVA_HOME/bin:/home/flysnow/bin\n    export PATH JAVA_HOME  JRE_HOME CLASSPATH\n\n\n\n\n\n\n\n保存关闭。。但是这个时候我们输入javac还是会报错的，因为这个配置必须重启才能生效。重启后输入java -version就可以看到版本信息了。\n\n\n\n\n![](http://dl.iteye.com/upload/attachment/347404/f74708b5-b16b-34e9-b9b7-d818bc82bf8a.jpg)\n\n\n\n\n\n\n\t\n  4. JDK安装的最后以下补充。有的时候我们输入java -version 显示并不是Java HotSpot（TM）Client VM，而是其他的诸如Open JDK 什么的,这是因为你机器里默认安装的有其他的JDK，那么我们怎么才能让我们自己的JDK设置成默认的呢。其实很简单，只需要执行以下命令即可。\n\n    \n    update-alternatives --install /usr/bin/java java /usr/local/lib/jdk1.6.0_20/bin/java 500\n    update-alternatives --install /usr/bin/javac javac /usr/local/lib/jdk1.6.0_20/bin/javac 500\n\n\n上面的命令是将我们安装的jdk加入java选单。然后接着执行\n\n    \n    update-alternatives --config java\n\n\n这是为系统选择默认的JDK，也就是我们的。这时候你再执行Java -version就会看到使用的是你自己的JDK了。 注：以及均基于JDK目录在/usr/local/lib下，读官们可以根据自己的实际情况而定.\n\n\n\n\n## 三：Android SDK配置\n\n\n\n\nSDK 的配置和JDK大同小异，比JDK的配置更加简单。这里以SDK目录在~/Dev/Frame/Android下为例进行配置。\n\n\n\n\n\n\n\t\n  1. 首先你已经解压了sdk 目录。然后使用\nsudo gedit /etc/profile\n打开配置文件，加入android后的配置文件应该是如下这样的： \n\n    \n     JAVA_HOME=/usr/local/lib/jdk1.6.0_20\n    ANDROID_HOME=/home/flysnow/Dev/Frame/Android/android-sdk\n    JRE_HOME=/usr/local/lib/jdk1.6.0_20/jre\n    CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib\n    PATH=$PATH:$JAVA_HOME/bin:/home/flysnow/bin:$ANDROID_HOME/tools\n    export PATH JAVA_HOME ANDROID_HOME JRE_HOME CLASSPATH\n\n\n\n\n\n\n\n读官们可以参考的修改自己的。然后保存重启，sdk就配置好了。\n\n\n\n\n\n## 四：Eclipse的安装 ADT的安装 SDK的API，DOC的下载\n\n\n\n\n这些和Window下一样，可以参考\n[Window下搭建Android开发环境](/2010/11/11/setup-android-for-window.html)\n\n\n\n\n\n\n## 五：小结\n\n\n\n\nlinux下和window的配置步骤基本上一样，都是下载软件，配置环境变量等，linux下的难点还是对于shell命令的掌握以及对于环境变量的配置，说白了还是对于linux系统掌握的程度，是否能熟练使用？也就是linux的基本功。\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvnf005cz1n16z8adcra"},{"author":"飞雪无情","comments":1,"date":"2010-11-10T22:41:25.000Z","layout":"post","slug":"setup-android-for-window","title":"Window下搭建Android开发环境","wordpress_id":22,"_content":"\n<blockquote>自2007年Google发布Android后，Android是越来越火，甚至有超越IPhone的势头。Android的推出，对于我们java开发人员无疑是一件值得庆幸的事情，因为Android的应用是由java开发的，因此，我们java开发人员入门Android比其他语言开发者有很大的优势。本系列教程将有浅到深系统的学习Android，这是我学习的过程，相信也会对你们有所帮助。该系列教程尽量保证每日一更。</blockquote>\n\n\n\n\n### 一：准备工作\n\n\n\n\n\n\t\n  1. JDK1.6.0_13 下载地址[http://java.sun.com/products/archive/index.html](http://java.sun.com/products/archive/index.html)\n\n\t\n  2. Eclipse3.5.2 下载地址[http://www.eclipse.org/downloads/packages/release/galileo/sr2](http://www.eclipse.org/downloads/packages/release/galileo/sr2)\n\n\t\n  3. Android SDK2.2 下载地址[http://developer.android.com/index.html](http://developer.android.com/index.html)\n\n\t\n  4. ADT0.9.9 下载地址[http://developer.android.com/sdk/installing/installing-adt.html](http://developer.android.com/sdk/installing/installing-adt.html)\n\n\t\n  5. 有一定的java基础\n\n\n\n\n### 二：环境配置\n\n\n\n\n\n\t\n  * JDk配置略，不会可以参考网上，很多帖子\n\n\t\n  * SDK Setup启动和设置。下载好Android SDK后，解压放到一个你常用的目录下，然后运行SDK Setup.exe将启动Android SDK and AVD Manager。这里打开后会常遇到的一个问题是“Failed to fetch URL...”，这是因为默认是使用的HTTPS的方式，我们改成HTTP方式就行了。。选择左边窗口的Settings，选中Forece Https://......即可。\n\n\n![android manager https下载方法](/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-300x156.png)\n\n\n\n\t\n  * SDK版本下载。点击Available Packages 选择要安装的API版本以及SDK文档，然后点击“install selected”即可安装。等待一段时间就可以下载好SDK以及相应的文档了。。\n\n\n![android sdk 选择](/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871-300x218.png)\n\n\n\n\t\n  *  Android SDK配置。右击“我的电脑”，选择“属性”-\"高级\"-“环境变量”，新建系统变量,名称为“ANDROID_HOME”，值为你的Android SDK目录，我这里是“H:\\Frame\\android\\android-sdk-windows”，然后把“%ANDROID_HOME%\\tools”加入到PATH环境变量中，这时候你打开CMD输入android就可以看到Android SDK and AVD Manager了。\n\n\n![配置环境变量](/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872-300x170.png)\n\n\n\n\t\n  * 安装和配置ADT。ADT是一个Eclipse插件们用于开发Android应用程序。打开eclipse,安装ADT，在线安装地址为https://dl-ssl.google.com/android/eclipse/ ，也可以下载ADT压缩包安装。安装成功后重启Eclipse，然后选择Preferences->android->点击Browse..选择你的Android SDK所在目录，然后ok即可。\n\n\n![配置adt](/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-300x61.png)\n\n\n### 三：结束语\n\n\n到这里我们的开发环境就配置好了，因为我们有java开发基础，其实很简单，总结起来就三个步骤：\n\n\n\n\t\n  1. 下载JDK，Eclipse，SDK，ADT\n\n\t\n  2. 配置JDK，SDK\n\n\t\n  3. 配置ADT。。\n\n\n\n","source":"_posts/2010-11-11-setup-android-for-window.md","raw":"---\nauthor: 飞雪无情\ncomments: true\ndate: 2010-11-11 06:41:25+00:00\nlayout: post\nslug: setup-android-for-window\ntitle: Window下搭建Android开发环境\nwordpress_id: 22\ncategories:\n- Android\ntags:\n- Android\n---\n\n<blockquote>自2007年Google发布Android后，Android是越来越火，甚至有超越IPhone的势头。Android的推出，对于我们java开发人员无疑是一件值得庆幸的事情，因为Android的应用是由java开发的，因此，我们java开发人员入门Android比其他语言开发者有很大的优势。本系列教程将有浅到深系统的学习Android，这是我学习的过程，相信也会对你们有所帮助。该系列教程尽量保证每日一更。</blockquote>\n\n\n\n\n### 一：准备工作\n\n\n\n\n\n\t\n  1. JDK1.6.0_13 下载地址[http://java.sun.com/products/archive/index.html](http://java.sun.com/products/archive/index.html)\n\n\t\n  2. Eclipse3.5.2 下载地址[http://www.eclipse.org/downloads/packages/release/galileo/sr2](http://www.eclipse.org/downloads/packages/release/galileo/sr2)\n\n\t\n  3. Android SDK2.2 下载地址[http://developer.android.com/index.html](http://developer.android.com/index.html)\n\n\t\n  4. ADT0.9.9 下载地址[http://developer.android.com/sdk/installing/installing-adt.html](http://developer.android.com/sdk/installing/installing-adt.html)\n\n\t\n  5. 有一定的java基础\n\n\n\n\n### 二：环境配置\n\n\n\n\n\n\t\n  * JDk配置略，不会可以参考网上，很多帖子\n\n\t\n  * SDK Setup启动和设置。下载好Android SDK后，解压放到一个你常用的目录下，然后运行SDK Setup.exe将启动Android SDK and AVD Manager。这里打开后会常遇到的一个问题是“Failed to fetch URL...”，这是因为默认是使用的HTTPS的方式，我们改成HTTP方式就行了。。选择左边窗口的Settings，选中Forece Https://......即可。\n\n\n![android manager https下载方法](/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d1587-300x156.png)\n\n\n\n\t\n  * SDK版本下载。点击Available Packages 选择要安装的API版本以及SDK文档，然后点击“install selected”即可安装。等待一段时间就可以下载好SDK以及相应的文档了。。\n\n\n![android sdk 选择](/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15871-300x218.png)\n\n\n\n\t\n  *  Android SDK配置。右击“我的电脑”，选择“属性”-\"高级\"-“环境变量”，新建系统变量,名称为“ANDROID_HOME”，值为你的Android SDK目录，我这里是“H:\\Frame\\android\\android-sdk-windows”，然后把“%ANDROID_HOME%\\tools”加入到PATH环境变量中，这时候你打开CMD输入android就可以看到Android SDK and AVD Manager了。\n\n\n![配置环境变量](/uploads/2013/10/7c61ddbf-2da7-3b62-ba2a-2bcc1d9d15872-300x170.png)\n\n\n\n\t\n  * 安装和配置ADT。ADT是一个Eclipse插件们用于开发Android应用程序。打开eclipse,安装ADT，在线安装地址为https://dl-ssl.google.com/android/eclipse/ ，也可以下载ADT压缩包安装。安装成功后重启Eclipse，然后选择Preferences->android->点击Browse..选择你的Android SDK所在目录，然后ok即可。\n\n\n![配置adt](/uploads/2013/10/5afc0bd8-fe88-3770-a492-aded3c56f0fa-300x61.png)\n\n\n### 三：结束语\n\n\n到这里我们的开发环境就配置好了，因为我们有java开发基础，其实很简单，总结起来就三个步骤：\n\n\n\n\t\n  1. 下载JDK，Eclipse，SDK，ADT\n\n\t\n  2. 配置JDK，SDK\n\n\t\n  3. 配置ADT。。\n\n\n\n","published":1,"updated":"2015-03-19T13:40:30.000Z","photos":[],"link":"","_id":"ci7g9uvng005fz1n1u49asnrm"}],"PostAsset":[],"PostCategory":[{"post_id":"ci7g9uvjd0003z1n1afzyl632","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvji0007z1n1s0tfudc4"},{"post_id":"ci7g9uvjj000az1n1j5aahwgg","category_id":"ci7g9uvjk000bz1n12jh4p5v9","_id":"ci7g9uvjk000ez1n1vfr5qmgm"},{"post_id":"ci7g9uvjm000hz1n1jliwrvqp","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvjn000iz1n1h8wkpkv0"},{"post_id":"ci7g9uvjp000oz1n11kclrvc1","category_id":"ci7g9uvjq000pz1n1lku24j6f","_id":"ci7g9uvjq000sz1n10i11244y"},{"post_id":"ci7g9uvjs000tz1n1738coi0m","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvjt000uz1n13jygwg14"},{"post_id":"ci7g9uvju000wz1n18g7athjq","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvjv000xz1n1o943gb13"},{"post_id":"ci7g9uvjw000zz1n12f1oddhx","category_id":"ci7g9uvjx0010z1n1y06urbxo","_id":"ci7g9uvjy0013z1n1c3kfdstx"},{"post_id":"ci7g9uvk1001cz1n1zplojahy","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvk2001dz1n15wqhrdot"},{"post_id":"ci7g9uvk4001hz1n17qlg2u3i","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvl5001iz1n1f296csdz"},{"post_id":"ci7g9uvl8001oz1n1ceiz47v4","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvl9001pz1n1p2nsb37r"},{"post_id":"ci7g9uvlb001vz1n1bznlwrmt","category_id":"ci7g9uvjx0010z1n1y06urbxo","_id":"ci7g9uvlc001wz1n1e7p7qfwu"},{"post_id":"ci7g9uvle0023z1n16y3uekh1","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvlf0024z1n1a5li9qbb"},{"post_id":"ci7g9uvlg0027z1n1gayfu8jz","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvlh0028z1n1tew578td"},{"post_id":"ci7g9uvlk002az1n1i50gkifp","category_id":"ci7g9uvjx0010z1n1y06urbxo","_id":"ci7g9uvlm002bz1n1n71j4vkj"},{"post_id":"ci7g9uvln002ez1n1lk5om93e","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvlp002fz1n1hvxocv0o"},{"post_id":"ci7g9uvlr002jz1n1jevwimgx","category_id":"ci7g9uvjx0010z1n1y06urbxo","_id":"ci7g9uvlr002kz1n1jn9vahp7"},{"post_id":"ci7g9uvls002mz1n12nbpbjdg","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvlt002nz1n1k4yqd5u8"},{"post_id":"ci7g9uvlu002pz1n1odl56s9k","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvlv002qz1n18tpocvmw"},{"post_id":"ci7g9uvlw002sz1n12qssp3f6","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvlx002tz1n18nmw9u76"},{"post_id":"ci7g9uvly002vz1n1u4lkf6y2","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvlz002wz1n1xd09mabx"},{"post_id":"ci7g9uvm0002yz1n1e626cdza","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvm0002zz1n1248bwzkv"},{"post_id":"ci7g9uvm20032z1n1850st3ym","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvm20033z1n1qvmvkr8q"},{"post_id":"ci7g9uvm30036z1n1f713sykz","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvm40037z1n1okd98lsq"},{"post_id":"ci7g9uvm50039z1n10fcoyiky","category_id":"ci7g9uvjx0010z1n1y06urbxo","_id":"ci7g9uvm6003az1n1qcirar6e"},{"post_id":"ci7g9uvma003cz1n1mk9jzmfn","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvma003dz1n1dus4m50j"},{"post_id":"ci7g9uvmc003hz1n1l29yko2k","category_id":"ci7g9uvjq000pz1n1lku24j6f","_id":"ci7g9uvmc003iz1n1n6eo06qr"},{"post_id":"ci7g9uvmg003oz1n1g9xaxac9","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvmi003pz1n1aes5nejj"},{"post_id":"ci7g9uvmj003rz1n1e7xjudls","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvmk003sz1n1bhpoxndt"},{"post_id":"ci7g9uvml003wz1n17abfolal","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvmm003xz1n1ysy80tfx"},{"post_id":"ci7g9uvmo003zz1n1my78cbfv","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvmp0040z1n1sahpjgl9"},{"post_id":"ci7g9uvmr0043z1n11xqf467x","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvmr0044z1n1c0ga7292"},{"post_id":"ci7g9uvms0047z1n1715yq8am","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvmt0048z1n1u36q6yf5"},{"post_id":"ci7g9uvmu004az1n1wv19ab04","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvmv004bz1n1420y7uni"},{"post_id":"ci7g9uvmw004dz1n1ktci8sfx","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvmx004ez1n14tcwlzde"},{"post_id":"ci7g9uvmy004gz1n1ircbpn3o","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvmz004hz1n1ijyjrjm2"},{"post_id":"ci7g9uvn0004jz1n1ze4httkc","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvn1004kz1n1op5m2i9o"},{"post_id":"ci7g9uvn2004nz1n1a11ydu6f","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvn3004oz1n1zd30kmlq"},{"post_id":"ci7g9uvn3004rz1n1hx7zwv1w","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvn4004sz1n1u9ouz6zq"},{"post_id":"ci7g9uvn5004vz1n1u88c6db9","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvn6004wz1n1fh7vnt4t"},{"post_id":"ci7g9uvn8004zz1n1tnyjet3h","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvn90050z1n1gu22v3t2"},{"post_id":"ci7g9uvna0053z1n1xqjtufsr","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvnb0054z1n1hmeadjhp"},{"post_id":"ci7g9uvnc0056z1n1ltj3m6zs","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvnc0057z1n1d0uh2h0d"},{"post_id":"ci7g9uvnd0059z1n144ynoy8i","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvne005az1n1klcrtne8"},{"post_id":"ci7g9uvnf005cz1n16z8adcra","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvng005dz1n16bdggnbw"},{"post_id":"ci7g9uvng005fz1n1u49asnrm","category_id":"ci7g9uvjg0004z1n1kiwzxvz0","_id":"ci7g9uvnh005gz1n1p6n76xdg"}],"PostTag":[{"post_id":"ci7g9uvjd0003z1n1afzyl632","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvji0008z1n1w87d3rrs"},{"post_id":"ci7g9uvjd0003z1n1afzyl632","tag_id":"ci7g9uvjh0006z1n1g4uqkup6","_id":"ci7g9uvji0009z1n15zhjjb1q"},{"post_id":"ci7g9uvjj000az1n1j5aahwgg","tag_id":"ci7g9uvjk000cz1n1o91w5xj8","_id":"ci7g9uvjl000fz1n1lcjfntk5"},{"post_id":"ci7g9uvjj000az1n1j5aahwgg","tag_id":"ci7g9uvjk000dz1n1atdmcl75","_id":"ci7g9uvjl000gz1n1kzeoc5b2"},{"post_id":"ci7g9uvjm000hz1n1jliwrvqp","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvjn000lz1n1mr0pjpi5"},{"post_id":"ci7g9uvjm000hz1n1jliwrvqp","tag_id":"ci7g9uvjn000jz1n189ud2qtd","_id":"ci7g9uvjo000mz1n1juxv2ck0"},{"post_id":"ci7g9uvjm000hz1n1jliwrvqp","tag_id":"ci7g9uvjn000kz1n1fv68evkj","_id":"ci7g9uvjo000nz1n1cxcev6he"},{"post_id":"ci7g9uvjp000oz1n11kclrvc1","tag_id":"ci7g9uvjq000qz1n1lpwpy92k","_id":"ci7g9uvjq000rz1n1d43gohce"},{"post_id":"ci7g9uvjs000tz1n1738coi0m","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvjt000vz1n1va91tm57"},{"post_id":"ci7g9uvju000wz1n18g7athjq","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvjv000yz1n14kf3pkf9"},{"post_id":"ci7g9uvjw000zz1n12f1oddhx","tag_id":"ci7g9uvjx0011z1n1k2t0tf9q","_id":"ci7g9uvjz0017z1n1v3o3ljzy"},{"post_id":"ci7g9uvjw000zz1n12f1oddhx","tag_id":"ci7g9uvjy0012z1n1woxcucl8","_id":"ci7g9uvjz0018z1n1ndqxrb75"},{"post_id":"ci7g9uvjw000zz1n12f1oddhx","tag_id":"ci7g9uvjy0014z1n1iy1i9kbg","_id":"ci7g9uvjz0019z1n1xbq23ngd"},{"post_id":"ci7g9uvjw000zz1n12f1oddhx","tag_id":"ci7g9uvjy0015z1n1fg76z7ru","_id":"ci7g9uvjz001az1n1bkkh4sf8"},{"post_id":"ci7g9uvjw000zz1n12f1oddhx","tag_id":"ci7g9uvjz0016z1n18eev52o4","_id":"ci7g9uvjz001bz1n1t0xl26l3"},{"post_id":"ci7g9uvk1001cz1n1zplojahy","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvk3001fz1n18ak1w791"},{"post_id":"ci7g9uvk1001cz1n1zplojahy","tag_id":"ci7g9uvk2001ez1n1fmsf690l","_id":"ci7g9uvk3001gz1n1otu36ypd"},{"post_id":"ci7g9uvk4001hz1n17qlg2u3i","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvl7001lz1n1rl21vubg"},{"post_id":"ci7g9uvk4001hz1n17qlg2u3i","tag_id":"ci7g9uvl6001jz1n1yekao2n7","_id":"ci7g9uvl7001mz1n1hktagc1n"},{"post_id":"ci7g9uvk4001hz1n17qlg2u3i","tag_id":"ci7g9uvl6001kz1n1lef2orhq","_id":"ci7g9uvl7001nz1n1knvssm65"},{"post_id":"ci7g9uvl8001oz1n1ceiz47v4","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvl9001sz1n1xh3ve9ca"},{"post_id":"ci7g9uvl8001oz1n1ceiz47v4","tag_id":"ci7g9uvl9001qz1n1v430n1kf","_id":"ci7g9uvla001tz1n1atkdhboa"},{"post_id":"ci7g9uvl8001oz1n1ceiz47v4","tag_id":"ci7g9uvl9001rz1n1cteew04a","_id":"ci7g9uvla001uz1n1yn308481"},{"post_id":"ci7g9uvlb001vz1n1bznlwrmt","tag_id":"ci7g9uvlc001xz1n106xfiikc","_id":"ci7g9uvld0020z1n1fo5vmnsl"},{"post_id":"ci7g9uvlb001vz1n1bznlwrmt","tag_id":"ci7g9uvld001yz1n1oebxmn3f","_id":"ci7g9uvld0021z1n1svuggz86"},{"post_id":"ci7g9uvlb001vz1n1bznlwrmt","tag_id":"ci7g9uvld001zz1n1yzbiseew","_id":"ci7g9uvld0022z1n1nhbiof0h"},{"post_id":"ci7g9uvle0023z1n16y3uekh1","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvlf0025z1n1hv19podh"},{"post_id":"ci7g9uvle0023z1n16y3uekh1","tag_id":"ci7g9uvl9001qz1n1v430n1kf","_id":"ci7g9uvlf0026z1n156pdt3c6"},{"post_id":"ci7g9uvlg0027z1n1gayfu8jz","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvlh0029z1n1dpmglj29"},{"post_id":"ci7g9uvlk002az1n1i50gkifp","tag_id":"ci7g9uvjy0012z1n1woxcucl8","_id":"ci7g9uvlm002cz1n10q7ai4k4"},{"post_id":"ci7g9uvlk002az1n1i50gkifp","tag_id":"ci7g9uvjz0016z1n18eev52o4","_id":"ci7g9uvlm002dz1n1pt2jxa2x"},{"post_id":"ci7g9uvln002ez1n1lk5om93e","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvlp002gz1n1277fdcqf"},{"post_id":"ci7g9uvln002ez1n1lk5om93e","tag_id":"ci7g9uvjy0012z1n1woxcucl8","_id":"ci7g9uvlp002hz1n1cih29xg2"},{"post_id":"ci7g9uvln002ez1n1lk5om93e","tag_id":"ci7g9uvjz0016z1n18eev52o4","_id":"ci7g9uvlp002iz1n113fza97x"},{"post_id":"ci7g9uvlr002jz1n1jevwimgx","tag_id":"ci7g9uvjz0016z1n18eev52o4","_id":"ci7g9uvlr002lz1n193ks26bj"},{"post_id":"ci7g9uvls002mz1n12nbpbjdg","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvlt002oz1n1ix01bi71"},{"post_id":"ci7g9uvlu002pz1n1odl56s9k","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvlv002rz1n1kby35dmd"},{"post_id":"ci7g9uvlw002sz1n12qssp3f6","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvly002uz1n1ccq4j1o9"},{"post_id":"ci7g9uvly002vz1n1u4lkf6y2","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvlz002xz1n1fl5i9qp6"},{"post_id":"ci7g9uvm0002yz1n1e626cdza","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvm10030z1n1s0iz9mej"},{"post_id":"ci7g9uvm0002yz1n1e626cdza","tag_id":"ci7g9uvjz0016z1n18eev52o4","_id":"ci7g9uvm10031z1n1cviqmahk"},{"post_id":"ci7g9uvm20032z1n1850st3ym","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvm20034z1n1zx36xopi"},{"post_id":"ci7g9uvm20032z1n1850st3ym","tag_id":"ci7g9uvl9001qz1n1v430n1kf","_id":"ci7g9uvm20035z1n1ht9iqgie"},{"post_id":"ci7g9uvm30036z1n1f713sykz","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvm40038z1n1yruha934"},{"post_id":"ci7g9uvm50039z1n10fcoyiky","tag_id":"ci7g9uvjz0016z1n18eev52o4","_id":"ci7g9uvm6003bz1n100xda5as"},{"post_id":"ci7g9uvma003cz1n1mk9jzmfn","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvmb003fz1n1l9vaffaf"},{"post_id":"ci7g9uvma003cz1n1mk9jzmfn","tag_id":"ci7g9uvma003ez1n12hn1gamz","_id":"ci7g9uvmb003gz1n1b97fyxf2"},{"post_id":"ci7g9uvmc003hz1n1l29yko2k","tag_id":"ci7g9uvmd003jz1n1hp9080or","_id":"ci7g9uvme003lz1n181ylkp84"},{"post_id":"ci7g9uvmc003hz1n1l29yko2k","tag_id":"ci7g9uvmd003kz1n124o628l6","_id":"ci7g9uvme003mz1n1rdjolhs1"},{"post_id":"ci7g9uvmc003hz1n1l29yko2k","tag_id":"ci7g9uvjq000qz1n1lpwpy92k","_id":"ci7g9uvme003nz1n1u1sq5fn3"},{"post_id":"ci7g9uvmg003oz1n1g9xaxac9","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvmi003qz1n1qbzsb81i"},{"post_id":"ci7g9uvmj003rz1n1e7xjudls","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvml003uz1n1kxvq8o1x"},{"post_id":"ci7g9uvmj003rz1n1e7xjudls","tag_id":"ci7g9uvmk003tz1n1ozkeeu1v","_id":"ci7g9uvml003vz1n13gxfgtfw"},{"post_id":"ci7g9uvml003wz1n17abfolal","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvmm003yz1n1lnyt8z7f"},{"post_id":"ci7g9uvmo003zz1n1my78cbfv","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvmp0041z1n1bzi47jz3"},{"post_id":"ci7g9uvmo003zz1n1my78cbfv","tag_id":"ci7g9uvmk003tz1n1ozkeeu1v","_id":"ci7g9uvmq0042z1n19p3c6sva"},{"post_id":"ci7g9uvmr0043z1n11xqf467x","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvms0045z1n10wlxzyem"},{"post_id":"ci7g9uvmr0043z1n11xqf467x","tag_id":"ci7g9uvmk003tz1n1ozkeeu1v","_id":"ci7g9uvms0046z1n1e5yb80o3"},{"post_id":"ci7g9uvms0047z1n1715yq8am","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvmt0049z1n1a60ncfqu"},{"post_id":"ci7g9uvmu004az1n1wv19ab04","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvmv004cz1n1wu8zvzr9"},{"post_id":"ci7g9uvmw004dz1n1ktci8sfx","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvmx004fz1n15tklinhb"},{"post_id":"ci7g9uvmy004gz1n1ircbpn3o","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvmz004iz1n1twqk3io5"},{"post_id":"ci7g9uvn0004jz1n1ze4httkc","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvn1004lz1n1z5nrhf6s"},{"post_id":"ci7g9uvn0004jz1n1ze4httkc","tag_id":"ci7g9uvl9001rz1n1cteew04a","_id":"ci7g9uvn1004mz1n1akc0j0mb"},{"post_id":"ci7g9uvn2004nz1n1a11ydu6f","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvn3004pz1n1bwmg2gho"},{"post_id":"ci7g9uvn2004nz1n1a11ydu6f","tag_id":"ci7g9uvjy0012z1n1woxcucl8","_id":"ci7g9uvn3004qz1n1s79ko0xn"},{"post_id":"ci7g9uvn3004rz1n1hx7zwv1w","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvn4004tz1n13nb98t6s"},{"post_id":"ci7g9uvn3004rz1n1hx7zwv1w","tag_id":"ci7g9uvl9001rz1n1cteew04a","_id":"ci7g9uvn4004uz1n1vhwvb7ci"},{"post_id":"ci7g9uvn5004vz1n1u88c6db9","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvn6004xz1n1ok0rqkeo"},{"post_id":"ci7g9uvn5004vz1n1u88c6db9","tag_id":"ci7g9uvl9001rz1n1cteew04a","_id":"ci7g9uvn6004yz1n1dmjnexep"},{"post_id":"ci7g9uvn8004zz1n1tnyjet3h","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvn90051z1n10ij7itsn"},{"post_id":"ci7g9uvn8004zz1n1tnyjet3h","tag_id":"ci7g9uvl9001rz1n1cteew04a","_id":"ci7g9uvn90052z1n1pbvf05wh"},{"post_id":"ci7g9uvna0053z1n1xqjtufsr","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvnb0055z1n1jnke339z"},{"post_id":"ci7g9uvnc0056z1n1ltj3m6zs","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvnc0058z1n1ql541am0"},{"post_id":"ci7g9uvnd0059z1n144ynoy8i","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvne005bz1n1nbzdcrie"},{"post_id":"ci7g9uvnf005cz1n16z8adcra","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvng005ez1n1mincos4h"},{"post_id":"ci7g9uvng005fz1n1u49asnrm","tag_id":"ci7g9uvjg0005z1n1runh6ng3","_id":"ci7g9uvnh005hz1n1bs9bjuay"}],"Tag":[{"name":"Android","_id":"ci7g9uvjg0005z1n1runh6ng3"},{"name":"数据库","_id":"ci7g9uvjh0006z1n1g4uqkup6"},{"name":"Hexo","_id":"ci7g9uvjk000cz1n1o91w5xj8"},{"name":"Github","_id":"ci7g9uvjk000dz1n1atdmcl75"},{"name":"gradle","_id":"ci7g9uvjn000jz1n189ud2qtd"},{"name":"翻译","_id":"ci7g9uvjn000kz1n1fv68evkj"},{"name":"软件开发","_id":"ci7g9uvjq000qz1n1lpwpy92k"},{"name":"Apache","_id":"ci7g9uvjx0011z1n1k2t0tf9q"},{"name":"Linux","_id":"ci7g9uvjy0012z1n1woxcucl8"},{"name":"Nginx","_id":"ci7g9uvjy0014z1n1iy1i9kbg"},{"name":"PHP","_id":"ci7g9uvjy0015z1n1fg76z7ru"},{"name":"Ubuntu","_id":"ci7g9uvjz0016z1n18eev52o4"},{"name":"开源","_id":"ci7g9uvk2001ez1n1fmsf690l"},{"name":"Http","_id":"ci7g9uvl6001jz1n1yekao2n7"},{"name":"HttpClitent","_id":"ci7g9uvl6001kz1n1lef2orhq"},{"name":"API","_id":"ci7g9uvl9001qz1n1v430n1kf"},{"name":"Widget","_id":"ci7g9uvl9001rz1n1cteew04a"},{"name":"goagent","_id":"ci7g9uvlc001xz1n106xfiikc"},{"name":"代理","_id":"ci7g9uvld001yz1n1oebxmn3f"},{"name":"翻墙","_id":"ci7g9uvld001zz1n1yzbiseew"},{"name":"Email","_id":"ci7g9uvma003ez1n12hn1gamz"},{"name":"敏捷","_id":"ci7g9uvmd003jz1n1hp9080or"},{"name":"软件工程","_id":"ci7g9uvmd003kz1n124o628l6"},{"name":"Intent","_id":"ci7g9uvmk003tz1n1ozkeeu1v"}]}}